<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="693.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="149"><g><title>perf-exec (5 samples, 3.36%)</title><rect x="0.0000%" y="645" width="3.3557%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="655.50">per..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="629" width="3.3557%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="613" width="3.3557%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="623.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="597" width="3.3557%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="607.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="581" width="3.3557%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="591.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="565" width="3.3557%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="575.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="549" width="3.3557%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="559.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="533" width="3.3557%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="543.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="517" width="3.3557%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="527.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="501" width="3.3557%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="511.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="485" width="3.3557%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="495.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="469" width="3.3557%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="479.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="453" width="3.3557%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="463.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="437" width="3.3557%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="447.50">[un..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="0.0000%" y="421" width="3.3557%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="431.50">[un..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (1 samples, 0.67%)</title><rect x="3.3557%" y="613" width="0.6711%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="3.6057%" y="623.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_mul (1 samples, 0.67%)</title><rect x="4.0268%" y="613" width="0.6711%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="4.2768%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.67%)</title><rect x="4.0268%" y="597" width="0.6711%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="4.2768%" y="607.50"></text></g><g><title>[[heap]] (3 samples, 2.01%)</title><rect x="3.3557%" y="629" width="2.0134%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="3"/><text x="3.6057%" y="639.50">[..</text></g><g><title>revm::instructions::memory::mload (1 samples, 0.67%)</title><rect x="4.6980%" y="613" width="0.6711%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="4.9480%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.67%)</title><rect x="4.6980%" y="597" width="0.6711%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="1"/><text x="4.9480%" y="607.50"></text></g><g><title>[[stack]] (1 samples, 0.67%)</title><rect x="5.3691%" y="629" width="0.6711%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="1"/><text x="5.6191%" y="639.50"></text></g><g><title>revm::instructions::stack::swap (1 samples, 0.67%)</title><rect x="5.3691%" y="613" width="0.6711%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="1"/><text x="5.6191%" y="623.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (1 samples, 0.67%)</title><rect x="6.0403%" y="613" width="0.6711%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="1"/><text x="6.2903%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="613" width="0.6711%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="1"/><text x="6.9614%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="597" width="0.6711%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="1"/><text x="6.9614%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="581" width="0.6711%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="1"/><text x="6.9614%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="565" width="0.6711%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="1"/><text x="6.9614%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="549" width="0.6711%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="1"/><text x="6.9614%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="533" width="0.6711%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="1"/><text x="6.9614%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="517" width="0.6711%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="1"/><text x="6.9614%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="501" width="0.6711%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="1"/><text x="6.9614%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="485" width="0.6711%" height="15" fill="rgb(213,181,19)" fg:x="10" fg:w="1"/><text x="6.9614%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="469" width="0.6711%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="1"/><text x="6.9614%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="453" width="0.6711%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="1"/><text x="6.9614%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="437" width="0.6711%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="1"/><text x="6.9614%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="421" width="0.6711%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="1"/><text x="6.9614%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="6.7114%" y="405" width="0.6711%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="1"/><text x="6.9614%" y="415.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (5 samples, 3.36%)</title><rect x="7.3826%" y="613" width="3.3557%" height="15" fill="rgb(238,167,29)" fg:x="11" fg:w="5"/><text x="7.6326%" y="623.50">rev..</text></g><g><title>revm::interpreter::Interpreter::run (5 samples, 3.36%)</title><rect x="7.3826%" y="597" width="3.3557%" height="15" fill="rgb(232,182,51)" fg:x="11" fg:w="5"/><text x="7.6326%" y="607.50">rev..</text></g><g><title>revm::instructions::control::jumpdest (1 samples, 0.67%)</title><rect x="10.7383%" y="613" width="0.6711%" height="15" fill="rgb(231,60,39)" fg:x="16" fg:w="1"/><text x="10.9883%" y="623.50"></text></g><g><title>[unknown] (9 samples, 6.04%)</title><rect x="6.0403%" y="629" width="6.0403%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="9"/><text x="6.2903%" y="639.50">[unknown]</text></g><g><title>revm::instructions::memory::mstore (1 samples, 0.67%)</title><rect x="11.4094%" y="613" width="0.6711%" height="15" fill="rgb(235,93,37)" fg:x="17" fg:w="1"/><text x="11.6594%" y="623.50"></text></g><g><title>__udivti3 (16 samples, 10.74%)</title><rect x="12.0805%" y="629" width="10.7383%" height="15" fill="rgb(213,116,39)" fg:x="18" fg:w="16"/><text x="12.3305%" y="639.50">__udivti3</text></g><g><title>compiler_builtins::int::udiv::__udivti3 (16 samples, 10.74%)</title><rect x="12.0805%" y="613" width="10.7383%" height="15" fill="rgb(222,207,29)" fg:x="18" fg:w="16"/><text x="12.3305%" y="623.50">compiler_builtin..</text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_div_rem (16 samples, 10.74%)</title><rect x="12.0805%" y="597" width="10.7383%" height="15" fill="rgb(206,96,30)" fg:x="18" fg:w="16"/><text x="12.3305%" y="607.50">compiler_builtin..</text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_by_u64_div_rem (16 samples, 10.74%)</title><rect x="12.0805%" y="581" width="10.7383%" height="15" fill="rgb(218,138,4)" fg:x="18" fg:w="16"/><text x="12.3305%" y="591.50">compiler_builtin..</text></g><g><title>_dl_start_user (1 samples, 0.67%)</title><rect x="22.8188%" y="629" width="0.6711%" height="15" fill="rgb(250,191,14)" fg:x="34" fg:w="1"/><text x="23.0688%" y="639.50"></text></g><g><title>_dl_init (1 samples, 0.67%)</title><rect x="22.8188%" y="613" width="0.6711%" height="15" fill="rgb(239,60,40)" fg:x="34" fg:w="1"/><text x="23.0688%" y="623.50"></text></g><g><title>call_init.part.0 (1 samples, 0.67%)</title><rect x="22.8188%" y="597" width="0.6711%" height="15" fill="rgb(206,27,48)" fg:x="34" fg:w="1"/><text x="23.0688%" y="607.50"></text></g><g><title>init_cacheinfo (1 samples, 0.67%)</title><rect x="22.8188%" y="581" width="0.6711%" height="15" fill="rgb(225,35,8)" fg:x="34" fg:w="1"/><text x="23.0688%" y="591.50"></text></g><g><title>handle_intel.constprop.0 (1 samples, 0.67%)</title><rect x="22.8188%" y="565" width="0.6711%" height="15" fill="rgb(250,213,24)" fg:x="34" fg:w="1"/><text x="23.0688%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (6 samples, 4.03%)</title><rect x="32.2148%" y="293" width="4.0268%" height="15" fill="rgb(247,123,22)" fg:x="48" fg:w="6"/><text x="32.4648%" y="303.50">core..</text></g><g><title>primitive_types::U256::overflowing_add (1 samples, 0.67%)</title><rect x="38.2550%" y="277" width="0.6711%" height="15" fill="rgb(231,138,38)" fg:x="57" fg:w="1"/><text x="38.5050%" y="287.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_add (5 samples, 3.36%)</title><rect x="36.2416%" y="293" width="3.3557%" height="15" fill="rgb(231,145,46)" fg:x="54" fg:w="5"/><text x="36.4916%" y="303.50">rev..</text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (1 samples, 0.67%)</title><rect x="38.9262%" y="277" width="0.6711%" height="15" fill="rgb(251,118,11)" fg:x="58" fg:w="1"/><text x="39.1762%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.67%)</title><rect x="38.9262%" y="261" width="0.6711%" height="15" fill="rgb(217,147,25)" fg:x="58" fg:w="1"/><text x="39.1762%" y="271.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_mul (1 samples, 0.67%)</title><rect x="39.5973%" y="293" width="0.6711%" height="15" fill="rgb(247,81,37)" fg:x="59" fg:w="1"/><text x="39.8473%" y="303.50"></text></g><g><title>primitive_types::U256::overflowing_mul (1 samples, 0.67%)</title><rect x="39.5973%" y="277" width="0.6711%" height="15" fill="rgb(209,12,38)" fg:x="59" fg:w="1"/><text x="39.8473%" y="287.50"></text></g><g><title>revm::instructions::arithmetic::rem (1 samples, 0.67%)</title><rect x="40.2685%" y="293" width="0.6711%" height="15" fill="rgb(227,1,9)" fg:x="60" fg:w="1"/><text x="40.5185%" y="303.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::Rem&lt;T&gt;&gt;::rem (1 samples, 0.67%)</title><rect x="40.2685%" y="277" width="0.6711%" height="15" fill="rgb(248,47,43)" fg:x="60" fg:w="1"/><text x="40.5185%" y="287.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::RemAssign&lt;T&gt;&gt;::rem_assign (1 samples, 0.67%)</title><rect x="40.2685%" y="261" width="0.6711%" height="15" fill="rgb(221,10,30)" fg:x="60" fg:w="1"/><text x="40.5185%" y="271.50"></text></g><g><title>primitive_types::U256::bits (1 samples, 0.67%)</title><rect x="42.2819%" y="245" width="0.6711%" height="15" fill="rgb(210,229,1)" fg:x="63" fg:w="1"/><text x="42.5319%" y="255.50"></text></g><g><title>revm::instructions::i256::div_u256::full_shl (1 samples, 0.67%)</title><rect x="42.9530%" y="229" width="0.6711%" height="15" fill="rgb(222,148,37)" fg:x="64" fg:w="1"/><text x="43.2030%" y="239.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::bit::Shr&lt;T&gt;&gt;::shr (1 samples, 0.67%)</title><rect x="42.9530%" y="213" width="0.6711%" height="15" fill="rgb(234,67,33)" fg:x="64" fg:w="1"/><text x="43.2030%" y="223.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.67%)</title><rect x="42.9530%" y="197" width="0.6711%" height="15" fill="rgb(247,98,35)" fg:x="64" fg:w="1"/><text x="43.2030%" y="207.50"></text></g><g><title>&lt;primitive_types::U256 as core::convert::From&lt;u32&gt;&gt;::from (1 samples, 0.67%)</title><rect x="42.9530%" y="181" width="0.6711%" height="15" fill="rgb(247,138,52)" fg:x="64" fg:w="1"/><text x="43.2030%" y="191.50"></text></g><g><title>&lt;primitive_types::U256 as core::convert::From&lt;u64&gt;&gt;::from (1 samples, 0.67%)</title><rect x="42.9530%" y="165" width="0.6711%" height="15" fill="rgb(213,79,30)" fg:x="64" fg:w="1"/><text x="43.2030%" y="175.50"></text></g><g><title>revm::instructions::i256::div_u256::div_mod_knuth (2 samples, 1.34%)</title><rect x="42.9530%" y="245" width="1.3423%" height="15" fill="rgb(246,177,23)" fg:x="64" fg:w="2"/><text x="43.2030%" y="255.50"></text></g><g><title>revm::instructions::i256::div_u256::full_shr (1 samples, 0.67%)</title><rect x="43.6242%" y="229" width="0.6711%" height="15" fill="rgb(230,62,27)" fg:x="65" fg:w="1"/><text x="43.8742%" y="239.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::Shr&lt;u32&gt;&gt;::shr (1 samples, 0.67%)</title><rect x="43.6242%" y="213" width="0.6711%" height="15" fill="rgb(216,154,8)" fg:x="65" fg:w="1"/><text x="43.8742%" y="223.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;u32&gt;&gt;::shr (1 samples, 0.67%)</title><rect x="43.6242%" y="197" width="0.6711%" height="15" fill="rgb(244,35,45)" fg:x="65" fg:w="1"/><text x="43.8742%" y="207.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.67%)</title><rect x="44.2953%" y="229" width="0.6711%" height="15" fill="rgb(251,115,12)" fg:x="66" fg:w="1"/><text x="44.5453%" y="239.50"></text></g><g><title>&lt;primitive_types::U256 as core::convert::From&lt;u64&gt;&gt;::from (1 samples, 0.67%)</title><rect x="44.2953%" y="213" width="0.6711%" height="15" fill="rgb(240,54,50)" fg:x="66" fg:w="1"/><text x="44.5453%" y="223.50"></text></g><g><title>revm::instructions::i256::i256_div (8 samples, 5.37%)</title><rect x="40.9396%" y="277" width="5.3691%" height="15" fill="rgb(233,84,52)" fg:x="61" fg:w="8"/><text x="41.1896%" y="287.50">revm::i..</text></g><g><title>revm::instructions::i256::div_u256::div_mod (7 samples, 4.70%)</title><rect x="41.6107%" y="261" width="4.6980%" height="15" fill="rgb(207,117,47)" fg:x="62" fg:w="7"/><text x="41.8607%" y="271.50">revm:..</text></g><g><title>revm::instructions::i256::div_u256::div_mod_small (3 samples, 2.01%)</title><rect x="44.2953%" y="245" width="2.0134%" height="15" fill="rgb(249,43,39)" fg:x="66" fg:w="3"/><text x="44.5453%" y="255.50">r..</text></g><g><title>revm::instructions::i256::div_u256::div_mod_word (2 samples, 1.34%)</title><rect x="44.9664%" y="229" width="1.3423%" height="15" fill="rgb(209,38,44)" fg:x="67" fg:w="2"/><text x="45.2164%" y="239.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (9 samples, 6.04%)</title><rect x="40.9396%" y="293" width="6.0403%" height="15" fill="rgb(236,212,23)" fg:x="61" fg:w="9"/><text x="41.1896%" y="303.50">revm::in..</text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.67%)</title><rect x="46.3087%" y="277" width="0.6711%" height="15" fill="rgb(242,79,21)" fg:x="69" fg:w="1"/><text x="46.5587%" y="287.50"></text></g><g><title>revm::instructions::i256::i256_cmp (2 samples, 1.34%)</title><rect x="46.9799%" y="277" width="1.3423%" height="15" fill="rgb(211,96,35)" fg:x="70" fg:w="2"/><text x="47.2299%" y="287.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (2 samples, 1.34%)</title><rect x="46.9799%" y="261" width="1.3423%" height="15" fill="rgb(253,215,40)" fg:x="70" fg:w="2"/><text x="47.2299%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (2 samples, 1.34%)</title><rect x="46.9799%" y="245" width="1.3423%" height="15" fill="rgb(211,81,21)" fg:x="70" fg:w="2"/><text x="47.2299%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (2 samples, 1.34%)</title><rect x="46.9799%" y="229" width="1.3423%" height="15" fill="rgb(208,190,38)" fg:x="70" fg:w="2"/><text x="47.2299%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::{{closure}} (2 samples, 1.34%)</title><rect x="46.9799%" y="213" width="1.3423%" height="15" fill="rgb(235,213,38)" fg:x="70" fg:w="2"/><text x="47.2299%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (2 samples, 1.34%)</title><rect x="46.9799%" y="197" width="1.3423%" height="15" fill="rgb(237,122,38)" fg:x="70" fg:w="2"/><text x="47.2299%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (2 samples, 1.34%)</title><rect x="46.9799%" y="181" width="1.3423%" height="15" fill="rgb(244,218,35)" fg:x="70" fg:w="2"/><text x="47.2299%" y="191.50"></text></g><g><title>revm::instructions::bitwise::slt (3 samples, 2.01%)</title><rect x="46.9799%" y="293" width="2.0134%" height="15" fill="rgb(240,68,47)" fg:x="70" fg:w="3"/><text x="47.2299%" y="303.50">r..</text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (1 samples, 0.67%)</title><rect x="48.3221%" y="277" width="0.6711%" height="15" fill="rgb(210,16,53)" fg:x="72" fg:w="1"/><text x="48.5721%" y="287.50"></text></g><g><title>revm::instructions::control::jump (2 samples, 1.34%)</title><rect x="48.9933%" y="293" width="1.3423%" height="15" fill="rgb(235,124,12)" fg:x="73" fg:w="2"/><text x="49.2433%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.67%)</title><rect x="49.6644%" y="277" width="0.6711%" height="15" fill="rgb(224,169,11)" fg:x="74" fg:w="1"/><text x="49.9144%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.67%)</title><rect x="49.6644%" y="261" width="0.6711%" height="15" fill="rgb(250,166,2)" fg:x="74" fg:w="1"/><text x="49.9144%" y="271.50"></text></g><g><title>revm::instructions::control::jumpdest (1 samples, 0.67%)</title><rect x="50.3356%" y="293" width="0.6711%" height="15" fill="rgb(242,216,29)" fg:x="75" fg:w="1"/><text x="50.5856%" y="303.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.67%)</title><rect x="55.7047%" y="165" width="0.6711%" height="15" fill="rgb(230,116,27)" fg:x="83" fg:w="1"/><text x="55.9547%" y="175.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.67%)</title><rect x="55.7047%" y="149" width="0.6711%" height="15" fill="rgb(228,99,48)" fg:x="83" fg:w="1"/><text x="55.9547%" y="159.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (2 samples, 1.34%)</title><rect x="55.7047%" y="181" width="1.3423%" height="15" fill="rgb(253,11,6)" fg:x="83" fg:w="2"/><text x="55.9547%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.67%)</title><rect x="56.3758%" y="165" width="0.6711%" height="15" fill="rgb(247,143,39)" fg:x="84" fg:w="1"/><text x="56.6258%" y="175.50"></text></g><g><title>hashbrown::map::make_insert_hash (4 samples, 2.68%)</title><rect x="55.7047%" y="245" width="2.6846%" height="15" fill="rgb(236,97,10)" fg:x="83" fg:w="4"/><text x="55.9547%" y="255.50">ha..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (4 samples, 2.68%)</title><rect x="55.7047%" y="229" width="2.6846%" height="15" fill="rgb(233,208,19)" fg:x="83" fg:w="4"/><text x="55.9547%" y="239.50">co..</text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (4 samples, 2.68%)</title><rect x="55.7047%" y="213" width="2.6846%" height="15" fill="rgb(216,164,2)" fg:x="83" fg:w="4"/><text x="55.9547%" y="223.50">&lt;p..</text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (4 samples, 2.68%)</title><rect x="55.7047%" y="197" width="2.6846%" height="15" fill="rgb(220,129,5)" fg:x="83" fg:w="4"/><text x="55.9547%" y="207.50">&lt;a..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (2 samples, 1.34%)</title><rect x="57.0470%" y="181" width="1.3423%" height="15" fill="rgb(242,17,10)" fg:x="85" fg:w="2"/><text x="57.2970%" y="191.50"></text></g><g><title>&lt;primitive_types::H160 as core::cmp::PartialEq&gt;::eq (1 samples, 0.67%)</title><rect x="58.3893%" y="165" width="0.6711%" height="15" fill="rgb(242,107,0)" fg:x="87" fg:w="1"/><text x="58.6393%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.67%)</title><rect x="58.3893%" y="149" width="0.6711%" height="15" fill="rgb(251,28,31)" fg:x="87" fg:w="1"/><text x="58.6393%" y="159.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.67%)</title><rect x="58.3893%" y="133" width="0.6711%" height="15" fill="rgb(233,223,10)" fg:x="87" fg:w="1"/><text x="58.6393%" y="143.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.67%)</title><rect x="58.3893%" y="117" width="0.6711%" height="15" fill="rgb(215,21,27)" fg:x="87" fg:w="1"/><text x="58.6393%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 2.01%)</title><rect x="58.3893%" y="213" width="2.0134%" height="15" fill="rgb(232,23,21)" fg:x="87" fg:w="3"/><text x="58.6393%" y="223.50">h..</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 2.01%)</title><rect x="58.3893%" y="197" width="2.0134%" height="15" fill="rgb(244,5,23)" fg:x="87" fg:w="3"/><text x="58.6393%" y="207.50">h..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (3 samples, 2.01%)</title><rect x="58.3893%" y="181" width="2.0134%" height="15" fill="rgb(226,81,46)" fg:x="87" fg:w="3"/><text x="58.6393%" y="191.50">c..</text></g><g><title>&lt;primitive_types::U256 as core::cmp::PartialEq&gt;::eq (2 samples, 1.34%)</title><rect x="59.0604%" y="165" width="1.3423%" height="15" fill="rgb(247,70,30)" fg:x="88" fg:w="2"/><text x="59.3104%" y="175.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (2 samples, 1.34%)</title><rect x="59.0604%" y="149" width="1.3423%" height="15" fill="rgb(212,68,19)" fg:x="88" fg:w="2"/><text x="59.3104%" y="159.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (2 samples, 1.34%)</title><rect x="59.0604%" y="133" width="1.3423%" height="15" fill="rgb(240,187,13)" fg:x="88" fg:w="2"/><text x="59.3104%" y="143.50"></text></g><g><title>revm::instructions::host::sload (16 samples, 10.74%)</title><rect x="51.0067%" y="293" width="10.7383%" height="15" fill="rgb(223,113,26)" fg:x="76" fg:w="16"/><text x="51.2567%" y="303.50">revm::instructio..</text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (11 samples, 7.38%)</title><rect x="54.3624%" y="277" width="7.3826%" height="15" fill="rgb(206,192,2)" fg:x="81" fg:w="11"/><text x="54.6124%" y="287.50">&lt;revm::evm..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (9 samples, 6.04%)</title><rect x="55.7047%" y="261" width="6.0403%" height="15" fill="rgb(241,108,4)" fg:x="83" fg:w="9"/><text x="55.9547%" y="271.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 3.36%)</title><rect x="58.3893%" y="245" width="3.3557%" height="15" fill="rgb(247,173,49)" fg:x="87" fg:w="5"/><text x="58.6393%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5 samples, 3.36%)</title><rect x="58.3893%" y="229" width="3.3557%" height="15" fill="rgb(224,114,35)" fg:x="87" fg:w="5"/><text x="58.6393%" y="239.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 1.34%)</title><rect x="60.4027%" y="213" width="1.3423%" height="15" fill="rgb(245,159,27)" fg:x="90" fg:w="2"/><text x="60.6527%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 1.34%)</title><rect x="60.4027%" y="197" width="1.3423%" height="15" fill="rgb(245,172,44)" fg:x="90" fg:w="2"/><text x="60.6527%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (1 samples, 0.67%)</title><rect x="61.7450%" y="277" width="0.6711%" height="15" fill="rgb(236,23,11)" fg:x="92" fg:w="1"/><text x="61.9950%" y="287.50"></text></g><g><title>primitive_types::U256::from_big_endian (2 samples, 1.34%)</title><rect x="62.4161%" y="277" width="1.3423%" height="15" fill="rgb(205,117,38)" fg:x="93" fg:w="2"/><text x="62.6661%" y="287.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.67%)</title><rect x="63.0872%" y="261" width="0.6711%" height="15" fill="rgb(237,72,25)" fg:x="94" fg:w="1"/><text x="63.3372%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.67%)</title><rect x="63.0872%" y="245" width="0.6711%" height="15" fill="rgb(244,70,9)" fg:x="94" fg:w="1"/><text x="63.3372%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.67%)</title><rect x="63.0872%" y="229" width="0.6711%" height="15" fill="rgb(217,125,39)" fg:x="94" fg:w="1"/><text x="63.3372%" y="239.50"></text></g><g><title>revm::instructions::memory::mload (7 samples, 4.70%)</title><rect x="61.7450%" y="293" width="4.6980%" height="15" fill="rgb(235,36,10)" fg:x="92" fg:w="7"/><text x="61.9950%" y="303.50">revm:..</text></g><g><title>revm::interpreter::stack::Stack::push (4 samples, 2.68%)</title><rect x="63.7584%" y="277" width="2.6846%" height="15" fill="rgb(251,123,47)" fg:x="95" fg:w="4"/><text x="64.0084%" y="287.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 2.68%)</title><rect x="63.7584%" y="261" width="2.6846%" height="15" fill="rgb(221,13,13)" fg:x="95" fg:w="4"/><text x="64.0084%" y="271.50">al..</text></g><g><title>core::ptr::write (4 samples, 2.68%)</title><rect x="63.7584%" y="245" width="2.6846%" height="15" fill="rgb(238,131,9)" fg:x="95" fg:w="4"/><text x="64.0084%" y="255.50">co..</text></g><g><title>revm::gas::Gas::record_memory (1 samples, 0.67%)</title><rect x="67.1141%" y="277" width="0.6711%" height="15" fill="rgb(211,50,8)" fg:x="100" fg:w="1"/><text x="67.3641%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.67%)</title><rect x="67.1141%" y="261" width="0.6711%" height="15" fill="rgb(245,182,24)" fg:x="100" fg:w="1"/><text x="67.3641%" y="271.50"></text></g><g><title>revm::gas::calc::memory_gas (1 samples, 0.67%)</title><rect x="67.7852%" y="277" width="0.6711%" height="15" fill="rgb(242,14,37)" fg:x="101" fg:w="1"/><text x="68.0352%" y="287.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (7 samples, 4.70%)</title><rect x="68.4564%" y="277" width="4.6980%" height="15" fill="rgb(246,228,12)" fg:x="102" fg:w="7"/><text x="68.7064%" y="287.50">revm:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (7 samples, 4.70%)</title><rect x="68.4564%" y="261" width="4.6980%" height="15" fill="rgb(213,55,15)" fg:x="102" fg:w="7"/><text x="68.7064%" y="271.50">alloc..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (7 samples, 4.70%)</title><rect x="68.4564%" y="245" width="4.6980%" height="15" fill="rgb(209,9,3)" fg:x="102" fg:w="7"/><text x="68.7064%" y="255.50">alloc..</text></g><g><title>core::ptr::write (7 samples, 4.70%)</title><rect x="68.4564%" y="229" width="4.6980%" height="15" fill="rgb(230,59,30)" fg:x="102" fg:w="7"/><text x="68.7064%" y="239.50">core:..</text></g><g><title>__memset_avx2_unaligned_erms (7 samples, 4.70%)</title><rect x="68.4564%" y="213" width="4.6980%" height="15" fill="rgb(209,121,21)" fg:x="102" fg:w="7"/><text x="68.7064%" y="223.50">__mem..</text></g><g><title>[unknown] (7 samples, 4.70%)</title><rect x="68.4564%" y="197" width="4.6980%" height="15" fill="rgb(220,109,13)" fg:x="102" fg:w="7"/><text x="68.7064%" y="207.50">[unkn..</text></g><g><title>[unknown] (6 samples, 4.03%)</title><rect x="69.1275%" y="181" width="4.0268%" height="15" fill="rgb(232,18,1)" fg:x="103" fg:w="6"/><text x="69.3775%" y="191.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.03%)</title><rect x="69.1275%" y="165" width="4.0268%" height="15" fill="rgb(215,41,42)" fg:x="103" fg:w="6"/><text x="69.3775%" y="175.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.03%)</title><rect x="69.1275%" y="149" width="4.0268%" height="15" fill="rgb(224,123,36)" fg:x="103" fg:w="6"/><text x="69.3775%" y="159.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.03%)</title><rect x="69.1275%" y="133" width="4.0268%" height="15" fill="rgb(240,125,3)" fg:x="103" fg:w="6"/><text x="69.3775%" y="143.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.03%)</title><rect x="69.1275%" y="117" width="4.0268%" height="15" fill="rgb(205,98,50)" fg:x="103" fg:w="6"/><text x="69.3775%" y="127.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.03%)</title><rect x="69.1275%" y="101" width="4.0268%" height="15" fill="rgb(205,185,37)" fg:x="103" fg:w="6"/><text x="69.3775%" y="111.50">[unk..</text></g><g><title>[unknown] (6 samples, 4.03%)</title><rect x="69.1275%" y="85" width="4.0268%" height="15" fill="rgb(238,207,15)" fg:x="103" fg:w="6"/><text x="69.3775%" y="95.50">[unk..</text></g><g><title>[unknown] (5 samples, 3.36%)</title><rect x="69.7987%" y="69" width="3.3557%" height="15" fill="rgb(213,199,42)" fg:x="104" fg:w="5"/><text x="70.0487%" y="79.50">[un..</text></g><g><title>[unknown] (3 samples, 2.01%)</title><rect x="71.1409%" y="53" width="2.0134%" height="15" fill="rgb(235,201,11)" fg:x="106" fg:w="3"/><text x="71.3909%" y="63.50">[..</text></g><g><title>[unknown] (1 samples, 0.67%)</title><rect x="72.4832%" y="37" width="0.6711%" height="15" fill="rgb(207,46,11)" fg:x="108" fg:w="1"/><text x="72.7332%" y="47.50"></text></g><g><title>revm::interpreter::memory::Memory::set_u256 (2 samples, 1.34%)</title><rect x="73.1544%" y="277" width="1.3423%" height="15" fill="rgb(241,35,35)" fg:x="109" fg:w="2"/><text x="73.4044%" y="287.50"></text></g><g><title>primitive_types::U256::to_big_endian (2 samples, 1.34%)</title><rect x="73.1544%" y="261" width="1.3423%" height="15" fill="rgb(243,32,47)" fg:x="109" fg:w="2"/><text x="73.4044%" y="271.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::write_u64 (2 samples, 1.34%)</title><rect x="73.1544%" y="245" width="1.3423%" height="15" fill="rgb(247,202,23)" fg:x="109" fg:w="2"/><text x="73.4044%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 1.34%)</title><rect x="73.1544%" y="229" width="1.3423%" height="15" fill="rgb(219,102,11)" fg:x="109" fg:w="2"/><text x="73.4044%" y="239.50"></text></g><g><title>revm::instructions::memory::mstore (13 samples, 8.72%)</title><rect x="66.4430%" y="293" width="8.7248%" height="15" fill="rgb(243,110,44)" fg:x="99" fg:w="13"/><text x="66.6930%" y="303.50">revm::instru..</text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (1 samples, 0.67%)</title><rect x="74.4966%" y="277" width="0.6711%" height="15" fill="rgb(222,74,54)" fg:x="111" fg:w="1"/><text x="74.7466%" y="287.50"></text></g><g><title>revm::instructions::stack::dup (9 samples, 6.04%)</title><rect x="75.1678%" y="293" width="6.0403%" height="15" fill="rgb(216,99,12)" fg:x="112" fg:w="9"/><text x="75.4178%" y="303.50">revm::in..</text></g><g><title>revm::interpreter::stack::Stack::dup (9 samples, 6.04%)</title><rect x="75.1678%" y="277" width="6.0403%" height="15" fill="rgb(226,22,26)" fg:x="112" fg:w="9"/><text x="75.4178%" y="287.50">revm::in..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 1.34%)</title><rect x="79.8658%" y="261" width="1.3423%" height="15" fill="rgb(217,163,10)" fg:x="119" fg:w="2"/><text x="80.1158%" y="271.50"></text></g><g><title>revm::instructions::stack::pop (2 samples, 1.34%)</title><rect x="81.2081%" y="293" width="1.3423%" height="15" fill="rgb(213,25,53)" fg:x="121" fg:w="2"/><text x="81.4581%" y="303.50"></text></g><g><title>revm::interpreter::stack::Stack::reduce_one (2 samples, 1.34%)</title><rect x="81.2081%" y="277" width="1.3423%" height="15" fill="rgb(252,105,26)" fg:x="121" fg:w="2"/><text x="81.4581%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (1 samples, 0.67%)</title><rect x="86.5772%" y="261" width="0.6711%" height="15" fill="rgb(220,39,43)" fg:x="129" fg:w="1"/><text x="86.8272%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (1 samples, 0.67%)</title><rect x="86.5772%" y="245" width="0.6711%" height="15" fill="rgb(229,68,48)" fg:x="129" fg:w="1"/><text x="86.8272%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (1 samples, 0.67%)</title><rect x="86.5772%" y="229" width="0.6711%" height="15" fill="rgb(252,8,32)" fg:x="129" fg:w="1"/><text x="86.8272%" y="239.50"></text></g><g><title>revm::instructions::stack::push (8 samples, 5.37%)</title><rect x="82.5503%" y="293" width="5.3691%" height="15" fill="rgb(223,20,43)" fg:x="123" fg:w="8"/><text x="82.8003%" y="303.50">revm::i..</text></g><g><title>revm::interpreter::stack::Stack::push_slice (6 samples, 4.03%)</title><rect x="83.8926%" y="277" width="4.0268%" height="15" fill="rgb(229,81,49)" fg:x="125" fg:w="6"/><text x="84.1426%" y="287.50">revm..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.67%)</title><rect x="87.2483%" y="261" width="0.6711%" height="15" fill="rgb(236,28,36)" fg:x="130" fg:w="1"/><text x="87.4983%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.67%)</title><rect x="87.2483%" y="245" width="0.6711%" height="15" fill="rgb(249,185,26)" fg:x="130" fg:w="1"/><text x="87.4983%" y="255.50"></text></g><g><title>revm::instructions::stack::swap (8 samples, 5.37%)</title><rect x="87.9195%" y="293" width="5.3691%" height="15" fill="rgb(249,174,33)" fg:x="131" fg:w="8"/><text x="88.1695%" y="303.50">revm::i..</text></g><g><title>revm::interpreter::stack::Stack::swap (8 samples, 5.37%)</title><rect x="87.9195%" y="277" width="5.3691%" height="15" fill="rgb(233,201,37)" fg:x="131" fg:w="8"/><text x="88.1695%" y="287.50">revm::i..</text></g><g><title>core::ptr::swap (6 samples, 4.03%)</title><rect x="89.2617%" y="261" width="4.0268%" height="15" fill="rgb(221,78,26)" fg:x="133" fg:w="6"/><text x="89.5117%" y="271.50">core..</text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 4.03%)</title><rect x="89.2617%" y="245" width="4.0268%" height="15" fill="rgb(250,127,30)" fg:x="133" fg:w="6"/><text x="89.5117%" y="255.50">core..</text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (3 samples, 2.01%)</title><rect x="93.9597%" y="149" width="2.0134%" height="15" fill="rgb(230,49,44)" fg:x="140" fg:w="3"/><text x="94.2097%" y="159.50">&lt;..</text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (2 samples, 1.34%)</title><rect x="95.9732%" y="149" width="1.3423%" height="15" fill="rgb(229,67,23)" fg:x="143" fg:w="2"/><text x="96.2232%" y="159.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (9 samples, 6.04%)</title><rect x="93.2886%" y="277" width="6.0403%" height="15" fill="rgb(249,83,47)" fg:x="139" fg:w="9"/><text x="93.5386%" y="287.50">&lt;D as di..</text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (9 samples, 6.04%)</title><rect x="93.2886%" y="261" width="6.0403%" height="15" fill="rgb(215,43,3)" fg:x="139" fg:w="9"/><text x="93.5386%" y="271.50">&lt;D as di..</text></g><g><title>digest::FixedOutput::finalize_fixed (9 samples, 6.04%)</title><rect x="93.2886%" y="245" width="6.0403%" height="15" fill="rgb(238,154,13)" fg:x="139" fg:w="9"/><text x="93.5386%" y="255.50">digest::..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (9 samples, 6.04%)</title><rect x="93.2886%" y="229" width="6.0403%" height="15" fill="rgb(219,56,2)" fg:x="139" fg:w="9"/><text x="93.5386%" y="239.50">&lt;digest:..</text></g><g><title>&lt;sha3::Keccak256Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (9 samples, 6.04%)</title><rect x="93.2886%" y="213" width="6.0403%" height="15" fill="rgb(233,0,4)" fg:x="139" fg:w="9"/><text x="93.5386%" y="223.50">&lt;sha3::K..</text></g><g><title>sha3::state::Sha3State::absorb_block (9 samples, 6.04%)</title><rect x="93.2886%" y="197" width="6.0403%" height="15" fill="rgb(235,30,7)" fg:x="139" fg:w="9"/><text x="93.5386%" y="207.50">sha3::st..</text></g><g><title>keccak::f1600 (9 samples, 6.04%)</title><rect x="93.2886%" y="181" width="6.0403%" height="15" fill="rgb(250,79,13)" fg:x="139" fg:w="9"/><text x="93.5386%" y="191.50">keccak::..</text></g><g><title>keccak::keccak_p (9 samples, 6.04%)</title><rect x="93.2886%" y="165" width="6.0403%" height="15" fill="rgb(211,146,34)" fg:x="139" fg:w="9"/><text x="93.5386%" y="175.50">keccak::..</text></g><g><title>&lt;u64 as keccak::LaneSize&gt;::rotate_left (3 samples, 2.01%)</title><rect x="97.3154%" y="149" width="2.0134%" height="15" fill="rgb(228,22,38)" fg:x="145" fg:w="3"/><text x="97.5654%" y="159.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 2.01%)</title><rect x="97.3154%" y="133" width="2.0134%" height="15" fill="rgb(235,168,5)" fg:x="145" fg:w="3"/><text x="97.5654%" y="143.50">c..</text></g><g><title>all (149 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(221,155,16)" fg:x="0" fg:w="149"/><text x="0.2500%" y="671.50"></text></g><g><title>snailtracer (144 samples, 96.64%)</title><rect x="3.3557%" y="645" width="96.6443%" height="15" fill="rgb(215,215,53)" fg:x="5" fg:w="144"/><text x="3.6057%" y="655.50">snailtracer</text></g><g><title>_start (114 samples, 76.51%)</title><rect x="23.4899%" y="629" width="76.5101%" height="15" fill="rgb(223,4,10)" fg:x="35" fg:w="114"/><text x="23.7399%" y="639.50">_start</text></g><g><title>__libc_start_main (114 samples, 76.51%)</title><rect x="23.4899%" y="613" width="76.5101%" height="15" fill="rgb(234,103,6)" fg:x="35" fg:w="114"/><text x="23.7399%" y="623.50">__libc_start_main</text></g><g><title>main (114 samples, 76.51%)</title><rect x="23.4899%" y="597" width="76.5101%" height="15" fill="rgb(227,97,0)" fg:x="35" fg:w="114"/><text x="23.7399%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (114 samples, 76.51%)</title><rect x="23.4899%" y="581" width="76.5101%" height="15" fill="rgb(234,150,53)" fg:x="35" fg:w="114"/><text x="23.7399%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (114 samples, 76.51%)</title><rect x="23.4899%" y="565" width="76.5101%" height="15" fill="rgb(228,201,54)" fg:x="35" fg:w="114"/><text x="23.7399%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (114 samples, 76.51%)</title><rect x="23.4899%" y="549" width="76.5101%" height="15" fill="rgb(222,22,37)" fg:x="35" fg:w="114"/><text x="23.7399%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (114 samples, 76.51%)</title><rect x="23.4899%" y="533" width="76.5101%" height="15" fill="rgb(237,53,32)" fg:x="35" fg:w="114"/><text x="23.7399%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (114 samples, 76.51%)</title><rect x="23.4899%" y="517" width="76.5101%" height="15" fill="rgb(233,25,53)" fg:x="35" fg:w="114"/><text x="23.7399%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (114 samples, 76.51%)</title><rect x="23.4899%" y="501" width="76.5101%" height="15" fill="rgb(210,40,34)" fg:x="35" fg:w="114"/><text x="23.7399%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (114 samples, 76.51%)</title><rect x="23.4899%" y="485" width="76.5101%" height="15" fill="rgb(241,220,44)" fg:x="35" fg:w="114"/><text x="23.7399%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (114 samples, 76.51%)</title><rect x="23.4899%" y="469" width="76.5101%" height="15" fill="rgb(235,28,35)" fg:x="35" fg:w="114"/><text x="23.7399%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (114 samples, 76.51%)</title><rect x="23.4899%" y="453" width="76.5101%" height="15" fill="rgb(210,56,17)" fg:x="35" fg:w="114"/><text x="23.7399%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (114 samples, 76.51%)</title><rect x="23.4899%" y="437" width="76.5101%" height="15" fill="rgb(224,130,29)" fg:x="35" fg:w="114"/><text x="23.7399%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (114 samples, 76.51%)</title><rect x="23.4899%" y="421" width="76.5101%" height="15" fill="rgb(235,212,8)" fg:x="35" fg:w="114"/><text x="23.7399%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (114 samples, 76.51%)</title><rect x="23.4899%" y="405" width="76.5101%" height="15" fill="rgb(223,33,50)" fg:x="35" fg:w="114"/><text x="23.7399%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>snailtracer::main (114 samples, 76.51%)</title><rect x="23.4899%" y="389" width="76.5101%" height="15" fill="rgb(219,149,13)" fg:x="35" fg:w="114"/><text x="23.7399%" y="399.50">snailtracer::main</text></g><g><title>snailtracer::simple_example (114 samples, 76.51%)</title><rect x="23.4899%" y="373" width="76.5101%" height="15" fill="rgb(250,156,29)" fg:x="35" fg:w="114"/><text x="23.7399%" y="383.50">snailtracer::simple_example</text></g><g><title>revm::evm::EVM&lt;DB&gt;::transact (114 samples, 76.51%)</title><rect x="23.4899%" y="357" width="76.5101%" height="15" fill="rgb(216,193,19)" fg:x="35" fg:w="114"/><text x="23.7399%" y="367.50">revm::evm::EVM&lt;DB&gt;::transact</text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact (114 samples, 76.51%)</title><rect x="23.4899%" y="341" width="76.5101%" height="15" fill="rgb(216,135,14)" fg:x="35" fg:w="114"/><text x="23.7399%" y="351.50">&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact</text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (114 samples, 76.51%)</title><rect x="23.4899%" y="325" width="76.5101%" height="15" fill="rgb(241,47,5)" fg:x="35" fg:w="114"/><text x="23.7399%" y="335.50">revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner</text></g><g><title>revm::interpreter::Interpreter::run (114 samples, 76.51%)</title><rect x="23.4899%" y="309" width="76.5101%" height="15" fill="rgb(233,42,35)" fg:x="35" fg:w="114"/><text x="23.7399%" y="319.50">revm::interpreter::Interpreter::run</text></g><g><title>revm::instructions::system::sha3 (10 samples, 6.71%)</title><rect x="93.2886%" y="293" width="6.7114%" height="15" fill="rgb(231,13,6)" fg:x="139" fg:w="10"/><text x="93.5386%" y="303.50">revm::ins..</text></g><g><title>revm::interpreter::stack::Stack::push_h256 (1 samples, 0.67%)</title><rect x="99.3289%" y="277" width="0.6711%" height="15" fill="rgb(207,181,40)" fg:x="148" fg:w="1"/><text x="99.5789%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.67%)</title><rect x="99.3289%" y="261" width="0.6711%" height="15" fill="rgb(254,173,49)" fg:x="148" fg:w="1"/><text x="99.5789%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.67%)</title><rect x="99.3289%" y="245" width="0.6711%" height="15" fill="rgb(221,1,38)" fg:x="148" fg:w="1"/><text x="99.5789%" y="255.50"></text></g></svg></svg>