<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="693.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="1989"><g><title>perf-exec (5 samples, 0.25%)</title><rect x="0.0000%" y="645" width="0.2514%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="629" width="0.2514%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="613" width="0.2514%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="597" width="0.2514%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="581" width="0.2514%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="565" width="0.2514%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="549" width="0.2514%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="533" width="0.2514%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="517" width="0.2514%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="501" width="0.2514%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="485" width="0.2514%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="469" width="0.2514%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="453" width="0.2514%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="437" width="0.2514%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.25%)</title><rect x="0.0000%" y="421" width="0.2514%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="431.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::Add&lt;T&gt;&gt;::add (1 samples, 0.05%)</title><rect x="0.2514%" y="629" width="0.0503%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.5014%" y="639.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_mul (1 samples, 0.05%)</title><rect x="0.3017%" y="613" width="0.0503%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="1"/><text x="0.5517%" y="623.50"></text></g><g><title>revm::instructions::i256::i256_div (4 samples, 0.20%)</title><rect x="0.3519%" y="597" width="0.2011%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="4"/><text x="0.6019%" y="607.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (7 samples, 0.35%)</title><rect x="0.3519%" y="613" width="0.3519%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="7"/><text x="0.6019%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (3 samples, 0.15%)</title><rect x="0.5530%" y="597" width="0.1508%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="3"/><text x="0.8030%" y="607.50"></text></g><g><title>revm::instructions::bitwise::iszero (2 samples, 0.10%)</title><rect x="0.7039%" y="613" width="0.1006%" height="15" fill="rgb(249,33,26)" fg:x="14" fg:w="2"/><text x="0.9539%" y="623.50"></text></g><g><title>revm::instructions::bitwise::sgt (3 samples, 0.15%)</title><rect x="0.8044%" y="613" width="0.1508%" height="15" fill="rgb(235,183,28)" fg:x="16" fg:w="3"/><text x="1.0544%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (3 samples, 0.15%)</title><rect x="0.8044%" y="597" width="0.1508%" height="15" fill="rgb(221,5,38)" fg:x="16" fg:w="3"/><text x="1.0544%" y="607.50"></text></g><g><title>revm::instructions::i256::i256_cmp (1 samples, 0.05%)</title><rect x="0.9553%" y="597" width="0.0503%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="1"/><text x="1.2053%" y="607.50"></text></g><g><title>revm::instructions::bitwise::slt (3 samples, 0.15%)</title><rect x="0.9553%" y="613" width="0.1508%" height="15" fill="rgb(241,131,45)" fg:x="19" fg:w="3"/><text x="1.2053%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (2 samples, 0.10%)</title><rect x="1.0055%" y="597" width="0.1006%" height="15" fill="rgb(249,31,29)" fg:x="20" fg:w="2"/><text x="1.2555%" y="607.50"></text></g><g><title>revm::instructions::host::sload (2 samples, 0.10%)</title><rect x="1.1061%" y="613" width="0.1006%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="2"/><text x="1.3561%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (2 samples, 0.10%)</title><rect x="1.1061%" y="597" width="0.1006%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="2"/><text x="1.3561%" y="607.50"></text></g><g><title>[[heap]] (19 samples, 0.96%)</title><rect x="0.3017%" y="629" width="0.9553%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="19"/><text x="0.5517%" y="639.50"></text></g><g><title>revm::instructions::memory::mstore (1 samples, 0.05%)</title><rect x="1.2066%" y="613" width="0.0503%" height="15" fill="rgb(232,36,49)" fg:x="24" fg:w="1"/><text x="1.4566%" y="623.50"></text></g><g><title>__rdl_alloc (1 samples, 0.05%)</title><rect x="1.2569%" y="613" width="0.0503%" height="15" fill="rgb(209,103,24)" fg:x="25" fg:w="1"/><text x="1.5069%" y="623.50"></text></g><g><title>primitive_types::U256::from_big_endian (7 samples, 0.35%)</title><rect x="1.3072%" y="613" width="0.3519%" height="15" fill="rgb(229,88,8)" fg:x="26" fg:w="7"/><text x="1.5572%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.15%)</title><rect x="1.5083%" y="597" width="0.1508%" height="15" fill="rgb(213,181,19)" fg:x="30" fg:w="3"/><text x="1.7583%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.15%)</title><rect x="1.5083%" y="581" width="0.1508%" height="15" fill="rgb(254,191,54)" fg:x="30" fg:w="3"/><text x="1.7583%" y="591.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_sub (1 samples, 0.05%)</title><rect x="1.6591%" y="613" width="0.0503%" height="15" fill="rgb(241,83,37)" fg:x="33" fg:w="1"/><text x="1.9091%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.05%)</title><rect x="1.6591%" y="597" width="0.0503%" height="15" fill="rgb(233,36,39)" fg:x="33" fg:w="1"/><text x="1.9091%" y="607.50"></text></g><g><title>[[stack]] (10 samples, 0.50%)</title><rect x="1.2569%" y="629" width="0.5028%" height="15" fill="rgb(226,3,54)" fg:x="25" fg:w="10"/><text x="1.5069%" y="639.50"></text></g><g><title>revm::instructions::bitwise::iszero (1 samples, 0.05%)</title><rect x="1.7094%" y="613" width="0.0503%" height="15" fill="rgb(245,192,40)" fg:x="34" fg:w="1"/><text x="1.9594%" y="623.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (1 samples, 0.05%)</title><rect x="1.7597%" y="613" width="0.0503%" height="15" fill="rgb(238,167,29)" fg:x="35" fg:w="1"/><text x="2.0097%" y="623.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.05%)</title><rect x="1.8100%" y="613" width="0.0503%" height="15" fill="rgb(232,182,51)" fg:x="36" fg:w="1"/><text x="2.0600%" y="623.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::Add&lt;T&gt;&gt;::add (1 samples, 0.05%)</title><rect x="1.8602%" y="613" width="0.0503%" height="15" fill="rgb(231,60,39)" fg:x="37" fg:w="1"/><text x="2.1102%" y="623.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (6 samples, 0.30%)</title><rect x="1.9105%" y="613" width="0.3017%" height="15" fill="rgb(208,69,12)" fg:x="38" fg:w="6"/><text x="2.1605%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="2.2122%" y="613" width="0.1006%" height="15" fill="rgb(235,93,37)" fg:x="44" fg:w="2"/><text x="2.4622%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="2.2122%" y="597" width="0.1006%" height="15" fill="rgb(213,116,39)" fg:x="44" fg:w="2"/><text x="2.4622%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="2.2122%" y="581" width="0.1006%" height="15" fill="rgb(222,207,29)" fg:x="44" fg:w="2"/><text x="2.4622%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="2.2122%" y="565" width="0.1006%" height="15" fill="rgb(206,96,30)" fg:x="44" fg:w="2"/><text x="2.4622%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="2.2122%" y="549" width="0.1006%" height="15" fill="rgb(218,138,4)" fg:x="44" fg:w="2"/><text x="2.4622%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="2.2122%" y="533" width="0.1006%" height="15" fill="rgb(250,191,14)" fg:x="44" fg:w="2"/><text x="2.4622%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="2.2122%" y="517" width="0.1006%" height="15" fill="rgb(239,60,40)" fg:x="44" fg:w="2"/><text x="2.4622%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="2.2122%" y="501" width="0.1006%" height="15" fill="rgb(206,27,48)" fg:x="44" fg:w="2"/><text x="2.4622%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="2.2122%" y="485" width="0.1006%" height="15" fill="rgb(225,35,8)" fg:x="44" fg:w="2"/><text x="2.4622%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="2.2122%" y="469" width="0.1006%" height="15" fill="rgb(250,213,24)" fg:x="44" fg:w="2"/><text x="2.4622%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="2.2122%" y="453" width="0.1006%" height="15" fill="rgb(247,123,22)" fg:x="44" fg:w="2"/><text x="2.4622%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="2.2624%" y="437" width="0.0503%" height="15" fill="rgb(231,138,38)" fg:x="45" fg:w="1"/><text x="2.5124%" y="447.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="2.3127%" y="613" width="0.0503%" height="15" fill="rgb(231,145,46)" fg:x="46" fg:w="1"/><text x="2.5627%" y="623.50"></text></g><g><title>intx::udivrem&lt;256u, 256u&gt; (3 samples, 0.15%)</title><rect x="2.3630%" y="613" width="0.1508%" height="15" fill="rgb(251,118,11)" fg:x="47" fg:w="3"/><text x="2.6130%" y="623.50"></text></g><g><title>primitive_types::U256::from_big_endian (3 samples, 0.15%)</title><rect x="2.5138%" y="613" width="0.1508%" height="15" fill="rgb(217,147,25)" fg:x="50" fg:w="3"/><text x="2.7638%" y="623.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (154 samples, 7.74%)</title><rect x="2.6647%" y="613" width="7.7426%" height="15" fill="rgb(247,81,37)" fg:x="53" fg:w="154"/><text x="2.9147%" y="623.50">revm::evm_i..</text></g><g><title>revm::interpreter::Interpreter::run (154 samples, 7.74%)</title><rect x="2.6647%" y="597" width="7.7426%" height="15" fill="rgb(209,12,38)" fg:x="53" fg:w="154"/><text x="2.9147%" y="607.50">revm::inter..</text></g><g><title>revm::instructions::arithmetic::gt (1 samples, 0.05%)</title><rect x="10.4072%" y="613" width="0.0503%" height="15" fill="rgb(227,1,9)" fg:x="207" fg:w="1"/><text x="10.6572%" y="623.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_mul (3 samples, 0.15%)</title><rect x="10.4575%" y="613" width="0.1508%" height="15" fill="rgb(248,47,43)" fg:x="208" fg:w="3"/><text x="10.7075%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (2 samples, 0.10%)</title><rect x="10.5078%" y="597" width="0.1006%" height="15" fill="rgb(221,10,30)" fg:x="209" fg:w="2"/><text x="10.7578%" y="607.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (7 samples, 0.35%)</title><rect x="10.6083%" y="613" width="0.3519%" height="15" fill="rgb(210,229,1)" fg:x="211" fg:w="7"/><text x="10.8583%" y="623.50"></text></g><g><title>revm::instructions::bitwise::iszero (2 samples, 0.10%)</title><rect x="10.9603%" y="613" width="0.1006%" height="15" fill="rgb(222,148,37)" fg:x="218" fg:w="2"/><text x="11.2103%" y="623.50"></text></g><g><title>revm::instructions::bitwise::sgt (1 samples, 0.05%)</title><rect x="11.0608%" y="613" width="0.0503%" height="15" fill="rgb(234,67,33)" fg:x="220" fg:w="1"/><text x="11.3108%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.05%)</title><rect x="11.0608%" y="597" width="0.0503%" height="15" fill="rgb(247,98,35)" fg:x="220" fg:w="1"/><text x="11.3108%" y="607.50"></text></g><g><title>revm::instructions::bitwise::slt (4 samples, 0.20%)</title><rect x="11.1111%" y="613" width="0.2011%" height="15" fill="rgb(247,138,52)" fg:x="221" fg:w="4"/><text x="11.3611%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (2 samples, 0.10%)</title><rect x="11.2117%" y="597" width="0.1006%" height="15" fill="rgb(213,79,30)" fg:x="223" fg:w="2"/><text x="11.4617%" y="607.50"></text></g><g><title>revm::instructions::control::jump (3 samples, 0.15%)</title><rect x="11.3122%" y="613" width="0.1508%" height="15" fill="rgb(246,177,23)" fg:x="225" fg:w="3"/><text x="11.5622%" y="623.50"></text></g><g><title>revm::instructions::control::jumpdest (6 samples, 0.30%)</title><rect x="11.4630%" y="613" width="0.3017%" height="15" fill="rgb(230,62,27)" fg:x="228" fg:w="6"/><text x="11.7130%" y="623.50"></text></g><g><title>revm::instructions::control::jumpi (6 samples, 0.30%)</title><rect x="11.7647%" y="613" width="0.3017%" height="15" fill="rgb(216,154,8)" fg:x="234" fg:w="6"/><text x="12.0147%" y="623.50"></text></g><g><title>revm::instructions::host::sload (1 samples, 0.05%)</title><rect x="12.0664%" y="613" width="0.0503%" height="15" fill="rgb(244,35,45)" fg:x="240" fg:w="1"/><text x="12.3164%" y="623.50"></text></g><g><title>revm::instructions::host::sstore (1 samples, 0.05%)</title><rect x="12.1166%" y="613" width="0.0503%" height="15" fill="rgb(251,115,12)" fg:x="241" fg:w="1"/><text x="12.3666%" y="623.50"></text></g><g><title>revm::instructions::memory::mload (23 samples, 1.16%)</title><rect x="12.1669%" y="613" width="1.1564%" height="15" fill="rgb(240,54,50)" fg:x="242" fg:w="23"/><text x="12.4169%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (17 samples, 0.85%)</title><rect x="12.4686%" y="597" width="0.8547%" height="15" fill="rgb(233,84,52)" fg:x="248" fg:w="17"/><text x="12.7186%" y="607.50"></text></g><g><title>revm::instructions::memory::mstore (25 samples, 1.26%)</title><rect x="13.3233%" y="613" width="1.2569%" height="15" fill="rgb(207,117,47)" fg:x="265" fg:w="25"/><text x="13.5733%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (15 samples, 0.75%)</title><rect x="13.8260%" y="597" width="0.7541%" height="15" fill="rgb(249,43,39)" fg:x="275" fg:w="15"/><text x="14.0760%" y="607.50"></text></g><g><title>revm::instructions::stack::dup (8 samples, 0.40%)</title><rect x="14.5802%" y="613" width="0.4022%" height="15" fill="rgb(209,38,44)" fg:x="290" fg:w="8"/><text x="14.8302%" y="623.50"></text></g><g><title>revm::instructions::stack::pop (2 samples, 0.10%)</title><rect x="14.9824%" y="613" width="0.1006%" height="15" fill="rgb(236,212,23)" fg:x="298" fg:w="2"/><text x="15.2324%" y="623.50"></text></g><g><title>revm::instructions::stack::push (3 samples, 0.15%)</title><rect x="15.0830%" y="613" width="0.1508%" height="15" fill="rgb(242,79,21)" fg:x="300" fg:w="3"/><text x="15.3330%" y="623.50"></text></g><g><title>revm::instructions::stack::swap (23 samples, 1.16%)</title><rect x="15.2338%" y="613" width="1.1564%" height="15" fill="rgb(211,96,35)" fg:x="303" fg:w="23"/><text x="15.4838%" y="623.50"></text></g><g><title>revm::instructions::system::sha3 (1 samples, 0.05%)</title><rect x="16.3901%" y="613" width="0.0503%" height="15" fill="rgb(253,215,40)" fg:x="326" fg:w="1"/><text x="16.6401%" y="623.50"></text></g><g><title>[unknown] (293 samples, 14.73%)</title><rect x="1.7597%" y="629" width="14.7310%" height="15" fill="rgb(211,81,21)" fg:x="35" fg:w="293"/><text x="2.0097%" y="639.50">[unknown]</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::update (1 samples, 0.05%)</title><rect x="16.4404%" y="613" width="0.0503%" height="15" fill="rgb(208,190,38)" fg:x="327" fg:w="1"/><text x="16.6904%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (50 samples, 2.51%)</title><rect x="23.4289%" y="293" width="2.5138%" height="15" fill="rgb(235,213,38)" fg:x="466" fg:w="50"/><text x="23.6789%" y="303.50">co..</text></g><g><title>revm::instructions::arithmetic::gt (2 samples, 0.10%)</title><rect x="25.9427%" y="293" width="0.1006%" height="15" fill="rgb(237,122,38)" fg:x="516" fg:w="2"/><text x="26.1927%" y="303.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (1 samples, 0.05%)</title><rect x="25.9930%" y="277" width="0.0503%" height="15" fill="rgb(244,218,35)" fg:x="517" fg:w="1"/><text x="26.2430%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.05%)</title><rect x="25.9930%" y="261" width="0.0503%" height="15" fill="rgb(240,68,47)" fg:x="517" fg:w="1"/><text x="26.2430%" y="271.50"></text></g><g><title>revm::instructions::arithmetic::lt (1 samples, 0.05%)</title><rect x="26.0432%" y="293" width="0.0503%" height="15" fill="rgb(210,16,53)" fg:x="518" fg:w="1"/><text x="26.2932%" y="303.50"></text></g><g><title>primitive_types::U256::overflowing_add (30 samples, 1.51%)</title><rect x="27.5515%" y="277" width="1.5083%" height="15" fill="rgb(235,124,12)" fg:x="548" fg:w="30"/><text x="27.8015%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (6 samples, 0.30%)</title><rect x="28.7582%" y="261" width="0.3017%" height="15" fill="rgb(224,169,11)" fg:x="572" fg:w="6"/><text x="29.0082%" y="271.50"></text></g><g><title>revm::interpreter::stack::Stack::len (11 samples, 0.55%)</title><rect x="29.0598%" y="277" width="0.5530%" height="15" fill="rgb(250,166,2)" fg:x="578" fg:w="11"/><text x="29.3098%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.10%)</title><rect x="30.2162%" y="261" width="0.1006%" height="15" fill="rgb(242,216,29)" fg:x="601" fg:w="2"/><text x="30.4662%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.10%)</title><rect x="30.2162%" y="245" width="0.1006%" height="15" fill="rgb(230,116,27)" fg:x="601" fg:w="2"/><text x="30.4662%" y="255.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_add (85 samples, 4.27%)</title><rect x="26.0935%" y="293" width="4.2735%" height="15" fill="rgb(228,99,48)" fg:x="519" fg:w="85"/><text x="26.3435%" y="303.50">revm:..</text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (15 samples, 0.75%)</title><rect x="29.6129%" y="277" width="0.7541%" height="15" fill="rgb(253,11,6)" fg:x="589" fg:w="15"/><text x="29.8629%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.05%)</title><rect x="30.3167%" y="261" width="0.0503%" height="15" fill="rgb(247,143,39)" fg:x="603" fg:w="1"/><text x="30.5667%" y="271.50"></text></g><g><title>primitive_types::U256::overflowing_mul (19 samples, 0.96%)</title><rect x="30.5681%" y="277" width="0.9553%" height="15" fill="rgb(236,97,10)" fg:x="608" fg:w="19"/><text x="30.8181%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (5 samples, 0.25%)</title><rect x="31.2720%" y="261" width="0.2514%" height="15" fill="rgb(233,208,19)" fg:x="622" fg:w="5"/><text x="31.5220%" y="271.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.05%)</title><rect x="31.5234%" y="277" width="0.0503%" height="15" fill="rgb(216,164,2)" fg:x="627" fg:w="1"/><text x="31.7734%" y="287.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_mul (28 samples, 1.41%)</title><rect x="30.3670%" y="293" width="1.4077%" height="15" fill="rgb(220,129,5)" fg:x="604" fg:w="28"/><text x="30.6170%" y="303.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (4 samples, 0.20%)</title><rect x="31.5737%" y="277" width="0.2011%" height="15" fill="rgb(242,17,10)" fg:x="628" fg:w="4"/><text x="31.8237%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.05%)</title><rect x="31.7245%" y="261" width="0.0503%" height="15" fill="rgb(242,107,0)" fg:x="631" fg:w="1"/><text x="31.9745%" y="271.50"></text></g><g><title>primitive_types::U256::overflowing_sub (2 samples, 0.10%)</title><rect x="31.9759%" y="277" width="0.1006%" height="15" fill="rgb(251,28,31)" fg:x="636" fg:w="2"/><text x="32.2259%" y="287.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_sub (7 samples, 0.35%)</title><rect x="31.7748%" y="293" width="0.3519%" height="15" fill="rgb(233,223,10)" fg:x="632" fg:w="7"/><text x="32.0248%" y="303.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (1 samples, 0.05%)</title><rect x="32.0764%" y="277" width="0.0503%" height="15" fill="rgb(215,21,27)" fg:x="638" fg:w="1"/><text x="32.3264%" y="287.50"></text></g><g><title>_ZNK4intx4uintILj320EEcvNS0_IXT_EEEILj256EvEEv (41 samples, 2.06%)</title><rect x="36.3499%" y="213" width="2.0613%" height="15" fill="rgb(232,23,21)" fg:x="723" fg:w="41"/><text x="36.5999%" y="223.50">_..</text></g><g><title>intx::internal::normalize&lt;256u, 256u&gt; (86 samples, 4.32%)</title><rect x="38.4113%" y="213" width="4.3238%" height="15" fill="rgb(244,5,23)" fg:x="764" fg:w="86"/><text x="38.6613%" y="223.50">intx:..</text></g><g><title>intx::internal::normalized_div_args&lt;256u, 256u&gt;::normalized_div_args (2 samples, 0.10%)</title><rect x="42.6345%" y="197" width="0.1006%" height="15" fill="rgb(226,81,46)" fg:x="848" fg:w="2"/><text x="42.8845%" y="207.50"></text></g><g><title>intx::uint&lt;256u&gt;::uint (2 samples, 0.10%)</title><rect x="42.6345%" y="181" width="0.1006%" height="15" fill="rgb(247,70,30)" fg:x="848" fg:w="2"/><text x="42.8845%" y="191.50"></text></g><g><title>intx::reciprocal_2by1 (55 samples, 2.77%)</title><rect x="43.1875%" y="197" width="2.7652%" height="15" fill="rgb(212,68,19)" fg:x="859" fg:w="55"/><text x="43.4375%" y="207.50">in..</text></g><g><title>intx::umul (13 samples, 0.65%)</title><rect x="45.2991%" y="181" width="0.6536%" height="15" fill="rgb(240,187,13)" fg:x="901" fg:w="13"/><text x="45.5491%" y="191.50"></text></g><g><title>intx::uint&lt;128u&gt;::uint (1 samples, 0.05%)</title><rect x="45.9025%" y="165" width="0.0503%" height="15" fill="rgb(223,113,26)" fg:x="913" fg:w="1"/><text x="46.1525%" y="175.50"></text></g><g><title>intx::fast_add (7 samples, 0.35%)</title><rect x="47.1091%" y="181" width="0.3519%" height="15" fill="rgb(206,192,2)" fg:x="937" fg:w="7"/><text x="47.3591%" y="191.50"></text></g><g><title>intx::uint&lt;128u&gt;::uint (3 samples, 0.15%)</title><rect x="47.3102%" y="165" width="0.1508%" height="15" fill="rgb(241,108,4)" fg:x="941" fg:w="3"/><text x="47.5602%" y="175.50"></text></g><g><title>intx::udivrem_2by1 (32 samples, 1.61%)</title><rect x="45.9527%" y="197" width="1.6088%" height="15" fill="rgb(247,173,49)" fg:x="914" fg:w="32"/><text x="46.2027%" y="207.50"></text></g><g><title>intx::umul (2 samples, 0.10%)</title><rect x="47.4610%" y="181" width="0.1006%" height="15" fill="rgb(224,114,35)" fg:x="944" fg:w="2"/><text x="47.7110%" y="191.50"></text></g><g><title>intx::internal::udivrem_by1 (99 samples, 4.98%)</title><rect x="42.7350%" y="213" width="4.9774%" height="15" fill="rgb(245,159,27)" fg:x="850" fg:w="99"/><text x="42.9850%" y="223.50">intx::..</text></g><g><title>std::tuple&lt;unsigned long&amp;, unsigned long&amp;&gt;::operator= (3 samples, 0.15%)</title><rect x="47.5616%" y="197" width="0.1508%" height="15" fill="rgb(245,172,44)" fg:x="946" fg:w="3"/><text x="47.8116%" y="207.50"></text></g><g><title>std::_Tuple_impl&lt;0ul, unsigned long&amp;, unsigned long&amp;&gt;::_M_assign&lt;unsigned long&amp;, unsigned long&amp;&gt; (3 samples, 0.15%)</title><rect x="47.5616%" y="181" width="0.1508%" height="15" fill="rgb(236,23,11)" fg:x="946" fg:w="3"/><text x="47.8116%" y="191.50"></text></g><g><title>intx::reciprocal_2by1 (2 samples, 0.10%)</title><rect x="48.0141%" y="181" width="0.1006%" height="15" fill="rgb(205,117,38)" fg:x="955" fg:w="2"/><text x="48.2641%" y="191.50"></text></g><g><title>intx::reciprocal_3by2 (7 samples, 0.35%)</title><rect x="47.8130%" y="197" width="0.3519%" height="15" fill="rgb(237,72,25)" fg:x="951" fg:w="7"/><text x="48.0630%" y="207.50"></text></g><g><title>intx::umul (1 samples, 0.05%)</title><rect x="48.1146%" y="181" width="0.0503%" height="15" fill="rgb(244,70,9)" fg:x="957" fg:w="1"/><text x="48.3646%" y="191.50"></text></g><g><title>intx::operator+= (1 samples, 0.05%)</title><rect x="48.2152%" y="181" width="0.0503%" height="15" fill="rgb(217,125,39)" fg:x="959" fg:w="1"/><text x="48.4652%" y="191.50"></text></g><g><title>intx::operator+ (1 samples, 0.05%)</title><rect x="48.2152%" y="165" width="0.0503%" height="15" fill="rgb(235,36,10)" fg:x="959" fg:w="1"/><text x="48.4652%" y="175.50"></text></g><g><title>intx::add_with_carry&lt;128u&gt; (1 samples, 0.05%)</title><rect x="48.2152%" y="149" width="0.0503%" height="15" fill="rgb(251,123,47)" fg:x="959" fg:w="1"/><text x="48.4652%" y="159.50"></text></g><g><title>intx::internal::udivrem_by2 (13 samples, 0.65%)</title><rect x="47.7124%" y="213" width="0.6536%" height="15" fill="rgb(221,13,13)" fg:x="949" fg:w="13"/><text x="47.9624%" y="223.50"></text></g><g><title>intx::udivrem_3by2 (4 samples, 0.20%)</title><rect x="48.1649%" y="197" width="0.2011%" height="15" fill="rgb(238,131,9)" fg:x="958" fg:w="4"/><text x="48.4149%" y="207.50"></text></g><g><title>intx::umul (2 samples, 0.10%)</title><rect x="48.2655%" y="181" width="0.1006%" height="15" fill="rgb(211,50,8)" fg:x="960" fg:w="2"/><text x="48.5155%" y="191.50"></text></g><g><title>intx::uint&lt;128u&gt;::uint (1 samples, 0.05%)</title><rect x="48.3157%" y="165" width="0.0503%" height="15" fill="rgb(245,182,24)" fg:x="961" fg:w="1"/><text x="48.5657%" y="175.50"></text></g><g><title>fast_div_rem (299 samples, 15.03%)</title><rect x="33.4339%" y="261" width="15.0327%" height="15" fill="rgb(242,14,37)" fg:x="665" fg:w="299"/><text x="33.6839%" y="271.50">fast_div_rem</text></g><g><title>intx::operator/&lt;256u&gt; (265 samples, 13.32%)</title><rect x="35.1433%" y="245" width="13.3233%" height="15" fill="rgb(246,228,12)" fg:x="699" fg:w="265"/><text x="35.3933%" y="255.50">intx::operator/&lt;256u&gt;</text></g><g><title>intx::udivrem&lt;256u, 256u&gt; (259 samples, 13.02%)</title><rect x="35.4449%" y="229" width="13.0216%" height="15" fill="rgb(213,55,15)" fg:x="705" fg:w="259"/><text x="35.6949%" y="239.50">intx::udivrem&lt;256u, ..</text></g><g><title>intx::uint&lt;256u&gt;::uint&lt;unsigned long, void&gt; (2 samples, 0.10%)</title><rect x="48.3660%" y="213" width="0.1006%" height="15" fill="rgb(209,9,3)" fg:x="962" fg:w="2"/><text x="48.6160%" y="223.50"></text></g><g><title>primitive_types::U256::is_zero (9 samples, 0.45%)</title><rect x="48.8185%" y="245" width="0.4525%" height="15" fill="rgb(230,59,30)" fg:x="971" fg:w="9"/><text x="49.0685%" y="255.50"></text></g><g><title>revm::instructions::i256::i256_sign (19 samples, 0.96%)</title><rect x="48.4666%" y="261" width="0.9553%" height="15" fill="rgb(209,121,21)" fg:x="964" fg:w="19"/><text x="48.7166%" y="271.50"></text></g><g><title>revm::instructions::i256::two_compl_mut (3 samples, 0.15%)</title><rect x="49.2710%" y="245" width="0.1508%" height="15" fill="rgb(220,109,13)" fg:x="980" fg:w="3"/><text x="49.5210%" y="255.50"></text></g><g><title>revm::instructions::i256::i256_div (342 samples, 17.19%)</title><rect x="32.2775%" y="277" width="17.1946%" height="15" fill="rgb(232,18,1)" fg:x="642" fg:w="342"/><text x="32.5275%" y="287.50">revm::instructions::i256::i..</text></g><g><title>revm::instructions::i256::two_compl (1 samples, 0.05%)</title><rect x="49.4218%" y="261" width="0.0503%" height="15" fill="rgb(215,41,42)" fg:x="983" fg:w="1"/><text x="49.6718%" y="271.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::Add&lt;T&gt;&gt;::add (1 samples, 0.05%)</title><rect x="49.4218%" y="245" width="0.0503%" height="15" fill="rgb(224,123,36)" fg:x="983" fg:w="1"/><text x="49.6718%" y="255.50"></text></g><g><title>primitive_types::U256::overflowing_add (1 samples, 0.05%)</title><rect x="49.4218%" y="229" width="0.0503%" height="15" fill="rgb(240,125,3)" fg:x="983" fg:w="1"/><text x="49.6718%" y="239.50"></text></g><g><title>revm::interpreter::stack::Stack::len (4 samples, 0.20%)</title><rect x="49.4721%" y="277" width="0.2011%" height="15" fill="rgb(205,98,50)" fg:x="984" fg:w="4"/><text x="49.7221%" y="287.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (351 samples, 17.65%)</title><rect x="32.1267%" y="293" width="17.6471%" height="15" fill="rgb(205,185,37)" fg:x="639" fg:w="351"/><text x="32.3767%" y="303.50">revm::instructions::arithme..</text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (2 samples, 0.10%)</title><rect x="49.6732%" y="277" width="0.1006%" height="15" fill="rgb(238,207,15)" fg:x="988" fg:w="2"/><text x="49.9232%" y="287.50"></text></g><g><title>revm::instructions::bitwise::iszero (11 samples, 0.55%)</title><rect x="49.7738%" y="293" width="0.5530%" height="15" fill="rgb(213,199,42)" fg:x="990" fg:w="11"/><text x="50.0238%" y="303.50"></text></g><g><title>primitive_types::U256::is_zero (6 samples, 0.30%)</title><rect x="50.0251%" y="277" width="0.3017%" height="15" fill="rgb(235,201,11)" fg:x="995" fg:w="6"/><text x="50.2751%" y="287.50"></text></g><g><title>revm::instructions::bitwise::not (1 samples, 0.05%)</title><rect x="50.3268%" y="293" width="0.0503%" height="15" fill="rgb(207,46,11)" fg:x="1001" fg:w="1"/><text x="50.5768%" y="303.50"></text></g><g><title>revm::instructions::bitwise::sgt (4 samples, 0.20%)</title><rect x="50.3771%" y="293" width="0.2011%" height="15" fill="rgb(241,35,35)" fg:x="1002" fg:w="4"/><text x="50.6271%" y="303.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (2 samples, 0.10%)</title><rect x="50.4776%" y="277" width="0.1006%" height="15" fill="rgb(243,32,47)" fg:x="1004" fg:w="2"/><text x="50.7276%" y="287.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (9 samples, 0.45%)</title><rect x="50.8798%" y="261" width="0.4525%" height="15" fill="rgb(247,202,23)" fg:x="1012" fg:w="9"/><text x="51.1298%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (9 samples, 0.45%)</title><rect x="50.8798%" y="245" width="0.4525%" height="15" fill="rgb(219,102,11)" fg:x="1012" fg:w="9"/><text x="51.1298%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (9 samples, 0.45%)</title><rect x="50.8798%" y="229" width="0.4525%" height="15" fill="rgb(243,110,44)" fg:x="1012" fg:w="9"/><text x="51.1298%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::{{closure}} (9 samples, 0.45%)</title><rect x="50.8798%" y="213" width="0.4525%" height="15" fill="rgb(222,74,54)" fg:x="1012" fg:w="9"/><text x="51.1298%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (9 samples, 0.45%)</title><rect x="50.8798%" y="197" width="0.4525%" height="15" fill="rgb(216,99,12)" fg:x="1012" fg:w="9"/><text x="51.1298%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (9 samples, 0.45%)</title><rect x="50.8798%" y="181" width="0.4525%" height="15" fill="rgb(226,22,26)" fg:x="1012" fg:w="9"/><text x="51.1298%" y="191.50"></text></g><g><title>revm::instructions::i256::i256_cmp (17 samples, 0.85%)</title><rect x="50.8798%" y="277" width="0.8547%" height="15" fill="rgb(217,163,10)" fg:x="1012" fg:w="17"/><text x="51.1298%" y="287.50"></text></g><g><title>revm::instructions::i256::i256_sign (8 samples, 0.40%)</title><rect x="51.3323%" y="261" width="0.4022%" height="15" fill="rgb(213,25,53)" fg:x="1021" fg:w="8"/><text x="51.5823%" y="271.50"></text></g><g><title>primitive_types::U256::is_zero (4 samples, 0.20%)</title><rect x="51.5334%" y="245" width="0.2011%" height="15" fill="rgb(252,105,26)" fg:x="1025" fg:w="4"/><text x="51.7834%" y="255.50"></text></g><g><title>revm::instructions::bitwise::slt (25 samples, 1.26%)</title><rect x="50.5782%" y="293" width="1.2569%" height="15" fill="rgb(220,39,43)" fg:x="1006" fg:w="25"/><text x="50.8282%" y="303.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (2 samples, 0.10%)</title><rect x="51.7345%" y="277" width="0.1006%" height="15" fill="rgb(229,68,48)" fg:x="1029" fg:w="2"/><text x="51.9845%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.05%)</title><rect x="51.7848%" y="261" width="0.0503%" height="15" fill="rgb(252,8,32)" fg:x="1030" fg:w="1"/><text x="52.0348%" y="271.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (8 samples, 0.40%)</title><rect x="52.6898%" y="277" width="0.4022%" height="15" fill="rgb(223,20,43)" fg:x="1048" fg:w="8"/><text x="52.9398%" y="287.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (8 samples, 0.40%)</title><rect x="52.6898%" y="261" width="0.4022%" height="15" fill="rgb(229,81,49)" fg:x="1048" fg:w="8"/><text x="52.9398%" y="271.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (6 samples, 0.30%)</title><rect x="52.7903%" y="245" width="0.3017%" height="15" fill="rgb(236,28,36)" fg:x="1050" fg:w="6"/><text x="53.0403%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::len (3 samples, 0.15%)</title><rect x="53.0920%" y="277" width="0.1508%" height="15" fill="rgb(249,185,26)" fg:x="1056" fg:w="3"/><text x="53.3420%" y="287.50"></text></g><g><title>revm::instructions::control::jump (32 samples, 1.61%)</title><rect x="51.8351%" y="293" width="1.6088%" height="15" fill="rgb(249,174,33)" fg:x="1031" fg:w="32"/><text x="52.0851%" y="303.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (4 samples, 0.20%)</title><rect x="53.2428%" y="277" width="0.2011%" height="15" fill="rgb(233,201,37)" fg:x="1059" fg:w="4"/><text x="53.4928%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (3 samples, 0.15%)</title><rect x="53.2931%" y="261" width="0.1508%" height="15" fill="rgb(221,78,26)" fg:x="1060" fg:w="3"/><text x="53.5431%" y="271.50"></text></g><g><title>revm::gas::Gas::record_cost (15 samples, 0.75%)</title><rect x="53.5948%" y="261" width="0.7541%" height="15" fill="rgb(250,127,30)" fg:x="1066" fg:w="15"/><text x="53.8448%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.10%)</title><rect x="54.6003%" y="229" width="0.1006%" height="15" fill="rgb(230,49,44)" fg:x="1086" fg:w="2"/><text x="54.8503%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.10%)</title><rect x="54.6003%" y="213" width="0.1006%" height="15" fill="rgb(229,67,23)" fg:x="1086" fg:w="2"/><text x="54.8503%" y="223.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.10%)</title><rect x="54.6003%" y="197" width="0.1006%" height="15" fill="rgb(249,83,47)" fg:x="1086" fg:w="2"/><text x="54.8503%" y="207.50"></text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (31 samples, 1.56%)</title><rect x="53.5948%" y="277" width="1.5586%" height="15" fill="rgb(215,43,3)" fg:x="1066" fg:w="31"/><text x="53.8448%" y="287.50"></text></g><g><title>revm::interpreter::contract::Contract::gas_block (16 samples, 0.80%)</title><rect x="54.3489%" y="261" width="0.8044%" height="15" fill="rgb(238,154,13)" fg:x="1081" fg:w="16"/><text x="54.5989%" y="271.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::gas_block (16 samples, 0.80%)</title><rect x="54.3489%" y="245" width="0.8044%" height="15" fill="rgb(219,56,2)" fg:x="1081" fg:w="16"/><text x="54.5989%" y="255.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::gas_block (9 samples, 0.45%)</title><rect x="54.7009%" y="229" width="0.4525%" height="15" fill="rgb(233,0,4)" fg:x="1088" fg:w="9"/><text x="54.9509%" y="239.50"></text></g><g><title>revm::instructions::control::jumpdest (35 samples, 1.76%)</title><rect x="53.4439%" y="293" width="1.7597%" height="15" fill="rgb(235,30,7)" fg:x="1063" fg:w="35"/><text x="53.6939%" y="303.50"></text></g><g><title>revm::interpreter::Interpreter::program_counter (1 samples, 0.05%)</title><rect x="55.1533%" y="277" width="0.0503%" height="15" fill="rgb(250,79,13)" fg:x="1097" fg:w="1"/><text x="55.4033%" y="287.50"></text></g><g><title>revm::interpreter::bytecode::BytecodeLocked::as_ptr (1 samples, 0.05%)</title><rect x="55.1533%" y="261" width="0.0503%" height="15" fill="rgb(211,146,34)" fg:x="1097" fg:w="1"/><text x="55.4033%" y="271.50"></text></g><g><title>primitive_types::U256::is_zero (2 samples, 0.10%)</title><rect x="56.1086%" y="277" width="0.1006%" height="15" fill="rgb(228,22,38)" fg:x="1116" fg:w="2"/><text x="56.3586%" y="287.50"></text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (2 samples, 0.10%)</title><rect x="56.2092%" y="277" width="0.1006%" height="15" fill="rgb(235,168,5)" fg:x="1118" fg:w="2"/><text x="56.4592%" y="287.50"></text></g><g><title>revm::gas::Gas::record_cost (2 samples, 0.10%)</title><rect x="56.2092%" y="261" width="0.1006%" height="15" fill="rgb(221,155,16)" fg:x="1118" fg:w="2"/><text x="56.4592%" y="271.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (5 samples, 0.25%)</title><rect x="56.3097%" y="277" width="0.2514%" height="15" fill="rgb(215,215,53)" fg:x="1120" fg:w="5"/><text x="56.5597%" y="287.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (5 samples, 0.25%)</title><rect x="56.3097%" y="261" width="0.2514%" height="15" fill="rgb(223,4,10)" fg:x="1120" fg:w="5"/><text x="56.5597%" y="271.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (4 samples, 0.20%)</title><rect x="56.3600%" y="245" width="0.2011%" height="15" fill="rgb(234,103,6)" fg:x="1121" fg:w="4"/><text x="56.6100%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::len (3 samples, 0.15%)</title><rect x="56.5611%" y="277" width="0.1508%" height="15" fill="rgb(227,97,0)" fg:x="1125" fg:w="3"/><text x="56.8111%" y="287.50"></text></g><g><title>revm::instructions::control::jumpi (35 samples, 1.76%)</title><rect x="55.2036%" y="293" width="1.7597%" height="15" fill="rgb(234,150,53)" fg:x="1098" fg:w="35"/><text x="55.4536%" y="303.50"></text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (5 samples, 0.25%)</title><rect x="56.7119%" y="277" width="0.2514%" height="15" fill="rgb(228,201,54)" fg:x="1128" fg:w="5"/><text x="56.9619%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.15%)</title><rect x="56.8125%" y="261" width="0.1508%" height="15" fill="rgb(222,22,37)" fg:x="1130" fg:w="3"/><text x="57.0625%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.15%)</title><rect x="56.8125%" y="245" width="0.1508%" height="15" fill="rgb(237,53,32)" fg:x="1130" fg:w="3"/><text x="57.0625%" y="255.50"></text></g><g><title>&lt;primitive_types::U256 as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="58.1699%" y="261" width="0.0503%" height="15" fill="rgb(233,25,53)" fg:x="1157" fg:w="1"/><text x="58.4199%" y="271.50"></text></g><g><title>ahash::operations::folded_multiply (6 samples, 0.30%)</title><rect x="58.2202%" y="213" width="0.3017%" height="15" fill="rgb(210,40,34)" fg:x="1158" fg:w="6"/><text x="58.4702%" y="223.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (5 samples, 0.25%)</title><rect x="58.2705%" y="197" width="0.2514%" height="15" fill="rgb(241,220,44)" fg:x="1159" fg:w="5"/><text x="58.5205%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (7 samples, 0.35%)</title><rect x="58.2202%" y="229" width="0.3519%" height="15" fill="rgb(235,28,35)" fg:x="1158" fg:w="7"/><text x="58.4702%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="58.5219%" y="213" width="0.0503%" height="15" fill="rgb(210,56,17)" fg:x="1164" fg:w="1"/><text x="58.7719%" y="223.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.10%)</title><rect x="58.5721%" y="229" width="0.1006%" height="15" fill="rgb(224,130,29)" fg:x="1165" fg:w="2"/><text x="58.8221%" y="239.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (2 samples, 0.10%)</title><rect x="58.5721%" y="213" width="0.1006%" height="15" fill="rgb(235,212,8)" fg:x="1165" fg:w="2"/><text x="58.8221%" y="223.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (1 samples, 0.05%)</title><rect x="58.6727%" y="181" width="0.0503%" height="15" fill="rgb(223,33,50)" fg:x="1167" fg:w="1"/><text x="58.9227%" y="191.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (1 samples, 0.05%)</title><rect x="58.6727%" y="165" width="0.0503%" height="15" fill="rgb(219,149,13)" fg:x="1167" fg:w="1"/><text x="58.9227%" y="175.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (1 samples, 0.05%)</title><rect x="58.6727%" y="149" width="0.0503%" height="15" fill="rgb(250,156,29)" fg:x="1167" fg:w="1"/><text x="58.9227%" y="159.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (1 samples, 0.05%)</title><rect x="58.6727%" y="133" width="0.0503%" height="15" fill="rgb(216,193,19)" fg:x="1167" fg:w="1"/><text x="58.9227%" y="143.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.05%)</title><rect x="58.6727%" y="117" width="0.0503%" height="15" fill="rgb(216,135,14)" fg:x="1167" fg:w="1"/><text x="58.9227%" y="127.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.05%)</title><rect x="58.6727%" y="101" width="0.0503%" height="15" fill="rgb(241,47,5)" fg:x="1167" fg:w="1"/><text x="58.9227%" y="111.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (9 samples, 0.45%)</title><rect x="58.7230%" y="149" width="0.4525%" height="15" fill="rgb(233,42,35)" fg:x="1168" fg:w="9"/><text x="58.9730%" y="159.50"></text></g><g><title>ahash::operations::folded_multiply (8 samples, 0.40%)</title><rect x="58.7733%" y="133" width="0.4022%" height="15" fill="rgb(231,13,6)" fg:x="1169" fg:w="8"/><text x="59.0233%" y="143.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (6 samples, 0.30%)</title><rect x="58.8738%" y="117" width="0.3017%" height="15" fill="rgb(207,181,40)" fg:x="1171" fg:w="6"/><text x="59.1238%" y="127.50"></text></g><g><title>hashbrown::map::make_insert_hash (24 samples, 1.21%)</title><rect x="58.2202%" y="245" width="1.2066%" height="15" fill="rgb(254,173,49)" fg:x="1158" fg:w="24"/><text x="58.4702%" y="255.50"></text></g><g><title>&lt;primitive_types::U256 as core::hash::Hash&gt;::hash (15 samples, 0.75%)</title><rect x="58.6727%" y="229" width="0.7541%" height="15" fill="rgb(221,1,38)" fg:x="1167" fg:w="15"/><text x="58.9227%" y="239.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (15 samples, 0.75%)</title><rect x="58.6727%" y="213" width="0.7541%" height="15" fill="rgb(206,124,46)" fg:x="1167" fg:w="15"/><text x="58.9227%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (15 samples, 0.75%)</title><rect x="58.6727%" y="197" width="0.7541%" height="15" fill="rgb(249,21,11)" fg:x="1167" fg:w="15"/><text x="58.9227%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (14 samples, 0.70%)</title><rect x="58.7230%" y="181" width="0.7039%" height="15" fill="rgb(222,201,40)" fg:x="1168" fg:w="14"/><text x="58.9730%" y="191.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (14 samples, 0.70%)</title><rect x="58.7230%" y="165" width="0.7039%" height="15" fill="rgb(235,61,29)" fg:x="1168" fg:w="14"/><text x="58.9730%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (5 samples, 0.25%)</title><rect x="59.1755%" y="149" width="0.2514%" height="15" fill="rgb(219,207,3)" fg:x="1177" fg:w="5"/><text x="59.4255%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.05%)</title><rect x="59.4268%" y="229" width="0.0503%" height="15" fill="rgb(222,56,46)" fg:x="1182" fg:w="1"/><text x="59.6768%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.05%)</title><rect x="59.4268%" y="213" width="0.0503%" height="15" fill="rgb(239,76,54)" fg:x="1182" fg:w="1"/><text x="59.6768%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.05%)</title><rect x="59.4268%" y="197" width="0.0503%" height="15" fill="rgb(231,124,27)" fg:x="1182" fg:w="1"/><text x="59.6768%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.15%)</title><rect x="59.5777%" y="213" width="0.1508%" height="15" fill="rgb(249,195,6)" fg:x="1185" fg:w="3"/><text x="59.8277%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.15%)</title><rect x="59.5777%" y="197" width="0.1508%" height="15" fill="rgb(237,174,47)" fg:x="1185" fg:w="3"/><text x="59.8277%" y="207.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (31 samples, 1.56%)</title><rect x="59.7285%" y="197" width="1.5586%" height="15" fill="rgb(206,201,31)" fg:x="1188" fg:w="31"/><text x="59.9785%" y="207.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::PartialEq&gt;::eq (31 samples, 1.56%)</title><rect x="59.7285%" y="181" width="1.5586%" height="15" fill="rgb(231,57,52)" fg:x="1188" fg:w="31"/><text x="59.9785%" y="191.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (31 samples, 1.56%)</title><rect x="59.7285%" y="165" width="1.5586%" height="15" fill="rgb(248,177,22)" fg:x="1188" fg:w="31"/><text x="59.9785%" y="175.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (31 samples, 1.56%)</title><rect x="59.7285%" y="149" width="1.5586%" height="15" fill="rgb(215,211,37)" fg:x="1188" fg:w="31"/><text x="59.9785%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (33 samples, 1.66%)</title><rect x="59.7285%" y="213" width="1.6591%" height="15" fill="rgb(241,128,51)" fg:x="1188" fg:w="33"/><text x="59.9785%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.10%)</title><rect x="61.2871%" y="197" width="0.1006%" height="15" fill="rgb(227,165,31)" fg:x="1219" fg:w="2"/><text x="61.5371%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.10%)</title><rect x="61.2871%" y="181" width="0.1006%" height="15" fill="rgb(228,167,24)" fg:x="1219" fg:w="2"/><text x="61.5371%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.10%)</title><rect x="61.2871%" y="165" width="0.1006%" height="15" fill="rgb(228,143,12)" fg:x="1219" fg:w="2"/><text x="61.5371%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.10%)</title><rect x="61.2871%" y="149" width="0.1006%" height="15" fill="rgb(249,149,8)" fg:x="1219" fg:w="2"/><text x="61.5371%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (4 samples, 0.20%)</title><rect x="61.3876%" y="213" width="0.2011%" height="15" fill="rgb(243,35,44)" fg:x="1221" fg:w="4"/><text x="61.6376%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.20%)</title><rect x="61.5887%" y="213" width="0.2011%" height="15" fill="rgb(246,89,9)" fg:x="1225" fg:w="4"/><text x="61.8387%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.20%)</title><rect x="61.5887%" y="197" width="0.2011%" height="15" fill="rgb(233,213,13)" fg:x="1225" fg:w="4"/><text x="61.8387%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.20%)</title><rect x="61.5887%" y="181" width="0.2011%" height="15" fill="rgb(233,141,41)" fg:x="1225" fg:w="4"/><text x="61.8387%" y="191.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (77 samples, 3.87%)</title><rect x="58.0191%" y="277" width="3.8713%" height="15" fill="rgb(239,167,4)" fg:x="1154" fg:w="77"/><text x="58.2691%" y="287.50">&lt;rev..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (73 samples, 3.67%)</title><rect x="58.2202%" y="261" width="3.6702%" height="15" fill="rgb(209,217,16)" fg:x="1158" fg:w="73"/><text x="58.4702%" y="271.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (49 samples, 2.46%)</title><rect x="59.4268%" y="245" width="2.4635%" height="15" fill="rgb(219,88,35)" fg:x="1182" fg:w="49"/><text x="59.6768%" y="255.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (48 samples, 2.41%)</title><rect x="59.4771%" y="229" width="2.4133%" height="15" fill="rgb(220,193,23)" fg:x="1183" fg:w="48"/><text x="59.7271%" y="239.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.10%)</title><rect x="61.7898%" y="213" width="0.1006%" height="15" fill="rgb(230,90,52)" fg:x="1229" fg:w="2"/><text x="62.0398%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.10%)</title><rect x="61.7898%" y="197" width="0.1006%" height="15" fill="rgb(252,106,19)" fg:x="1229" fg:w="2"/><text x="62.0398%" y="207.50"></text></g><g><title>revm::gas::Gas::record_cost (1 samples, 0.05%)</title><rect x="61.8904%" y="277" width="0.0503%" height="15" fill="rgb(206,74,20)" fg:x="1231" fg:w="1"/><text x="62.1404%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.05%)</title><rect x="61.8904%" y="261" width="0.0503%" height="15" fill="rgb(230,138,44)" fg:x="1231" fg:w="1"/><text x="62.1404%" y="271.50"></text></g><g><title>revm::gas::calc::sload_cost (1 samples, 0.05%)</title><rect x="61.9407%" y="277" width="0.0503%" height="15" fill="rgb(235,182,43)" fg:x="1232" fg:w="1"/><text x="62.1907%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::len (2 samples, 0.10%)</title><rect x="61.9910%" y="277" width="0.1006%" height="15" fill="rgb(242,16,51)" fg:x="1233" fg:w="2"/><text x="62.2410%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (1 samples, 0.05%)</title><rect x="62.0915%" y="277" width="0.0503%" height="15" fill="rgb(248,9,4)" fg:x="1235" fg:w="1"/><text x="62.3415%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.05%)</title><rect x="62.0915%" y="261" width="0.0503%" height="15" fill="rgb(210,31,22)" fg:x="1235" fg:w="1"/><text x="62.3415%" y="271.50"></text></g><g><title>revm::instructions::host::sload (107 samples, 5.38%)</title><rect x="56.9633%" y="293" width="5.3796%" height="15" fill="rgb(239,54,39)" fg:x="1133" fg:w="107"/><text x="57.2133%" y="303.50">revm::i..</text></g><g><title>revm::interpreter::stack::Stack::push (4 samples, 0.20%)</title><rect x="62.1418%" y="277" width="0.2011%" height="15" fill="rgb(230,99,41)" fg:x="1236" fg:w="4"/><text x="62.3918%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.20%)</title><rect x="62.1418%" y="261" width="0.2011%" height="15" fill="rgb(253,106,12)" fg:x="1236" fg:w="4"/><text x="62.3918%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.05%)</title><rect x="62.2926%" y="245" width="0.0503%" height="15" fill="rgb(213,46,41)" fg:x="1239" fg:w="1"/><text x="62.5426%" y="255.50"></text></g><g><title>revm::instructions::host::sstore (1 samples, 0.05%)</title><rect x="62.3429%" y="293" width="0.0503%" height="15" fill="rgb(215,133,35)" fg:x="1240" fg:w="1"/><text x="62.5929%" y="303.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sstore (1 samples, 0.05%)</title><rect x="62.3429%" y="277" width="0.0503%" height="15" fill="rgb(213,28,5)" fg:x="1240" fg:w="1"/><text x="62.5929%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="62.3429%" y="261" width="0.0503%" height="15" fill="rgb(215,77,49)" fg:x="1240" fg:w="1"/><text x="62.5929%" y="271.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="62.3429%" y="245" width="0.0503%" height="15" fill="rgb(248,100,22)" fg:x="1240" fg:w="1"/><text x="62.5929%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (1 samples, 0.05%)</title><rect x="63.0970%" y="277" width="0.0503%" height="15" fill="rgb(208,67,9)" fg:x="1255" fg:w="1"/><text x="63.3470%" y="287.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (3 samples, 0.15%)</title><rect x="63.4992%" y="245" width="0.1508%" height="15" fill="rgb(219,133,21)" fg:x="1263" fg:w="3"/><text x="63.7492%" y="255.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (3 samples, 0.15%)</title><rect x="63.4992%" y="229" width="0.1508%" height="15" fill="rgb(246,46,29)" fg:x="1263" fg:w="3"/><text x="63.7492%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (3 samples, 0.15%)</title><rect x="63.4992%" y="213" width="0.1508%" height="15" fill="rgb(246,185,52)" fg:x="1263" fg:w="3"/><text x="63.7492%" y="223.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (3 samples, 0.15%)</title><rect x="63.4992%" y="197" width="0.1508%" height="15" fill="rgb(252,136,11)" fg:x="1263" fg:w="3"/><text x="63.7492%" y="207.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u64 (14 samples, 0.70%)</title><rect x="63.4992%" y="261" width="0.7039%" height="15" fill="rgb(219,138,53)" fg:x="1263" fg:w="14"/><text x="63.7492%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (11 samples, 0.55%)</title><rect x="63.6501%" y="245" width="0.5530%" height="15" fill="rgb(211,51,23)" fg:x="1266" fg:w="11"/><text x="63.9001%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (11 samples, 0.55%)</title><rect x="63.6501%" y="229" width="0.5530%" height="15" fill="rgb(247,221,28)" fg:x="1266" fg:w="11"/><text x="63.9001%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (11 samples, 0.55%)</title><rect x="63.6501%" y="213" width="0.5530%" height="15" fill="rgb(251,222,45)" fg:x="1266" fg:w="11"/><text x="63.9001%" y="223.50"></text></g><g><title>primitive_types::U256::from_big_endian (38 samples, 1.91%)</title><rect x="63.1473%" y="277" width="1.9105%" height="15" fill="rgb(217,162,53)" fg:x="1256" fg:w="38"/><text x="63.3973%" y="287.50">p..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (17 samples, 0.85%)</title><rect x="64.2031%" y="261" width="0.8547%" height="15" fill="rgb(229,93,14)" fg:x="1277" fg:w="17"/><text x="64.4531%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.85%)</title><rect x="64.2031%" y="245" width="0.8547%" height="15" fill="rgb(209,67,49)" fg:x="1277" fg:w="17"/><text x="64.4531%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (17 samples, 0.85%)</title><rect x="64.2031%" y="229" width="0.8547%" height="15" fill="rgb(213,87,29)" fg:x="1277" fg:w="17"/><text x="64.4531%" y="239.50"></text></g><g><title>revm::interpreter::memory::Memory::get_slice (7 samples, 0.35%)</title><rect x="65.0578%" y="277" width="0.3519%" height="15" fill="rgb(205,151,52)" fg:x="1294" fg:w="7"/><text x="65.3078%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.35%)</title><rect x="65.0578%" y="261" width="0.3519%" height="15" fill="rgb(253,215,39)" fg:x="1294" fg:w="7"/><text x="65.3078%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.35%)</title><rect x="65.0578%" y="245" width="0.3519%" height="15" fill="rgb(221,220,41)" fg:x="1294" fg:w="7"/><text x="65.3078%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.35%)</title><rect x="65.0578%" y="229" width="0.3519%" height="15" fill="rgb(218,133,21)" fg:x="1294" fg:w="7"/><text x="65.3078%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.10%)</title><rect x="65.3092%" y="213" width="0.1006%" height="15" fill="rgb(221,193,43)" fg:x="1299" fg:w="2"/><text x="65.5592%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.10%)</title><rect x="65.3092%" y="197" width="0.1006%" height="15" fill="rgb(240,128,52)" fg:x="1299" fg:w="2"/><text x="65.5592%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.10%)</title><rect x="65.3092%" y="181" width="0.1006%" height="15" fill="rgb(253,114,12)" fg:x="1299" fg:w="2"/><text x="65.5592%" y="191.50"></text></g><g><title>revm::interpreter::memory::Memory::len (2 samples, 0.10%)</title><rect x="65.4098%" y="277" width="0.1006%" height="15" fill="rgb(215,223,47)" fg:x="1301" fg:w="2"/><text x="65.6598%" y="287.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (2 samples, 0.10%)</title><rect x="65.5103%" y="261" width="0.1006%" height="15" fill="rgb(248,225,23)" fg:x="1303" fg:w="2"/><text x="65.7603%" y="271.50"></text></g><g><title>revm::interpreter::memory::next_multiple_of_32 (5 samples, 0.25%)</title><rect x="65.5103%" y="277" width="0.2514%" height="15" fill="rgb(250,108,0)" fg:x="1303" fg:w="5"/><text x="65.7603%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (3 samples, 0.15%)</title><rect x="65.6109%" y="261" width="0.1508%" height="15" fill="rgb(228,208,7)" fg:x="1305" fg:w="3"/><text x="65.8609%" y="271.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (2 samples, 0.10%)</title><rect x="65.7617%" y="277" width="0.1006%" height="15" fill="rgb(244,45,10)" fg:x="1308" fg:w="2"/><text x="66.0117%" y="287.50"></text></g><g><title>revm::instructions::memory::mload (144 samples, 7.24%)</title><rect x="62.3932%" y="293" width="7.2398%" height="15" fill="rgb(207,125,25)" fg:x="1241" fg:w="144"/><text x="62.6432%" y="303.50">revm::inst..</text></g><g><title>revm::interpreter::stack::Stack::push (75 samples, 3.77%)</title><rect x="65.8622%" y="277" width="3.7707%" height="15" fill="rgb(210,195,18)" fg:x="1310" fg:w="75"/><text x="66.1122%" y="287.50">revm..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (72 samples, 3.62%)</title><rect x="66.0131%" y="261" width="3.6199%" height="15" fill="rgb(249,80,12)" fg:x="1313" fg:w="72"/><text x="66.2631%" y="271.50">allo..</text></g><g><title>core::ptr::write (64 samples, 3.22%)</title><rect x="66.4153%" y="245" width="3.2177%" height="15" fill="rgb(221,65,9)" fg:x="1321" fg:w="64"/><text x="66.6653%" y="255.50">cor..</text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (4 samples, 0.20%)</title><rect x="70.5380%" y="277" width="0.2011%" height="15" fill="rgb(235,49,36)" fg:x="1403" fg:w="4"/><text x="70.7880%" y="287.50"></text></g><g><title>revm::gas::Gas::record_memory (4 samples, 0.20%)</title><rect x="70.7391%" y="277" width="0.2011%" height="15" fill="rgb(225,32,20)" fg:x="1407" fg:w="4"/><text x="70.9891%" y="287.50"></text></g><g><title>revm::gas::calc::memory_gas (2 samples, 0.10%)</title><rect x="70.9402%" y="277" width="0.1006%" height="15" fill="rgb(215,141,46)" fg:x="1411" fg:w="2"/><text x="71.1902%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::saturating_mul (1 samples, 0.05%)</title><rect x="70.9904%" y="261" width="0.0503%" height="15" fill="rgb(250,160,47)" fg:x="1412" fg:w="1"/><text x="71.2404%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_mul (1 samples, 0.05%)</title><rect x="70.9904%" y="245" width="0.0503%" height="15" fill="rgb(216,222,40)" fg:x="1412" fg:w="1"/><text x="71.2404%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (1 samples, 0.05%)</title><rect x="70.9904%" y="229" width="0.0503%" height="15" fill="rgb(234,217,39)" fg:x="1412" fg:w="1"/><text x="71.2404%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.20%)</title><rect x="71.0910%" y="229" width="0.2011%" height="15" fill="rgb(207,178,40)" fg:x="1414" fg:w="4"/><text x="71.3410%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.10%)</title><rect x="71.2921%" y="229" width="0.1006%" height="15" fill="rgb(221,136,13)" fg:x="1418" fg:w="2"/><text x="71.5421%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.10%)</title><rect x="71.2921%" y="213" width="0.1006%" height="15" fill="rgb(249,199,10)" fg:x="1418" fg:w="2"/><text x="71.5421%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 0.10%)</title><rect x="71.2921%" y="197" width="0.1006%" height="15" fill="rgb(249,222,13)" fg:x="1418" fg:w="2"/><text x="71.5421%" y="207.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.05%)</title><rect x="71.3927%" y="229" width="0.0503%" height="15" fill="rgb(244,185,38)" fg:x="1420" fg:w="1"/><text x="71.6427%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.05%)</title><rect x="71.3927%" y="213" width="0.0503%" height="15" fill="rgb(236,202,9)" fg:x="1420" fg:w="1"/><text x="71.6427%" y="223.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (33 samples, 1.66%)</title><rect x="71.0407%" y="277" width="1.6591%" height="15" fill="rgb(250,229,37)" fg:x="1413" fg:w="33"/><text x="71.2907%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (33 samples, 1.66%)</title><rect x="71.0407%" y="261" width="1.6591%" height="15" fill="rgb(206,174,23)" fg:x="1413" fg:w="33"/><text x="71.2907%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (32 samples, 1.61%)</title><rect x="71.0910%" y="245" width="1.6088%" height="15" fill="rgb(211,33,43)" fg:x="1414" fg:w="32"/><text x="71.3410%" y="255.50"></text></g><g><title>core::ptr::write (25 samples, 1.26%)</title><rect x="71.4429%" y="229" width="1.2569%" height="15" fill="rgb(245,58,50)" fg:x="1421" fg:w="25"/><text x="71.6929%" y="239.50"></text></g><g><title>__memset_avx2_unaligned_erms (18 samples, 0.90%)</title><rect x="71.7949%" y="213" width="0.9050%" height="15" fill="rgb(244,68,36)" fg:x="1428" fg:w="18"/><text x="72.0449%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="72.5490%" y="197" width="0.1508%" height="15" fill="rgb(232,229,15)" fg:x="1443" fg:w="3"/><text x="72.7990%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="72.5490%" y="181" width="0.1508%" height="15" fill="rgb(254,30,23)" fg:x="1443" fg:w="3"/><text x="72.7990%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="72.5490%" y="165" width="0.1508%" height="15" fill="rgb(235,160,14)" fg:x="1443" fg:w="3"/><text x="72.7990%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="72.5490%" y="149" width="0.1508%" height="15" fill="rgb(212,155,44)" fg:x="1443" fg:w="3"/><text x="72.7990%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="72.5993%" y="133" width="0.1006%" height="15" fill="rgb(226,2,50)" fg:x="1444" fg:w="2"/><text x="72.8493%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="72.5993%" y="117" width="0.1006%" height="15" fill="rgb(234,177,6)" fg:x="1444" fg:w="2"/><text x="72.8493%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="72.5993%" y="101" width="0.1006%" height="15" fill="rgb(217,24,9)" fg:x="1444" fg:w="2"/><text x="72.8493%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="72.5993%" y="85" width="0.1006%" height="15" fill="rgb(220,13,46)" fg:x="1444" fg:w="2"/><text x="72.8493%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="72.5993%" y="69" width="0.1006%" height="15" fill="rgb(239,221,27)" fg:x="1444" fg:w="2"/><text x="72.8493%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="72.5993%" y="53" width="0.1006%" height="15" fill="rgb(222,198,25)" fg:x="1444" fg:w="2"/><text x="72.8493%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="72.6496%" y="37" width="0.0503%" height="15" fill="rgb(211,99,13)" fg:x="1445" fg:w="1"/><text x="72.8996%" y="47.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.15%)</title><rect x="72.6998%" y="229" width="0.1508%" height="15" fill="rgb(232,111,31)" fg:x="1446" fg:w="3"/><text x="72.9498%" y="239.50"></text></g><g><title>revm::interpreter::memory::Memory::set_u256 (11 samples, 0.55%)</title><rect x="72.6998%" y="277" width="0.5530%" height="15" fill="rgb(245,82,37)" fg:x="1446" fg:w="11"/><text x="72.9498%" y="287.50"></text></g><g><title>primitive_types::U256::to_big_endian (11 samples, 0.55%)</title><rect x="72.6998%" y="261" width="0.5530%" height="15" fill="rgb(227,149,46)" fg:x="1446" fg:w="11"/><text x="72.9498%" y="271.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::write_u64 (11 samples, 0.55%)</title><rect x="72.6998%" y="245" width="0.5530%" height="15" fill="rgb(218,36,50)" fg:x="1446" fg:w="11"/><text x="72.9498%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_be (8 samples, 0.40%)</title><rect x="72.8507%" y="229" width="0.4022%" height="15" fill="rgb(226,80,48)" fg:x="1449" fg:w="8"/><text x="73.1007%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (8 samples, 0.40%)</title><rect x="72.8507%" y="213" width="0.4022%" height="15" fill="rgb(238,224,15)" fg:x="1449" fg:w="8"/><text x="73.1007%" y="223.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (3 samples, 0.15%)</title><rect x="73.2529%" y="261" width="0.1508%" height="15" fill="rgb(241,136,10)" fg:x="1457" fg:w="3"/><text x="73.5029%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.10%)</title><rect x="73.4037%" y="261" width="0.1006%" height="15" fill="rgb(208,32,45)" fg:x="1460" fg:w="2"/><text x="73.6537%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.10%)</title><rect x="73.4037%" y="245" width="0.1006%" height="15" fill="rgb(207,135,9)" fg:x="1460" fg:w="2"/><text x="73.6537%" y="255.50"></text></g><g><title>revm::interpreter::memory::next_multiple_of_32 (6 samples, 0.30%)</title><rect x="73.2529%" y="277" width="0.3017%" height="15" fill="rgb(206,86,44)" fg:x="1457" fg:w="6"/><text x="73.5029%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (1 samples, 0.05%)</title><rect x="73.5043%" y="261" width="0.0503%" height="15" fill="rgb(245,177,15)" fg:x="1462" fg:w="1"/><text x="73.7543%" y="271.50"></text></g><g><title>revm::instructions::memory::mstore (80 samples, 4.02%)</title><rect x="69.6330%" y="293" width="4.0221%" height="15" fill="rgb(206,64,50)" fg:x="1385" fg:w="80"/><text x="69.8830%" y="303.50">revm..</text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (2 samples, 0.10%)</title><rect x="73.5546%" y="277" width="0.1006%" height="15" fill="rgb(234,36,40)" fg:x="1463" fg:w="2"/><text x="73.8046%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (42 samples, 2.11%)</title><rect x="75.6662%" y="261" width="2.1116%" height="15" fill="rgb(213,64,8)" fg:x="1505" fg:w="42"/><text x="75.9162%" y="271.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (42 samples, 2.11%)</title><rect x="75.6662%" y="245" width="2.1116%" height="15" fill="rgb(210,75,36)" fg:x="1505" fg:w="42"/><text x="75.9162%" y="255.50">a..</text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="77.7778%" y="261" width="0.0503%" height="15" fill="rgb(229,88,21)" fg:x="1547" fg:w="1"/><text x="78.0278%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="77.7778%" y="245" width="0.0503%" height="15" fill="rgb(252,204,47)" fg:x="1547" fg:w="1"/><text x="78.0278%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="77.7778%" y="229" width="0.0503%" height="15" fill="rgb(208,77,27)" fg:x="1547" fg:w="1"/><text x="78.0278%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="77.7778%" y="213" width="0.0503%" height="15" fill="rgb(221,76,26)" fg:x="1547" fg:w="1"/><text x="78.0278%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="77.7778%" y="197" width="0.0503%" height="15" fill="rgb(225,139,18)" fg:x="1547" fg:w="1"/><text x="78.0278%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.10%)</title><rect x="77.8281%" y="261" width="0.1006%" height="15" fill="rgb(230,137,11)" fg:x="1548" fg:w="2"/><text x="78.0781%" y="271.50"></text></g><g><title>revm::instructions::stack::dup (163 samples, 8.20%)</title><rect x="73.6551%" y="293" width="8.1951%" height="15" fill="rgb(212,28,1)" fg:x="1465" fg:w="163"/><text x="73.9051%" y="303.50">revm::instr..</text></g><g><title>revm::interpreter::stack::Stack::dup (147 samples, 7.39%)</title><rect x="74.4595%" y="277" width="7.3906%" height="15" fill="rgb(248,164,17)" fg:x="1481" fg:w="147"/><text x="74.7095%" y="287.50">revm::inte..</text></g><g><title>core::intrinsics::copy_nonoverlapping (78 samples, 3.92%)</title><rect x="77.9286%" y="261" width="3.9216%" height="15" fill="rgb(222,171,42)" fg:x="1550" fg:w="78"/><text x="78.1786%" y="271.50">core..</text></g><g><title>revm::instructions::stack::pop (14 samples, 0.70%)</title><rect x="81.8502%" y="293" width="0.7039%" height="15" fill="rgb(243,84,45)" fg:x="1628" fg:w="14"/><text x="82.1002%" y="303.50"></text></g><g><title>revm::interpreter::stack::Stack::reduce_one (14 samples, 0.70%)</title><rect x="81.8502%" y="277" width="0.7039%" height="15" fill="rgb(252,49,23)" fg:x="1628" fg:w="14"/><text x="82.1002%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.10%)</title><rect x="84.5651%" y="277" width="0.1006%" height="15" fill="rgb(215,19,7)" fg:x="1682" fg:w="2"/><text x="84.8151%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.10%)</title><rect x="84.5651%" y="261" width="0.1006%" height="15" fill="rgb(238,81,41)" fg:x="1682" fg:w="2"/><text x="84.8151%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (10 samples, 0.50%)</title><rect x="87.9839%" y="261" width="0.5028%" height="15" fill="rgb(210,199,37)" fg:x="1750" fg:w="10"/><text x="88.2339%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (10 samples, 0.50%)</title><rect x="87.9839%" y="245" width="0.5028%" height="15" fill="rgb(244,192,49)" fg:x="1750" fg:w="10"/><text x="88.2339%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (5 samples, 0.25%)</title><rect x="88.4867%" y="261" width="0.2514%" height="15" fill="rgb(226,211,11)" fg:x="1760" fg:w="5"/><text x="88.7367%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (5 samples, 0.25%)</title><rect x="88.7381%" y="261" width="0.2514%" height="15" fill="rgb(236,162,54)" fg:x="1765" fg:w="5"/><text x="88.9881%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (5 samples, 0.25%)</title><rect x="88.7381%" y="245" width="0.2514%" height="15" fill="rgb(220,229,9)" fg:x="1765" fg:w="5"/><text x="88.9881%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (5 samples, 0.25%)</title><rect x="88.7381%" y="229" width="0.2514%" height="15" fill="rgb(250,87,22)" fg:x="1765" fg:w="5"/><text x="88.9881%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (5 samples, 0.25%)</title><rect x="88.9894%" y="261" width="0.2514%" height="15" fill="rgb(239,43,17)" fg:x="1770" fg:w="5"/><text x="89.2394%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.25%)</title><rect x="88.9894%" y="245" width="0.2514%" height="15" fill="rgb(231,177,25)" fg:x="1770" fg:w="5"/><text x="89.2394%" y="255.50"></text></g><g><title>revm::instructions::stack::push (136 samples, 6.84%)</title><rect x="82.5540%" y="293" width="6.8376%" height="15" fill="rgb(219,179,1)" fg:x="1642" fg:w="136"/><text x="82.8040%" y="303.50">revm::ins..</text></g><g><title>revm::interpreter::stack::Stack::push_slice (94 samples, 4.73%)</title><rect x="84.6657%" y="277" width="4.7260%" height="15" fill="rgb(238,219,53)" fg:x="1684" fg:w="94"/><text x="84.9157%" y="287.50">revm::..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (3 samples, 0.15%)</title><rect x="89.2408%" y="261" width="0.1508%" height="15" fill="rgb(232,167,36)" fg:x="1775" fg:w="3"/><text x="89.4908%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.15%)</title><rect x="89.2408%" y="245" width="0.1508%" height="15" fill="rgb(244,19,51)" fg:x="1775" fg:w="3"/><text x="89.4908%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.15%)</title><rect x="89.2408%" y="229" width="0.1508%" height="15" fill="rgb(224,6,22)" fg:x="1775" fg:w="3"/><text x="89.4908%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.15%)</title><rect x="89.2408%" y="213" width="0.1508%" height="15" fill="rgb(224,145,5)" fg:x="1775" fg:w="3"/><text x="89.4908%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (4 samples, 0.20%)</title><rect x="89.8944%" y="261" width="0.2011%" height="15" fill="rgb(234,130,49)" fg:x="1788" fg:w="4"/><text x="90.1444%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (4 samples, 0.20%)</title><rect x="89.8944%" y="245" width="0.2011%" height="15" fill="rgb(254,6,2)" fg:x="1788" fg:w="4"/><text x="90.1444%" y="255.50"></text></g><g><title>core::intrinsics::copy (12 samples, 0.60%)</title><rect x="90.0955%" y="245" width="0.6033%" height="15" fill="rgb(208,96,46)" fg:x="1792" fg:w="12"/><text x="90.3455%" y="255.50"></text></g><g><title>revm::instructions::stack::swap (100 samples, 5.03%)</title><rect x="89.3917%" y="293" width="5.0277%" height="15" fill="rgb(239,3,39)" fg:x="1778" fg:w="100"/><text x="89.6417%" y="303.50">revm::..</text></g><g><title>revm::interpreter::stack::Stack::swap (100 samples, 5.03%)</title><rect x="89.3917%" y="277" width="5.0277%" height="15" fill="rgb(233,210,1)" fg:x="1778" fg:w="100"/><text x="89.6417%" y="287.50">revm::..</text></g><g><title>core::ptr::swap (86 samples, 4.32%)</title><rect x="90.0955%" y="261" width="4.3238%" height="15" fill="rgb(244,137,37)" fg:x="1792" fg:w="86"/><text x="90.3455%" y="271.50">core:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (74 samples, 3.72%)</title><rect x="90.6988%" y="245" width="3.7205%" height="15" fill="rgb(240,136,2)" fg:x="1804" fg:w="74"/><text x="90.9488%" y="255.50">core..</text></g><g><title>tiny_keccak::Buffer::setout (1 samples, 0.05%)</title><rect x="94.4696%" y="229" width="0.0503%" height="15" fill="rgb(239,18,37)" fg:x="1879" fg:w="1"/><text x="94.7196%" y="239.50"></text></g><g><title>tiny_keccak::Buffer::execute (1 samples, 0.05%)</title><rect x="94.4696%" y="213" width="0.0503%" height="15" fill="rgb(218,185,22)" fg:x="1879" fg:w="1"/><text x="94.7196%" y="223.50"></text></g><g><title>tiny_keccak::Buffer::setout::{{closure}} (1 samples, 0.05%)</title><rect x="94.4696%" y="197" width="0.0503%" height="15" fill="rgb(225,218,4)" fg:x="1879" fg:w="1"/><text x="94.7196%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.05%)</title><rect x="94.4696%" y="181" width="0.0503%" height="15" fill="rgb(230,182,32)" fg:x="1879" fg:w="1"/><text x="94.7196%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="94.4696%" y="165" width="0.0503%" height="15" fill="rgb(242,56,43)" fg:x="1879" fg:w="1"/><text x="94.7196%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="94.4696%" y="149" width="0.0503%" height="15" fill="rgb(233,99,24)" fg:x="1879" fg:w="1"/><text x="94.7196%" y="159.50"></text></g><g><title>&lt;tiny_keccak::sha3::Sha3 as tiny_keccak::Hasher&gt;::finalize (101 samples, 5.08%)</title><rect x="94.4696%" y="277" width="5.0779%" height="15" fill="rgb(234,209,42)" fg:x="1879" fg:w="101"/><text x="94.7196%" y="287.50">&lt;tiny_..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::finalize (101 samples, 5.08%)</title><rect x="94.4696%" y="261" width="5.0779%" height="15" fill="rgb(227,7,12)" fg:x="1879" fg:w="101"/><text x="94.7196%" y="271.50">tiny_k..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::squeeze (101 samples, 5.08%)</title><rect x="94.4696%" y="245" width="5.0779%" height="15" fill="rgb(245,203,43)" fg:x="1879" fg:w="101"/><text x="94.7196%" y="255.50">tiny_k..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::fill_block (100 samples, 5.03%)</title><rect x="94.5199%" y="229" width="5.0277%" height="15" fill="rgb(238,205,33)" fg:x="1880" fg:w="100"/><text x="94.7699%" y="239.50">tiny_k..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::keccak (100 samples, 5.03%)</title><rect x="94.5199%" y="213" width="5.0277%" height="15" fill="rgb(231,56,7)" fg:x="1880" fg:w="100"/><text x="94.7699%" y="223.50">tiny_k..</text></g><g><title>&lt;tiny_keccak::keccakf::KeccakF as tiny_keccak::Permutation&gt;::execute (100 samples, 5.03%)</title><rect x="94.5199%" y="197" width="5.0277%" height="15" fill="rgb(244,186,29)" fg:x="1880" fg:w="100"/><text x="94.7699%" y="207.50">&lt;tiny_..</text></g><g><title>tiny_keccak::keccakf::keccakf (100 samples, 5.03%)</title><rect x="94.5199%" y="181" width="5.0277%" height="15" fill="rgb(234,111,31)" fg:x="1880" fg:w="100"/><text x="94.7699%" y="191.50">tiny_k..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (18 samples, 0.90%)</title><rect x="98.6425%" y="165" width="0.9050%" height="15" fill="rgb(241,149,10)" fg:x="1962" fg:w="18"/><text x="98.8925%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.05%)</title><rect x="99.5475%" y="277" width="0.0503%" height="15" fill="rgb(249,206,44)" fg:x="1980" fg:w="1"/><text x="99.7975%" y="287.50"></text></g><g><title>revm::gas::calc::sha3_cost (1 samples, 0.05%)</title><rect x="99.5978%" y="277" width="0.0503%" height="15" fill="rgb(251,153,30)" fg:x="1981" fg:w="1"/><text x="99.8478%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (1 samples, 0.05%)</title><rect x="99.6481%" y="277" width="0.0503%" height="15" fill="rgb(239,152,38)" fg:x="1982" fg:w="1"/><text x="99.8981%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.05%)</title><rect x="99.6983%" y="261" width="0.0503%" height="15" fill="rgb(249,139,47)" fg:x="1983" fg:w="1"/><text x="99.9483%" y="271.50"></text></g><g><title>core::ptr::write (1 samples, 0.05%)</title><rect x="99.6983%" y="245" width="0.0503%" height="15" fill="rgb(244,64,35)" fg:x="1983" fg:w="1"/><text x="99.9483%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::push_h256 (3 samples, 0.15%)</title><rect x="99.6983%" y="277" width="0.1508%" height="15" fill="rgb(216,46,15)" fg:x="1983" fg:w="3"/><text x="99.9483%" y="287.50"></text></g><g><title>primitive_types::U256::from_big_endian (2 samples, 0.10%)</title><rect x="99.7486%" y="261" width="0.1006%" height="15" fill="rgb(250,74,19)" fg:x="1984" fg:w="2"/><text x="99.9986%" y="271.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u64 (1 samples, 0.05%)</title><rect x="99.7989%" y="245" width="0.0503%" height="15" fill="rgb(249,42,33)" fg:x="1985" fg:w="1"/><text x="100.0489%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (1 samples, 0.05%)</title><rect x="99.7989%" y="229" width="0.0503%" height="15" fill="rgb(242,149,17)" fg:x="1985" fg:w="1"/><text x="100.0489%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (1 samples, 0.05%)</title><rect x="99.7989%" y="213" width="0.0503%" height="15" fill="rgb(244,29,21)" fg:x="1985" fg:w="1"/><text x="100.0489%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (1 samples, 0.05%)</title><rect x="99.7989%" y="197" width="0.0503%" height="15" fill="rgb(220,130,37)" fg:x="1985" fg:w="1"/><text x="100.0489%" y="207.50"></text></g><g><title>__libc_start_main (1,659 samples, 83.41%)</title><rect x="16.4907%" y="613" width="83.4087%" height="15" fill="rgb(211,67,2)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="623.50">__libc_start_main</text></g><g><title>main (1,659 samples, 83.41%)</title><rect x="16.4907%" y="597" width="83.4087%" height="15" fill="rgb(235,68,52)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (1,659 samples, 83.41%)</title><rect x="16.4907%" y="581" width="83.4087%" height="15" fill="rgb(246,142,3)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,659 samples, 83.41%)</title><rect x="16.4907%" y="565" width="83.4087%" height="15" fill="rgb(241,25,7)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,659 samples, 83.41%)</title><rect x="16.4907%" y="549" width="83.4087%" height="15" fill="rgb(242,119,39)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,659 samples, 83.41%)</title><rect x="16.4907%" y="533" width="83.4087%" height="15" fill="rgb(241,98,45)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,659 samples, 83.41%)</title><rect x="16.4907%" y="517" width="83.4087%" height="15" fill="rgb(254,28,30)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,659 samples, 83.41%)</title><rect x="16.4907%" y="501" width="83.4087%" height="15" fill="rgb(241,142,54)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,659 samples, 83.41%)</title><rect x="16.4907%" y="485" width="83.4087%" height="15" fill="rgb(222,85,15)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,659 samples, 83.41%)</title><rect x="16.4907%" y="469" width="83.4087%" height="15" fill="rgb(210,85,47)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,659 samples, 83.41%)</title><rect x="16.4907%" y="453" width="83.4087%" height="15" fill="rgb(224,206,25)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,659 samples, 83.41%)</title><rect x="16.4907%" y="437" width="83.4087%" height="15" fill="rgb(243,201,19)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,659 samples, 83.41%)</title><rect x="16.4907%" y="421" width="83.4087%" height="15" fill="rgb(236,59,4)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,659 samples, 83.41%)</title><rect x="16.4907%" y="405" width="83.4087%" height="15" fill="rgb(254,179,45)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>snailtracer::main (1,659 samples, 83.41%)</title><rect x="16.4907%" y="389" width="83.4087%" height="15" fill="rgb(226,14,10)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="399.50">snailtracer::main</text></g><g><title>snailtracer::simple_example (1,659 samples, 83.41%)</title><rect x="16.4907%" y="373" width="83.4087%" height="15" fill="rgb(244,27,41)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="383.50">snailtracer::simple_example</text></g><g><title>revm::evm::EVM&lt;DB&gt;::transact (1,659 samples, 83.41%)</title><rect x="16.4907%" y="357" width="83.4087%" height="15" fill="rgb(235,35,32)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="367.50">revm::evm::EVM&lt;DB&gt;::transact</text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact (1,659 samples, 83.41%)</title><rect x="16.4907%" y="341" width="83.4087%" height="15" fill="rgb(218,68,31)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="351.50">&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact</text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (1,659 samples, 83.41%)</title><rect x="16.4907%" y="325" width="83.4087%" height="15" fill="rgb(207,120,37)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="335.50">revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner</text></g><g><title>revm::interpreter::Interpreter::run (1,659 samples, 83.41%)</title><rect x="16.4907%" y="309" width="83.4087%" height="15" fill="rgb(227,98,0)" fg:x="328" fg:w="1659"/><text x="16.7407%" y="319.50">revm::interpreter::Interpreter::run</text></g><g><title>revm::instructions::system::sha3 (109 samples, 5.48%)</title><rect x="94.4193%" y="293" width="5.4801%" height="15" fill="rgb(207,7,3)" fg:x="1878" fg:w="109"/><text x="94.6693%" y="303.50">revm::i..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::update (1 samples, 0.05%)</title><rect x="99.8492%" y="277" width="0.0503%" height="15" fill="rgb(206,98,19)" fg:x="1986" fg:w="1"/><text x="100.0992%" y="287.50"></text></g><g><title>tiny_keccak::Buffer::xorin (1 samples, 0.05%)</title><rect x="99.8492%" y="261" width="0.0503%" height="15" fill="rgb(217,5,26)" fg:x="1986" fg:w="1"/><text x="100.0992%" y="271.50"></text></g><g><title>tiny_keccak::Buffer::execute (1 samples, 0.05%)</title><rect x="99.8492%" y="245" width="0.0503%" height="15" fill="rgb(235,190,38)" fg:x="1986" fg:w="1"/><text x="100.0992%" y="255.50"></text></g><g><title>tiny_keccak::Buffer::xorin::{{closure}} (1 samples, 0.05%)</title><rect x="99.8492%" y="229" width="0.0503%" height="15" fill="rgb(247,86,24)" fg:x="1986" fg:w="1"/><text x="100.0992%" y="239.50"></text></g><g><title>_start (1,660 samples, 83.46%)</title><rect x="16.4907%" y="629" width="83.4590%" height="15" fill="rgb(205,101,16)" fg:x="328" fg:w="1660"/><text x="16.7407%" y="639.50">_start</text></g><g><title>_dl_start (1 samples, 0.05%)</title><rect x="99.8994%" y="613" width="0.0503%" height="15" fill="rgb(246,168,33)" fg:x="1987" fg:w="1"/><text x="100.1494%" y="623.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.05%)</title><rect x="99.8994%" y="597" width="0.0503%" height="15" fill="rgb(231,114,1)" fg:x="1987" fg:w="1"/><text x="100.1494%" y="607.50"></text></g><g><title>dl_main (1 samples, 0.05%)</title><rect x="99.8994%" y="581" width="0.0503%" height="15" fill="rgb(207,184,53)" fg:x="1987" fg:w="1"/><text x="100.1494%" y="591.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.05%)</title><rect x="99.8994%" y="565" width="0.0503%" height="15" fill="rgb(224,95,51)" fg:x="1987" fg:w="1"/><text x="100.1494%" y="575.50"></text></g><g><title>__mprotect (1 samples, 0.05%)</title><rect x="99.8994%" y="549" width="0.0503%" height="15" fill="rgb(212,188,45)" fg:x="1987" fg:w="1"/><text x="100.1494%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.8994%" y="533" width="0.0503%" height="15" fill="rgb(223,154,38)" fg:x="1987" fg:w="1"/><text x="100.1494%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.8994%" y="517" width="0.0503%" height="15" fill="rgb(251,22,52)" fg:x="1987" fg:w="1"/><text x="100.1494%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.8994%" y="501" width="0.0503%" height="15" fill="rgb(229,209,22)" fg:x="1987" fg:w="1"/><text x="100.1494%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.8994%" y="485" width="0.0503%" height="15" fill="rgb(234,138,34)" fg:x="1987" fg:w="1"/><text x="100.1494%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.8994%" y="469" width="0.0503%" height="15" fill="rgb(212,95,11)" fg:x="1987" fg:w="1"/><text x="100.1494%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="99.8994%" y="453" width="0.0503%" height="15" fill="rgb(240,179,47)" fg:x="1987" fg:w="1"/><text x="100.1494%" y="463.50"></text></g><g><title>all (1,989 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(240,163,11)" fg:x="0" fg:w="1989"/><text x="0.2500%" y="671.50"></text></g><g><title>snailtracer (1,984 samples, 99.75%)</title><rect x="0.2514%" y="645" width="99.7486%" height="15" fill="rgb(236,37,12)" fg:x="5" fg:w="1984"/><text x="0.5014%" y="655.50">snailtracer</text></g><g><title>revm::instructions::stack::swap (1 samples, 0.05%)</title><rect x="99.9497%" y="629" width="0.0503%" height="15" fill="rgb(232,164,16)" fg:x="1988" fg:w="1"/><text x="100.1997%" y="639.50"></text></g></svg></svg>