<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1045.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1130"><g><title>perf-exec (5 samples, 0.44%)</title><rect x="0.0000%" y="997" width="0.4425%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="981" width="0.4425%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="991.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="965" width="0.4425%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="975.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="949" width="0.4425%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="959.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="933" width="0.4425%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="943.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="917" width="0.4425%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="927.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="901" width="0.4425%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="911.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="885" width="0.4425%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="895.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="869" width="0.4425%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="879.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="853" width="0.4425%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="863.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="837" width="0.4425%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="847.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="821" width="0.4425%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="831.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="805" width="0.4425%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="789" width="0.4425%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="0.0000%" y="773" width="0.4425%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="783.50"></text></g><g><title>revm::instructions::i256::i256_div (2 samples, 0.18%)</title><rect x="0.4425%" y="949" width="0.1770%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="2"/><text x="0.6925%" y="959.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (3 samples, 0.27%)</title><rect x="0.4425%" y="965" width="0.2655%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="3"/><text x="0.6925%" y="975.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (1 samples, 0.09%)</title><rect x="0.6195%" y="949" width="0.0885%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="1"/><text x="0.8695%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.09%)</title><rect x="0.6195%" y="933" width="0.0885%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="1"/><text x="0.8695%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.09%)</title><rect x="0.6195%" y="917" width="0.0885%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="1"/><text x="0.8695%" y="927.50"></text></g><g><title>revm::instructions::bitwise::sgt (2 samples, 0.18%)</title><rect x="0.7080%" y="965" width="0.1770%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="2"/><text x="0.9580%" y="975.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (2 samples, 0.18%)</title><rect x="0.7080%" y="949" width="0.1770%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="2"/><text x="0.9580%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.18%)</title><rect x="0.7080%" y="933" width="0.1770%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="2"/><text x="0.9580%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.18%)</title><rect x="0.7080%" y="917" width="0.1770%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="2"/><text x="0.9580%" y="927.50"></text></g><g><title>revm::instructions::bitwise::slt (1 samples, 0.09%)</title><rect x="0.8850%" y="965" width="0.0885%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="1"/><text x="1.1350%" y="975.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (1 samples, 0.09%)</title><rect x="0.8850%" y="949" width="0.0885%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="1"/><text x="1.1350%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.09%)</title><rect x="0.8850%" y="933" width="0.0885%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="1"/><text x="1.1350%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.09%)</title><rect x="0.8850%" y="917" width="0.0885%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="1"/><text x="1.1350%" y="927.50"></text></g><g><title>revm::instructions::control::jumpdest (1 samples, 0.09%)</title><rect x="0.9735%" y="965" width="0.0885%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="1"/><text x="1.2235%" y="975.50"></text></g><g><title>revm::instructions::control::jumpi (3 samples, 0.27%)</title><rect x="1.0619%" y="965" width="0.2655%" height="15" fill="rgb(232,36,49)" fg:x="12" fg:w="3"/><text x="1.3119%" y="975.50"></text></g><g><title>revm::instructions::host::sload (2 samples, 0.18%)</title><rect x="1.3274%" y="965" width="0.1770%" height="15" fill="rgb(209,103,24)" fg:x="15" fg:w="2"/><text x="1.5774%" y="975.50"></text></g><g><title>revm::instructions::stack::swap (1 samples, 0.09%)</title><rect x="1.5044%" y="965" width="0.0885%" height="15" fill="rgb(229,88,8)" fg:x="17" fg:w="1"/><text x="1.7544%" y="975.50"></text></g><g><title>[[heap]] (14 samples, 1.24%)</title><rect x="0.4425%" y="981" width="1.2389%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="14"/><text x="0.6925%" y="991.50"></text></g><g><title>revm::instructions::system::sha3 (1 samples, 0.09%)</title><rect x="1.5929%" y="965" width="0.0885%" height="15" fill="rgb(254,191,54)" fg:x="18" fg:w="1"/><text x="1.8429%" y="975.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_add (10 samples, 0.88%)</title><rect x="1.6814%" y="965" width="0.8850%" height="15" fill="rgb(241,83,37)" fg:x="19" fg:w="10"/><text x="1.9314%" y="975.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (10 samples, 0.88%)</title><rect x="1.6814%" y="949" width="0.8850%" height="15" fill="rgb(233,36,39)" fg:x="19" fg:w="10"/><text x="1.9314%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.88%)</title><rect x="1.6814%" y="933" width="0.8850%" height="15" fill="rgb(226,3,54)" fg:x="19" fg:w="10"/><text x="1.9314%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (10 samples, 0.88%)</title><rect x="1.6814%" y="917" width="0.8850%" height="15" fill="rgb(245,192,40)" fg:x="19" fg:w="10"/><text x="1.9314%" y="927.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_sub (3 samples, 0.27%)</title><rect x="2.5664%" y="965" width="0.2655%" height="15" fill="rgb(238,167,29)" fg:x="29" fg:w="3"/><text x="2.8164%" y="975.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (3 samples, 0.27%)</title><rect x="2.5664%" y="949" width="0.2655%" height="15" fill="rgb(232,182,51)" fg:x="29" fg:w="3"/><text x="2.8164%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.27%)</title><rect x="2.5664%" y="933" width="0.2655%" height="15" fill="rgb(231,60,39)" fg:x="29" fg:w="3"/><text x="2.8164%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.27%)</title><rect x="2.5664%" y="917" width="0.2655%" height="15" fill="rgb(208,69,12)" fg:x="29" fg:w="3"/><text x="2.8164%" y="927.50"></text></g><g><title>[[stack]] (14 samples, 1.24%)</title><rect x="1.6814%" y="981" width="1.2389%" height="15" fill="rgb(235,93,37)" fg:x="19" fg:w="14"/><text x="1.9314%" y="991.50"></text></g><g><title>revm::instructions::bitwise::iszero (1 samples, 0.09%)</title><rect x="2.8319%" y="965" width="0.0885%" height="15" fill="rgb(213,116,39)" fg:x="32" fg:w="1"/><text x="3.0819%" y="975.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (3 samples, 0.27%)</title><rect x="3.0088%" y="965" width="0.2655%" height="15" fill="rgb(222,207,29)" fg:x="34" fg:w="3"/><text x="3.2588%" y="975.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.09%)</title><rect x="3.2743%" y="965" width="0.0885%" height="15" fill="rgb(206,96,30)" fg:x="37" fg:w="1"/><text x="3.5243%" y="975.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (5 samples, 0.44%)</title><rect x="3.3628%" y="965" width="0.4425%" height="15" fill="rgb(218,138,4)" fg:x="38" fg:w="5"/><text x="3.6128%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="3.8053%" y="965" width="0.1770%" height="15" fill="rgb(250,191,14)" fg:x="43" fg:w="2"/><text x="4.0553%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="3.8053%" y="949" width="0.1770%" height="15" fill="rgb(239,60,40)" fg:x="43" fg:w="2"/><text x="4.0553%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="3.8053%" y="933" width="0.1770%" height="15" fill="rgb(206,27,48)" fg:x="43" fg:w="2"/><text x="4.0553%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="3.8053%" y="917" width="0.1770%" height="15" fill="rgb(225,35,8)" fg:x="43" fg:w="2"/><text x="4.0553%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="3.8053%" y="901" width="0.1770%" height="15" fill="rgb(250,213,24)" fg:x="43" fg:w="2"/><text x="4.0553%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="3.8053%" y="885" width="0.1770%" height="15" fill="rgb(247,123,22)" fg:x="43" fg:w="2"/><text x="4.0553%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="3.8053%" y="869" width="0.1770%" height="15" fill="rgb(231,138,38)" fg:x="43" fg:w="2"/><text x="4.0553%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="3.8053%" y="853" width="0.1770%" height="15" fill="rgb(231,145,46)" fg:x="43" fg:w="2"/><text x="4.0553%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="3.8938%" y="837" width="0.0885%" height="15" fill="rgb(251,118,11)" fg:x="44" fg:w="1"/><text x="4.1438%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="3.8938%" y="821" width="0.0885%" height="15" fill="rgb(217,147,25)" fg:x="44" fg:w="1"/><text x="4.1438%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="3.8938%" y="805" width="0.0885%" height="15" fill="rgb(247,81,37)" fg:x="44" fg:w="1"/><text x="4.1438%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="3.8938%" y="789" width="0.0885%" height="15" fill="rgb(209,12,38)" fg:x="44" fg:w="1"/><text x="4.1438%" y="799.50"></text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (98 samples, 8.67%)</title><rect x="3.9823%" y="965" width="8.6726%" height="15" fill="rgb(227,1,9)" fg:x="45" fg:w="98"/><text x="4.2323%" y="975.50">revm::evm_im..</text></g><g><title>revm::interpreter::Interpreter::run (98 samples, 8.67%)</title><rect x="3.9823%" y="949" width="8.6726%" height="15" fill="rgb(248,47,43)" fg:x="45" fg:w="98"/><text x="4.2323%" y="959.50">revm::interp..</text></g><g><title>revm::instructions::arithmetic::overflowing_mul (1 samples, 0.09%)</title><rect x="12.6549%" y="965" width="0.0885%" height="15" fill="rgb(221,10,30)" fg:x="143" fg:w="1"/><text x="12.9049%" y="975.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (1 samples, 0.09%)</title><rect x="12.6549%" y="949" width="0.0885%" height="15" fill="rgb(210,229,1)" fg:x="143" fg:w="1"/><text x="12.9049%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.09%)</title><rect x="12.6549%" y="933" width="0.0885%" height="15" fill="rgb(222,148,37)" fg:x="143" fg:w="1"/><text x="12.9049%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.09%)</title><rect x="12.6549%" y="917" width="0.0885%" height="15" fill="rgb(234,67,33)" fg:x="143" fg:w="1"/><text x="12.9049%" y="927.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (2 samples, 0.18%)</title><rect x="12.7434%" y="965" width="0.1770%" height="15" fill="rgb(247,98,35)" fg:x="144" fg:w="2"/><text x="12.9934%" y="975.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (1 samples, 0.09%)</title><rect x="12.8319%" y="949" width="0.0885%" height="15" fill="rgb(247,138,52)" fg:x="145" fg:w="1"/><text x="13.0819%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.09%)</title><rect x="12.8319%" y="933" width="0.0885%" height="15" fill="rgb(213,79,30)" fg:x="145" fg:w="1"/><text x="13.0819%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.09%)</title><rect x="12.8319%" y="917" width="0.0885%" height="15" fill="rgb(246,177,23)" fg:x="145" fg:w="1"/><text x="13.0819%" y="927.50"></text></g><g><title>revm::instructions::bitwise::iszero (3 samples, 0.27%)</title><rect x="12.9204%" y="965" width="0.2655%" height="15" fill="rgb(230,62,27)" fg:x="146" fg:w="3"/><text x="13.1704%" y="975.50"></text></g><g><title>revm::instructions::bitwise::slt (1 samples, 0.09%)</title><rect x="13.1858%" y="965" width="0.0885%" height="15" fill="rgb(216,154,8)" fg:x="149" fg:w="1"/><text x="13.4358%" y="975.50"></text></g><g><title>revm::instructions::control::jump (2 samples, 0.18%)</title><rect x="13.2743%" y="965" width="0.1770%" height="15" fill="rgb(244,35,45)" fg:x="150" fg:w="2"/><text x="13.5243%" y="975.50"></text></g><g><title>revm::instructions::control::jumpdest (4 samples, 0.35%)</title><rect x="13.4513%" y="965" width="0.3540%" height="15" fill="rgb(251,115,12)" fg:x="152" fg:w="4"/><text x="13.7013%" y="975.50"></text></g><g><title>revm::instructions::control::jumpi (2 samples, 0.18%)</title><rect x="13.8053%" y="965" width="0.1770%" height="15" fill="rgb(240,54,50)" fg:x="156" fg:w="2"/><text x="14.0553%" y="975.50"></text></g><g><title>revm::instructions::host::sstore (1 samples, 0.09%)</title><rect x="13.9823%" y="965" width="0.0885%" height="15" fill="rgb(233,84,52)" fg:x="158" fg:w="1"/><text x="14.2323%" y="975.50"></text></g><g><title>revm::instructions::memory::mload (16 samples, 1.42%)</title><rect x="14.0708%" y="965" width="1.4159%" height="15" fill="rgb(207,117,47)" fg:x="159" fg:w="16"/><text x="14.3208%" y="975.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (11 samples, 0.97%)</title><rect x="14.5133%" y="949" width="0.9735%" height="15" fill="rgb(249,43,39)" fg:x="164" fg:w="11"/><text x="14.7633%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.97%)</title><rect x="14.5133%" y="933" width="0.9735%" height="15" fill="rgb(209,38,44)" fg:x="164" fg:w="11"/><text x="14.7633%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (11 samples, 0.97%)</title><rect x="14.5133%" y="917" width="0.9735%" height="15" fill="rgb(236,212,23)" fg:x="164" fg:w="11"/><text x="14.7633%" y="927.50"></text></g><g><title>revm::instructions::memory::mstore (7 samples, 0.62%)</title><rect x="15.4867%" y="965" width="0.6195%" height="15" fill="rgb(242,79,21)" fg:x="175" fg:w="7"/><text x="15.7367%" y="975.50"></text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (3 samples, 0.27%)</title><rect x="15.8407%" y="949" width="0.2655%" height="15" fill="rgb(211,96,35)" fg:x="179" fg:w="3"/><text x="16.0907%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.27%)</title><rect x="15.8407%" y="933" width="0.2655%" height="15" fill="rgb(253,215,40)" fg:x="179" fg:w="3"/><text x="16.0907%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.27%)</title><rect x="15.8407%" y="917" width="0.2655%" height="15" fill="rgb(211,81,21)" fg:x="179" fg:w="3"/><text x="16.0907%" y="927.50"></text></g><g><title>revm::instructions::stack::dup (7 samples, 0.62%)</title><rect x="16.1062%" y="965" width="0.6195%" height="15" fill="rgb(208,190,38)" fg:x="182" fg:w="7"/><text x="16.3562%" y="975.50"></text></g><g><title>revm::instructions::stack::pop (1 samples, 0.09%)</title><rect x="16.7257%" y="965" width="0.0885%" height="15" fill="rgb(235,213,38)" fg:x="189" fg:w="1"/><text x="16.9757%" y="975.50"></text></g><g><title>revm::instructions::stack::push (7 samples, 0.62%)</title><rect x="16.8142%" y="965" width="0.6195%" height="15" fill="rgb(237,122,38)" fg:x="190" fg:w="7"/><text x="17.0642%" y="975.50"></text></g><g><title>revm::instructions::stack::swap (18 samples, 1.59%)</title><rect x="17.4336%" y="965" width="1.5929%" height="15" fill="rgb(244,218,35)" fg:x="197" fg:w="18"/><text x="17.6836%" y="975.50"></text></g><g><title>[unknown] (183 samples, 16.19%)</title><rect x="2.9204%" y="981" width="16.1947%" height="15" fill="rgb(240,68,47)" fg:x="33" fg:w="183"/><text x="3.1704%" y="991.50">[unknown]</text></g><g><title>revm::instructions::system::sha3 (1 samples, 0.09%)</title><rect x="19.0265%" y="965" width="0.0885%" height="15" fill="rgb(210,16,53)" fg:x="215" fg:w="1"/><text x="19.2765%" y="975.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (25 samples, 2.21%)</title><rect x="26.4602%" y="309" width="2.2124%" height="15" fill="rgb(235,124,12)" fg:x="299" fg:w="25"/><text x="26.7102%" y="319.50">c..</text></g><g><title>revm::instructions::arithmetic::lt (1 samples, 0.09%)</title><rect x="28.6726%" y="309" width="0.0885%" height="15" fill="rgb(224,169,11)" fg:x="324" fg:w="1"/><text x="28.9226%" y="319.50"></text></g><g><title>primitive_types::U256::overflowing_add (9 samples, 0.80%)</title><rect x="29.4690%" y="293" width="0.7965%" height="15" fill="rgb(250,166,2)" fg:x="333" fg:w="9"/><text x="29.7190%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (3 samples, 0.27%)</title><rect x="30.0000%" y="277" width="0.2655%" height="15" fill="rgb(242,216,29)" fg:x="339" fg:w="3"/><text x="30.2500%" y="287.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_add (26 samples, 2.30%)</title><rect x="28.7611%" y="309" width="2.3009%" height="15" fill="rgb(230,116,27)" fg:x="325" fg:w="26"/><text x="29.0111%" y="319.50">r..</text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (9 samples, 0.80%)</title><rect x="30.2655%" y="293" width="0.7965%" height="15" fill="rgb(228,99,48)" fg:x="342" fg:w="9"/><text x="30.5155%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (3 samples, 0.27%)</title><rect x="30.7965%" y="277" width="0.2655%" height="15" fill="rgb(253,11,6)" fg:x="348" fg:w="3"/><text x="31.0465%" y="287.50"></text></g><g><title>primitive_types::U256::overflowing_mul (12 samples, 1.06%)</title><rect x="31.2389%" y="293" width="1.0619%" height="15" fill="rgb(247,143,39)" fg:x="353" fg:w="12"/><text x="31.4889%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (5 samples, 0.44%)</title><rect x="31.8584%" y="277" width="0.4425%" height="15" fill="rgb(236,97,10)" fg:x="360" fg:w="5"/><text x="32.1084%" y="287.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_mul (15 samples, 1.33%)</title><rect x="31.0619%" y="309" width="1.3274%" height="15" fill="rgb(233,208,19)" fg:x="351" fg:w="15"/><text x="31.3119%" y="319.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (1 samples, 0.09%)</title><rect x="32.3009%" y="293" width="0.0885%" height="15" fill="rgb(216,164,2)" fg:x="365" fg:w="1"/><text x="32.5509%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.09%)</title><rect x="32.3009%" y="277" width="0.0885%" height="15" fill="rgb(220,129,5)" fg:x="365" fg:w="1"/><text x="32.5509%" y="287.50"></text></g><g><title>primitive_types::U256::overflowing_sub (1 samples, 0.09%)</title><rect x="32.7434%" y="293" width="0.0885%" height="15" fill="rgb(242,17,10)" fg:x="370" fg:w="1"/><text x="32.9934%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_sub (1 samples, 0.09%)</title><rect x="32.7434%" y="277" width="0.0885%" height="15" fill="rgb(242,107,0)" fg:x="370" fg:w="1"/><text x="32.9934%" y="287.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_sub (6 samples, 0.53%)</title><rect x="32.3894%" y="309" width="0.5310%" height="15" fill="rgb(251,28,31)" fg:x="366" fg:w="6"/><text x="32.6394%" y="319.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (1 samples, 0.09%)</title><rect x="32.8319%" y="293" width="0.0885%" height="15" fill="rgb(233,223,10)" fg:x="371" fg:w="1"/><text x="33.0819%" y="303.50"></text></g><g><title>_ZNK4intx4uintILj320EEcvNS0_IXT_EEEILj256EvEEv (33 samples, 2.92%)</title><rect x="35.9292%" y="229" width="2.9204%" height="15" fill="rgb(215,21,27)" fg:x="406" fg:w="33"/><text x="36.1792%" y="239.50">_Z..</text></g><g><title>intx::internal::normalize&lt;256u, 256u&gt; (55 samples, 4.87%)</title><rect x="38.8496%" y="229" width="4.8673%" height="15" fill="rgb(232,23,21)" fg:x="439" fg:w="55"/><text x="39.0996%" y="239.50">intx::..</text></g><g><title>intx::internal::normalized_div_args&lt;256u, 256u&gt;::normalized_div_args (4 samples, 0.35%)</title><rect x="43.3628%" y="213" width="0.3540%" height="15" fill="rgb(244,5,23)" fg:x="490" fg:w="4"/><text x="43.6128%" y="223.50"></text></g><g><title>intx::uint&lt;256u&gt;::uint (4 samples, 0.35%)</title><rect x="43.3628%" y="197" width="0.3540%" height="15" fill="rgb(226,81,46)" fg:x="490" fg:w="4"/><text x="43.6128%" y="207.50"></text></g><g><title>intx::reciprocal_2by1 (32 samples, 2.83%)</title><rect x="44.0708%" y="213" width="2.8319%" height="15" fill="rgb(247,70,30)" fg:x="498" fg:w="32"/><text x="44.3208%" y="223.50">in..</text></g><g><title>intx::umul (5 samples, 0.44%)</title><rect x="46.4602%" y="197" width="0.4425%" height="15" fill="rgb(212,68,19)" fg:x="525" fg:w="5"/><text x="46.7102%" y="207.50"></text></g><g><title>intx::uint&lt;128u&gt;::uint (1 samples, 0.09%)</title><rect x="46.8142%" y="181" width="0.0885%" height="15" fill="rgb(240,187,13)" fg:x="529" fg:w="1"/><text x="47.0642%" y="191.50"></text></g><g><title>intx::fast_add (9 samples, 0.80%)</title><rect x="48.3186%" y="197" width="0.7965%" height="15" fill="rgb(223,113,26)" fg:x="546" fg:w="9"/><text x="48.5686%" y="207.50"></text></g><g><title>intx::uint&lt;128u&gt;::uint (6 samples, 0.53%)</title><rect x="48.5841%" y="181" width="0.5310%" height="15" fill="rgb(206,192,2)" fg:x="549" fg:w="6"/><text x="48.8341%" y="191.50"></text></g><g><title>intx::internal::udivrem_by1 (64 samples, 5.66%)</title><rect x="43.7168%" y="229" width="5.6637%" height="15" fill="rgb(241,108,4)" fg:x="494" fg:w="64"/><text x="43.9668%" y="239.50">intx::i..</text></g><g><title>intx::udivrem_2by1 (28 samples, 2.48%)</title><rect x="46.9027%" y="213" width="2.4779%" height="15" fill="rgb(247,173,49)" fg:x="530" fg:w="28"/><text x="47.1527%" y="223.50">in..</text></g><g><title>intx::umul (3 samples, 0.27%)</title><rect x="49.1150%" y="197" width="0.2655%" height="15" fill="rgb(224,114,35)" fg:x="555" fg:w="3"/><text x="49.3650%" y="207.50"></text></g><g><title>intx::reciprocal_2by1 (3 samples, 0.27%)</title><rect x="49.8230%" y="197" width="0.2655%" height="15" fill="rgb(245,159,27)" fg:x="563" fg:w="3"/><text x="50.0730%" y="207.50"></text></g><g><title>intx::reciprocal_3by2 (9 samples, 0.80%)</title><rect x="49.3805%" y="213" width="0.7965%" height="15" fill="rgb(245,172,44)" fg:x="558" fg:w="9"/><text x="49.6305%" y="223.50"></text></g><g><title>intx::umul (1 samples, 0.09%)</title><rect x="50.0885%" y="197" width="0.0885%" height="15" fill="rgb(236,23,11)" fg:x="566" fg:w="1"/><text x="50.3385%" y="207.50"></text></g><g><title>intx::internal::udivrem_by2 (11 samples, 0.97%)</title><rect x="49.3805%" y="229" width="0.9735%" height="15" fill="rgb(205,117,38)" fg:x="558" fg:w="11"/><text x="49.6305%" y="239.50"></text></g><g><title>intx::udivrem_3by2 (2 samples, 0.18%)</title><rect x="50.1770%" y="213" width="0.1770%" height="15" fill="rgb(237,72,25)" fg:x="567" fg:w="2"/><text x="50.4270%" y="223.50"></text></g><g><title>intx::umul (1 samples, 0.09%)</title><rect x="50.2655%" y="197" width="0.0885%" height="15" fill="rgb(244,70,9)" fg:x="568" fg:w="1"/><text x="50.5155%" y="207.50"></text></g><g><title>intx::operator/&lt;256u&gt; (175 samples, 15.49%)</title><rect x="35.2212%" y="261" width="15.4867%" height="15" fill="rgb(217,125,39)" fg:x="398" fg:w="175"/><text x="35.4712%" y="271.50">intx::operator/&lt;256u&gt;</text></g><g><title>intx::udivrem&lt;256u, 256u&gt; (174 samples, 15.40%)</title><rect x="35.3097%" y="245" width="15.3982%" height="15" fill="rgb(235,36,10)" fg:x="399" fg:w="174"/><text x="35.5597%" y="255.50">intx::udivrem&lt;256u, 256u&gt;</text></g><g><title>intx::uint&lt;256u&gt;::uint&lt;unsigned long, void&gt; (4 samples, 0.35%)</title><rect x="50.3540%" y="229" width="0.3540%" height="15" fill="rgb(251,123,47)" fg:x="569" fg:w="4"/><text x="50.6040%" y="239.50"></text></g><g><title>fast_div_rem (189 samples, 16.73%)</title><rect x="34.3363%" y="277" width="16.7257%" height="15" fill="rgb(221,13,13)" fg:x="388" fg:w="189"/><text x="34.5863%" y="287.50">fast_div_rem</text></g><g><title>intx::uint&lt;256u&gt;::uint&lt;unsigned long, unsigned long, unsigned long, unsigned long, void&gt; (4 samples, 0.35%)</title><rect x="50.7080%" y="261" width="0.3540%" height="15" fill="rgb(238,131,9)" fg:x="573" fg:w="4"/><text x="50.9580%" y="271.50"></text></g><g><title>primitive_types::U256::is_zero (3 samples, 0.27%)</title><rect x="51.4159%" y="261" width="0.2655%" height="15" fill="rgb(211,50,8)" fg:x="581" fg:w="3"/><text x="51.6659%" y="271.50"></text></g><g><title>revm::instructions::i256::i256_sign (9 samples, 0.80%)</title><rect x="51.0619%" y="277" width="0.7965%" height="15" fill="rgb(245,182,24)" fg:x="577" fg:w="9"/><text x="51.3119%" y="287.50"></text></g><g><title>revm::instructions::i256::two_compl_mut (2 samples, 0.18%)</title><rect x="51.6814%" y="261" width="0.1770%" height="15" fill="rgb(242,14,37)" fg:x="584" fg:w="2"/><text x="51.9314%" y="271.50"></text></g><g><title>revm::instructions::i256::two_compl (1 samples, 0.09%)</title><rect x="51.7699%" y="245" width="0.0885%" height="15" fill="rgb(246,228,12)" fg:x="585" fg:w="1"/><text x="52.0199%" y="255.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::bit::Not&gt;::not (1 samples, 0.09%)</title><rect x="51.7699%" y="229" width="0.0885%" height="15" fill="rgb(213,55,15)" fg:x="585" fg:w="1"/><text x="52.0199%" y="239.50"></text></g><g><title>revm::instructions::i256::two_compl (1 samples, 0.09%)</title><rect x="51.8584%" y="277" width="0.0885%" height="15" fill="rgb(209,9,3)" fg:x="586" fg:w="1"/><text x="52.1084%" y="287.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::Add&lt;T&gt;&gt;::add (1 samples, 0.09%)</title><rect x="51.8584%" y="261" width="0.0885%" height="15" fill="rgb(230,59,30)" fg:x="586" fg:w="1"/><text x="52.1084%" y="271.50"></text></g><g><title>revm::instructions::i256::i256_div (216 samples, 19.12%)</title><rect x="32.9204%" y="293" width="19.1150%" height="15" fill="rgb(209,121,21)" fg:x="372" fg:w="216"/><text x="33.1704%" y="303.50">revm::instructions::i256::i256..</text></g><g><title>revm::instructions::i256::u256_remove_sign (1 samples, 0.09%)</title><rect x="51.9469%" y="277" width="0.0885%" height="15" fill="rgb(220,109,13)" fg:x="587" fg:w="1"/><text x="52.1969%" y="287.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (220 samples, 19.47%)</title><rect x="32.9204%" y="309" width="19.4690%" height="15" fill="rgb(232,18,1)" fg:x="372" fg:w="220"/><text x="33.1704%" y="319.50">revm::instructions::arithmetic..</text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (4 samples, 0.35%)</title><rect x="52.0354%" y="293" width="0.3540%" height="15" fill="rgb(215,41,42)" fg:x="588" fg:w="4"/><text x="52.2854%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.09%)</title><rect x="52.3009%" y="277" width="0.0885%" height="15" fill="rgb(224,123,36)" fg:x="591" fg:w="1"/><text x="52.5509%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.09%)</title><rect x="52.3009%" y="261" width="0.0885%" height="15" fill="rgb(240,125,3)" fg:x="591" fg:w="1"/><text x="52.5509%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.09%)</title><rect x="52.3009%" y="245" width="0.0885%" height="15" fill="rgb(205,98,50)" fg:x="591" fg:w="1"/><text x="52.5509%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.09%)</title><rect x="52.3009%" y="229" width="0.0885%" height="15" fill="rgb(205,185,37)" fg:x="591" fg:w="1"/><text x="52.5509%" y="239.50"></text></g><g><title>primitive_types::U256::is_zero (1 samples, 0.09%)</title><rect x="52.5664%" y="293" width="0.0885%" height="15" fill="rgb(238,207,15)" fg:x="594" fg:w="1"/><text x="52.8164%" y="303.50"></text></g><g><title>revm::instructions::bitwise::iszero (4 samples, 0.35%)</title><rect x="52.3894%" y="309" width="0.3540%" height="15" fill="rgb(213,199,42)" fg:x="592" fg:w="4"/><text x="52.6394%" y="319.50"></text></g><g><title>revm::interpreter::stack::Stack::top_unsafe (1 samples, 0.09%)</title><rect x="52.6549%" y="293" width="0.0885%" height="15" fill="rgb(235,201,11)" fg:x="595" fg:w="1"/><text x="52.9049%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.09%)</title><rect x="52.6549%" y="277" width="0.0885%" height="15" fill="rgb(207,46,11)" fg:x="595" fg:w="1"/><text x="52.9049%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.09%)</title><rect x="52.6549%" y="261" width="0.0885%" height="15" fill="rgb(241,35,35)" fg:x="595" fg:w="1"/><text x="52.9049%" y="271.50"></text></g><g><title>revm::instructions::bitwise::sgt (1 samples, 0.09%)</title><rect x="52.7434%" y="309" width="0.0885%" height="15" fill="rgb(243,32,47)" fg:x="596" fg:w="1"/><text x="52.9934%" y="319.50"></text></g><g><title>revm::instructions::i256::i256_cmp (1 samples, 0.09%)</title><rect x="52.7434%" y="293" width="0.0885%" height="15" fill="rgb(247,202,23)" fg:x="596" fg:w="1"/><text x="52.9934%" y="303.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (1 samples, 0.09%)</title><rect x="52.7434%" y="277" width="0.0885%" height="15" fill="rgb(219,102,11)" fg:x="596" fg:w="1"/><text x="52.9934%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (1 samples, 0.09%)</title><rect x="52.7434%" y="261" width="0.0885%" height="15" fill="rgb(243,110,44)" fg:x="596" fg:w="1"/><text x="52.9934%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.09%)</title><rect x="52.7434%" y="245" width="0.0885%" height="15" fill="rgb(222,74,54)" fg:x="596" fg:w="1"/><text x="52.9934%" y="255.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (3 samples, 0.27%)</title><rect x="53.3628%" y="277" width="0.2655%" height="15" fill="rgb(216,99,12)" fg:x="603" fg:w="3"/><text x="53.6128%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (3 samples, 0.27%)</title><rect x="53.3628%" y="261" width="0.2655%" height="15" fill="rgb(226,22,26)" fg:x="603" fg:w="3"/><text x="53.6128%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (3 samples, 0.27%)</title><rect x="53.3628%" y="245" width="0.2655%" height="15" fill="rgb(217,163,10)" fg:x="603" fg:w="3"/><text x="53.6128%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::{{closure}} (2 samples, 0.18%)</title><rect x="53.4513%" y="229" width="0.1770%" height="15" fill="rgb(213,25,53)" fg:x="604" fg:w="2"/><text x="53.7013%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (1 samples, 0.09%)</title><rect x="53.5398%" y="213" width="0.0885%" height="15" fill="rgb(252,105,26)" fg:x="605" fg:w="1"/><text x="53.7898%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (1 samples, 0.09%)</title><rect x="53.5398%" y="197" width="0.0885%" height="15" fill="rgb(220,39,43)" fg:x="605" fg:w="1"/><text x="53.7898%" y="207.50"></text></g><g><title>revm::instructions::i256::i256_cmp (8 samples, 0.71%)</title><rect x="53.3628%" y="293" width="0.7080%" height="15" fill="rgb(229,68,48)" fg:x="603" fg:w="8"/><text x="53.6128%" y="303.50"></text></g><g><title>revm::instructions::i256::i256_sign (5 samples, 0.44%)</title><rect x="53.6283%" y="277" width="0.4425%" height="15" fill="rgb(252,8,32)" fg:x="606" fg:w="5"/><text x="53.8783%" y="287.50"></text></g><g><title>primitive_types::U256::is_zero (2 samples, 0.18%)</title><rect x="53.8938%" y="261" width="0.1770%" height="15" fill="rgb(223,20,43)" fg:x="609" fg:w="2"/><text x="54.1438%" y="271.50"></text></g><g><title>revm::instructions::bitwise::slt (18 samples, 1.59%)</title><rect x="52.8319%" y="309" width="1.5929%" height="15" fill="rgb(229,81,49)" fg:x="597" fg:w="18"/><text x="53.0819%" y="319.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (4 samples, 0.35%)</title><rect x="54.0708%" y="293" width="0.3540%" height="15" fill="rgb(236,28,36)" fg:x="611" fg:w="4"/><text x="54.3208%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.09%)</title><rect x="54.8673%" y="261" width="0.0885%" height="15" fill="rgb(249,185,26)" fg:x="620" fg:w="1"/><text x="55.1173%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.09%)</title><rect x="54.8673%" y="245" width="0.0885%" height="15" fill="rgb(249,174,33)" fg:x="620" fg:w="1"/><text x="55.1173%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.09%)</title><rect x="54.8673%" y="229" width="0.0885%" height="15" fill="rgb(233,201,37)" fg:x="620" fg:w="1"/><text x="55.1173%" y="239.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (9 samples, 0.80%)</title><rect x="54.8673%" y="293" width="0.7965%" height="15" fill="rgb(221,78,26)" fg:x="620" fg:w="9"/><text x="55.1173%" y="303.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (9 samples, 0.80%)</title><rect x="54.8673%" y="277" width="0.7965%" height="15" fill="rgb(250,127,30)" fg:x="620" fg:w="9"/><text x="55.1173%" y="287.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (8 samples, 0.71%)</title><rect x="54.9558%" y="261" width="0.7080%" height="15" fill="rgb(230,49,44)" fg:x="621" fg:w="8"/><text x="55.2058%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.09%)</title><rect x="55.6637%" y="277" width="0.0885%" height="15" fill="rgb(229,67,23)" fg:x="629" fg:w="1"/><text x="55.9137%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.09%)</title><rect x="55.6637%" y="261" width="0.0885%" height="15" fill="rgb(249,83,47)" fg:x="629" fg:w="1"/><text x="55.9137%" y="271.50"></text></g><g><title>revm::instructions::control::jump (16 samples, 1.42%)</title><rect x="54.4248%" y="309" width="1.4159%" height="15" fill="rgb(215,43,3)" fg:x="615" fg:w="16"/><text x="54.6748%" y="319.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (2 samples, 0.18%)</title><rect x="55.6637%" y="293" width="0.1770%" height="15" fill="rgb(238,154,13)" fg:x="629" fg:w="2"/><text x="55.9137%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.09%)</title><rect x="55.7522%" y="277" width="0.0885%" height="15" fill="rgb(219,56,2)" fg:x="630" fg:w="1"/><text x="56.0022%" y="287.50"></text></g><g><title>revm::gas::Gas::record_cost (9 samples, 0.80%)</title><rect x="56.0177%" y="277" width="0.7965%" height="15" fill="rgb(233,0,4)" fg:x="633" fg:w="9"/><text x="56.2677%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.09%)</title><rect x="56.7257%" y="261" width="0.0885%" height="15" fill="rgb(235,30,7)" fg:x="641" fg:w="1"/><text x="56.9757%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.18%)</title><rect x="56.9912%" y="229" width="0.1770%" height="15" fill="rgb(250,79,13)" fg:x="644" fg:w="2"/><text x="57.2412%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.18%)</title><rect x="56.9912%" y="213" width="0.1770%" height="15" fill="rgb(211,146,34)" fg:x="644" fg:w="2"/><text x="57.2412%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.44%)</title><rect x="56.9912%" y="245" width="0.4425%" height="15" fill="rgb(228,22,38)" fg:x="644" fg:w="5"/><text x="57.2412%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.27%)</title><rect x="57.1681%" y="229" width="0.2655%" height="15" fill="rgb(235,168,5)" fg:x="646" fg:w="3"/><text x="57.4181%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.27%)</title><rect x="57.1681%" y="213" width="0.2655%" height="15" fill="rgb(221,155,16)" fg:x="646" fg:w="3"/><text x="57.4181%" y="223.50"></text></g><g><title>revm::instructions::control::jumpdest (21 samples, 1.86%)</title><rect x="55.8407%" y="309" width="1.8584%" height="15" fill="rgb(215,215,53)" fg:x="631" fg:w="21"/><text x="56.0907%" y="319.50">r..</text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (19 samples, 1.68%)</title><rect x="56.0177%" y="293" width="1.6814%" height="15" fill="rgb(223,4,10)" fg:x="633" fg:w="19"/><text x="56.2677%" y="303.50"></text></g><g><title>revm::interpreter::contract::Contract::gas_block (10 samples, 0.88%)</title><rect x="56.8142%" y="277" width="0.8850%" height="15" fill="rgb(234,103,6)" fg:x="642" fg:w="10"/><text x="57.0642%" y="287.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::gas_block (10 samples, 0.88%)</title><rect x="56.8142%" y="261" width="0.8850%" height="15" fill="rgb(227,97,0)" fg:x="642" fg:w="10"/><text x="57.0642%" y="271.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::gas_block (3 samples, 0.27%)</title><rect x="57.4336%" y="245" width="0.2655%" height="15" fill="rgb(234,150,53)" fg:x="649" fg:w="3"/><text x="57.6836%" y="255.50"></text></g><g><title>primitive_types::U256::is_zero (1 samples, 0.09%)</title><rect x="58.0531%" y="293" width="0.0885%" height="15" fill="rgb(228,201,54)" fg:x="656" fg:w="1"/><text x="58.3031%" y="303.50"></text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (1 samples, 0.09%)</title><rect x="58.1416%" y="293" width="0.0885%" height="15" fill="rgb(222,22,37)" fg:x="657" fg:w="1"/><text x="58.3916%" y="303.50"></text></g><g><title>revm::gas::Gas::record_cost (1 samples, 0.09%)</title><rect x="58.1416%" y="277" width="0.0885%" height="15" fill="rgb(237,53,32)" fg:x="657" fg:w="1"/><text x="58.3916%" y="287.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (3 samples, 0.27%)</title><rect x="58.2301%" y="293" width="0.2655%" height="15" fill="rgb(233,25,53)" fg:x="658" fg:w="3"/><text x="58.4801%" y="303.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (3 samples, 0.27%)</title><rect x="58.2301%" y="277" width="0.2655%" height="15" fill="rgb(210,40,34)" fg:x="658" fg:w="3"/><text x="58.4801%" y="287.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (3 samples, 0.27%)</title><rect x="58.2301%" y="261" width="0.2655%" height="15" fill="rgb(241,220,44)" fg:x="658" fg:w="3"/><text x="58.4801%" y="271.50"></text></g><g><title>revm::instructions::control::jumpi (13 samples, 1.15%)</title><rect x="57.6991%" y="309" width="1.1504%" height="15" fill="rgb(235,28,35)" fg:x="652" fg:w="13"/><text x="57.9491%" y="319.50"></text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (4 samples, 0.35%)</title><rect x="58.4956%" y="293" width="0.3540%" height="15" fill="rgb(210,56,17)" fg:x="661" fg:w="4"/><text x="58.7456%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.18%)</title><rect x="58.6726%" y="277" width="0.1770%" height="15" fill="rgb(224,130,29)" fg:x="663" fg:w="2"/><text x="58.9226%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.18%)</title><rect x="58.6726%" y="261" width="0.1770%" height="15" fill="rgb(235,212,8)" fg:x="663" fg:w="2"/><text x="58.9226%" y="271.50"></text></g><g><title>&lt;primitive_types::U256 as core::clone::Clone&gt;::clone (1 samples, 0.09%)</title><rect x="59.8230%" y="277" width="0.0885%" height="15" fill="rgb(223,33,50)" fg:x="676" fg:w="1"/><text x="60.0730%" y="287.50"></text></g><g><title>ahash::operations::folded_multiply (4 samples, 0.35%)</title><rect x="59.9115%" y="229" width="0.3540%" height="15" fill="rgb(219,149,13)" fg:x="677" fg:w="4"/><text x="60.1615%" y="239.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (4 samples, 0.35%)</title><rect x="59.9115%" y="213" width="0.3540%" height="15" fill="rgb(250,156,29)" fg:x="677" fg:w="4"/><text x="60.1615%" y="223.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (6 samples, 0.53%)</title><rect x="59.9115%" y="245" width="0.5310%" height="15" fill="rgb(216,193,19)" fg:x="677" fg:w="6"/><text x="60.1615%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.18%)</title><rect x="60.2655%" y="229" width="0.1770%" height="15" fill="rgb(216,135,14)" fg:x="681" fg:w="2"/><text x="60.5155%" y="239.50"></text></g><g><title>hashbrown::map::make_insert_hash (14 samples, 1.24%)</title><rect x="59.9115%" y="261" width="1.2389%" height="15" fill="rgb(241,47,5)" fg:x="677" fg:w="14"/><text x="60.1615%" y="271.50"></text></g><g><title>&lt;primitive_types::U256 as core::hash::Hash&gt;::hash (8 samples, 0.71%)</title><rect x="60.4425%" y="245" width="0.7080%" height="15" fill="rgb(233,42,35)" fg:x="683" fg:w="8"/><text x="60.6925%" y="255.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (8 samples, 0.71%)</title><rect x="60.4425%" y="229" width="0.7080%" height="15" fill="rgb(231,13,6)" fg:x="683" fg:w="8"/><text x="60.6925%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (8 samples, 0.71%)</title><rect x="60.4425%" y="213" width="0.7080%" height="15" fill="rgb(207,181,40)" fg:x="683" fg:w="8"/><text x="60.6925%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (8 samples, 0.71%)</title><rect x="60.4425%" y="197" width="0.7080%" height="15" fill="rgb(254,173,49)" fg:x="683" fg:w="8"/><text x="60.6925%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (8 samples, 0.71%)</title><rect x="60.4425%" y="181" width="0.7080%" height="15" fill="rgb(221,1,38)" fg:x="683" fg:w="8"/><text x="60.6925%" y="191.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (8 samples, 0.71%)</title><rect x="60.4425%" y="165" width="0.7080%" height="15" fill="rgb(206,124,46)" fg:x="683" fg:w="8"/><text x="60.6925%" y="175.50"></text></g><g><title>ahash::operations::folded_multiply (8 samples, 0.71%)</title><rect x="60.4425%" y="149" width="0.7080%" height="15" fill="rgb(249,21,11)" fg:x="683" fg:w="8"/><text x="60.6925%" y="159.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (6 samples, 0.53%)</title><rect x="60.6195%" y="133" width="0.5310%" height="15" fill="rgb(222,201,40)" fg:x="685" fg:w="6"/><text x="60.8695%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.18%)</title><rect x="61.1504%" y="245" width="0.1770%" height="15" fill="rgb(235,61,29)" fg:x="691" fg:w="2"/><text x="61.4004%" y="255.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.18%)</title><rect x="61.1504%" y="229" width="0.1770%" height="15" fill="rgb(219,207,3)" fg:x="691" fg:w="2"/><text x="61.4004%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.18%)</title><rect x="61.1504%" y="213" width="0.1770%" height="15" fill="rgb(222,56,46)" fg:x="691" fg:w="2"/><text x="61.4004%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.18%)</title><rect x="61.5044%" y="229" width="0.1770%" height="15" fill="rgb(239,76,54)" fg:x="695" fg:w="2"/><text x="61.7544%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.18%)</title><rect x="61.5044%" y="213" width="0.1770%" height="15" fill="rgb(231,124,27)" fg:x="695" fg:w="2"/><text x="61.7544%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (10 samples, 0.88%)</title><rect x="61.6814%" y="213" width="0.8850%" height="15" fill="rgb(249,195,6)" fg:x="697" fg:w="10"/><text x="61.9314%" y="223.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::PartialEq&gt;::eq (10 samples, 0.88%)</title><rect x="61.6814%" y="197" width="0.8850%" height="15" fill="rgb(237,174,47)" fg:x="697" fg:w="10"/><text x="61.9314%" y="207.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (10 samples, 0.88%)</title><rect x="61.6814%" y="181" width="0.8850%" height="15" fill="rgb(206,201,31)" fg:x="697" fg:w="10"/><text x="61.9314%" y="191.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (10 samples, 0.88%)</title><rect x="61.6814%" y="165" width="0.8850%" height="15" fill="rgb(231,57,52)" fg:x="697" fg:w="10"/><text x="61.9314%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (12 samples, 1.06%)</title><rect x="61.6814%" y="229" width="1.0619%" height="15" fill="rgb(248,177,22)" fg:x="697" fg:w="12"/><text x="61.9314%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.18%)</title><rect x="62.5664%" y="213" width="0.1770%" height="15" fill="rgb(215,211,37)" fg:x="707" fg:w="2"/><text x="62.8164%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.18%)</title><rect x="62.5664%" y="197" width="0.1770%" height="15" fill="rgb(241,128,51)" fg:x="707" fg:w="2"/><text x="62.8164%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.18%)</title><rect x="62.5664%" y="181" width="0.1770%" height="15" fill="rgb(227,165,31)" fg:x="707" fg:w="2"/><text x="62.8164%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.18%)</title><rect x="62.5664%" y="165" width="0.1770%" height="15" fill="rgb(228,167,24)" fg:x="707" fg:w="2"/><text x="62.8164%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (3 samples, 0.27%)</title><rect x="62.7434%" y="229" width="0.2655%" height="15" fill="rgb(228,143,12)" fg:x="709" fg:w="3"/><text x="62.9934%" y="239.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.09%)</title><rect x="63.0088%" y="229" width="0.0885%" height="15" fill="rgb(249,149,8)" fg:x="712" fg:w="1"/><text x="63.2588%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.09%)</title><rect x="63.0088%" y="213" width="0.0885%" height="15" fill="rgb(243,35,44)" fg:x="712" fg:w="1"/><text x="63.2588%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.09%)</title><rect x="63.0088%" y="197" width="0.0885%" height="15" fill="rgb(246,89,9)" fg:x="712" fg:w="1"/><text x="63.2588%" y="207.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (42 samples, 3.72%)</title><rect x="59.5575%" y="293" width="3.7168%" height="15" fill="rgb(233,213,13)" fg:x="673" fg:w="42"/><text x="59.8075%" y="303.50">&lt;rev..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (38 samples, 3.36%)</title><rect x="59.9115%" y="277" width="3.3628%" height="15" fill="rgb(233,141,41)" fg:x="677" fg:w="38"/><text x="60.1615%" y="287.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (24 samples, 2.12%)</title><rect x="61.1504%" y="261" width="2.1239%" height="15" fill="rgb(239,167,4)" fg:x="691" fg:w="24"/><text x="61.4004%" y="271.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (22 samples, 1.95%)</title><rect x="61.3274%" y="245" width="1.9469%" height="15" fill="rgb(209,217,16)" fg:x="693" fg:w="22"/><text x="61.5774%" y="255.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.18%)</title><rect x="63.0973%" y="229" width="0.1770%" height="15" fill="rgb(219,88,35)" fg:x="713" fg:w="2"/><text x="63.3473%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.18%)</title><rect x="63.0973%" y="213" width="0.1770%" height="15" fill="rgb(220,193,23)" fg:x="713" fg:w="2"/><text x="63.3473%" y="223.50"></text></g><g><title>revm::instructions::host::sload (51 samples, 4.51%)</title><rect x="58.8496%" y="309" width="4.5133%" height="15" fill="rgb(230,90,52)" fg:x="665" fg:w="51"/><text x="59.0996%" y="319.50">revm:..</text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (1 samples, 0.09%)</title><rect x="63.2743%" y="293" width="0.0885%" height="15" fill="rgb(252,106,19)" fg:x="715" fg:w="1"/><text x="63.5243%" y="303.50"></text></g><g><title>revm::instructions::host::sstore (1 samples, 0.09%)</title><rect x="63.3628%" y="309" width="0.0885%" height="15" fill="rgb(206,74,20)" fg:x="716" fg:w="1"/><text x="63.6128%" y="319.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (4 samples, 0.35%)</title><rect x="63.9823%" y="277" width="0.3540%" height="15" fill="rgb(230,138,44)" fg:x="723" fg:w="4"/><text x="64.2323%" y="287.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (4 samples, 0.35%)</title><rect x="63.9823%" y="261" width="0.3540%" height="15" fill="rgb(235,182,43)" fg:x="723" fg:w="4"/><text x="64.2323%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (4 samples, 0.35%)</title><rect x="63.9823%" y="245" width="0.3540%" height="15" fill="rgb(242,16,51)" fg:x="723" fg:w="4"/><text x="64.2323%" y="255.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (4 samples, 0.35%)</title><rect x="63.9823%" y="229" width="0.3540%" height="15" fill="rgb(248,9,4)" fg:x="723" fg:w="4"/><text x="64.2323%" y="239.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u64 (9 samples, 0.80%)</title><rect x="63.9823%" y="293" width="0.7965%" height="15" fill="rgb(210,31,22)" fg:x="723" fg:w="9"/><text x="64.2323%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (5 samples, 0.44%)</title><rect x="64.3363%" y="277" width="0.4425%" height="15" fill="rgb(239,54,39)" fg:x="727" fg:w="5"/><text x="64.5863%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (5 samples, 0.44%)</title><rect x="64.3363%" y="261" width="0.4425%" height="15" fill="rgb(230,99,41)" fg:x="727" fg:w="5"/><text x="64.5863%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (5 samples, 0.44%)</title><rect x="64.3363%" y="245" width="0.4425%" height="15" fill="rgb(253,106,12)" fg:x="727" fg:w="5"/><text x="64.5863%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (3 samples, 0.27%)</title><rect x="64.7788%" y="293" width="0.2655%" height="15" fill="rgb(213,46,41)" fg:x="732" fg:w="3"/><text x="65.0288%" y="303.50"></text></g><g><title>revm::interpreter::memory::Memory::get_slice (3 samples, 0.27%)</title><rect x="65.0442%" y="293" width="0.2655%" height="15" fill="rgb(215,133,35)" fg:x="735" fg:w="3"/><text x="65.2942%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.18%)</title><rect x="65.1327%" y="277" width="0.1770%" height="15" fill="rgb(213,28,5)" fg:x="736" fg:w="2"/><text x="65.3827%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.18%)</title><rect x="65.1327%" y="261" width="0.1770%" height="15" fill="rgb(215,77,49)" fg:x="736" fg:w="2"/><text x="65.3827%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.18%)</title><rect x="65.1327%" y="245" width="0.1770%" height="15" fill="rgb(248,100,22)" fg:x="736" fg:w="2"/><text x="65.3827%" y="255.50"></text></g><g><title>revm::interpreter::memory::next_multiple_of_32 (1 samples, 0.09%)</title><rect x="65.3097%" y="293" width="0.0885%" height="15" fill="rgb(208,67,9)" fg:x="738" fg:w="1"/><text x="65.5597%" y="303.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (1 samples, 0.09%)</title><rect x="65.3097%" y="277" width="0.0885%" height="15" fill="rgb(219,133,21)" fg:x="738" fg:w="1"/><text x="65.5597%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (3 samples, 0.27%)</title><rect x="65.3982%" y="293" width="0.2655%" height="15" fill="rgb(246,46,29)" fg:x="739" fg:w="3"/><text x="65.6482%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.18%)</title><rect x="65.4867%" y="277" width="0.1770%" height="15" fill="rgb(246,185,52)" fg:x="740" fg:w="2"/><text x="65.7367%" y="287.50"></text></g><g><title>revm::instructions::memory::mload (31 samples, 2.74%)</title><rect x="63.4513%" y="309" width="2.7434%" height="15" fill="rgb(252,136,11)" fg:x="717" fg:w="31"/><text x="63.7013%" y="319.50">re..</text></g><g><title>revm::interpreter::stack::Stack::push (6 samples, 0.53%)</title><rect x="65.6637%" y="293" width="0.5310%" height="15" fill="rgb(219,138,53)" fg:x="742" fg:w="6"/><text x="65.9137%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 0.53%)</title><rect x="65.6637%" y="277" width="0.5310%" height="15" fill="rgb(211,51,23)" fg:x="742" fg:w="6"/><text x="65.9137%" y="287.50"></text></g><g><title>core::ptr::write (3 samples, 0.27%)</title><rect x="65.9292%" y="261" width="0.2655%" height="15" fill="rgb(247,221,28)" fg:x="745" fg:w="3"/><text x="66.1792%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (1 samples, 0.09%)</title><rect x="67.2566%" y="293" width="0.0885%" height="15" fill="rgb(251,222,45)" fg:x="760" fg:w="1"/><text x="67.5066%" y="303.50"></text></g><g><title>revm::gas::Gas::record_memory (4 samples, 0.35%)</title><rect x="67.3451%" y="293" width="0.3540%" height="15" fill="rgb(217,162,53)" fg:x="761" fg:w="4"/><text x="67.5951%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.09%)</title><rect x="67.6106%" y="277" width="0.0885%" height="15" fill="rgb(229,93,14)" fg:x="764" fg:w="1"/><text x="67.8606%" y="287.50"></text></g><g><title>revm::gas::calc::memory_gas (1 samples, 0.09%)</title><rect x="67.6991%" y="293" width="0.0885%" height="15" fill="rgb(209,67,49)" fg:x="765" fg:w="1"/><text x="67.9491%" y="303.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (13 samples, 1.15%)</title><rect x="67.7876%" y="293" width="1.1504%" height="15" fill="rgb(213,87,29)" fg:x="766" fg:w="13"/><text x="68.0376%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (13 samples, 1.15%)</title><rect x="67.7876%" y="277" width="1.1504%" height="15" fill="rgb(205,151,52)" fg:x="766" fg:w="13"/><text x="68.0376%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 1.15%)</title><rect x="67.7876%" y="261" width="1.1504%" height="15" fill="rgb(253,215,39)" fg:x="766" fg:w="13"/><text x="68.0376%" y="271.50"></text></g><g><title>core::ptr::write (13 samples, 1.15%)</title><rect x="67.7876%" y="245" width="1.1504%" height="15" fill="rgb(221,220,41)" fg:x="766" fg:w="13"/><text x="68.0376%" y="255.50"></text></g><g><title>__memset_avx2_erms (13 samples, 1.15%)</title><rect x="67.7876%" y="229" width="1.1504%" height="15" fill="rgb(218,133,21)" fg:x="766" fg:w="13"/><text x="68.0376%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="68.6726%" y="213" width="0.2655%" height="15" fill="rgb(221,193,43)" fg:x="776" fg:w="3"/><text x="68.9226%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="68.6726%" y="197" width="0.2655%" height="15" fill="rgb(240,128,52)" fg:x="776" fg:w="3"/><text x="68.9226%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="68.6726%" y="181" width="0.2655%" height="15" fill="rgb(253,114,12)" fg:x="776" fg:w="3"/><text x="68.9226%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="68.6726%" y="165" width="0.2655%" height="15" fill="rgb(215,223,47)" fg:x="776" fg:w="3"/><text x="68.9226%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="68.6726%" y="149" width="0.2655%" height="15" fill="rgb(248,225,23)" fg:x="776" fg:w="3"/><text x="68.9226%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="68.6726%" y="133" width="0.2655%" height="15" fill="rgb(250,108,0)" fg:x="776" fg:w="3"/><text x="68.9226%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="68.6726%" y="117" width="0.2655%" height="15" fill="rgb(228,208,7)" fg:x="776" fg:w="3"/><text x="68.9226%" y="127.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="68.6726%" y="101" width="0.2655%" height="15" fill="rgb(244,45,10)" fg:x="776" fg:w="3"/><text x="68.9226%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.27%)</title><rect x="68.6726%" y="85" width="0.2655%" height="15" fill="rgb(207,125,25)" fg:x="776" fg:w="3"/><text x="68.9226%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="68.7611%" y="69" width="0.1770%" height="15" fill="rgb(210,195,18)" fg:x="777" fg:w="2"/><text x="69.0111%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="68.8496%" y="53" width="0.0885%" height="15" fill="rgb(249,80,12)" fg:x="778" fg:w="1"/><text x="69.0996%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="68.8496%" y="37" width="0.0885%" height="15" fill="rgb(221,65,9)" fg:x="778" fg:w="1"/><text x="69.0996%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.18%)</title><rect x="69.0265%" y="277" width="0.1770%" height="15" fill="rgb(235,49,36)" fg:x="780" fg:w="2"/><text x="69.2765%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.18%)</title><rect x="69.0265%" y="261" width="0.1770%" height="15" fill="rgb(225,32,20)" fg:x="780" fg:w="2"/><text x="69.2765%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.18%)</title><rect x="69.0265%" y="245" width="0.1770%" height="15" fill="rgb(215,141,46)" fg:x="780" fg:w="2"/><text x="69.2765%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_be_bytes (7 samples, 0.62%)</title><rect x="69.2035%" y="277" width="0.6195%" height="15" fill="rgb(250,160,47)" fg:x="782" fg:w="7"/><text x="69.4535%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_be (7 samples, 0.62%)</title><rect x="69.2035%" y="261" width="0.6195%" height="15" fill="rgb(216,222,40)" fg:x="782" fg:w="7"/><text x="69.4535%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (7 samples, 0.62%)</title><rect x="69.2035%" y="245" width="0.6195%" height="15" fill="rgb(234,217,39)" fg:x="782" fg:w="7"/><text x="69.4535%" y="255.50"></text></g><g><title>revm::interpreter::memory::Memory::set_u256 (16 samples, 1.42%)</title><rect x="68.9381%" y="293" width="1.4159%" height="15" fill="rgb(207,178,40)" fg:x="779" fg:w="16"/><text x="69.1881%" y="303.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (6 samples, 0.53%)</title><rect x="69.8230%" y="277" width="0.5310%" height="15" fill="rgb(221,136,13)" fg:x="789" fg:w="6"/><text x="70.0730%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.53%)</title><rect x="69.8230%" y="261" width="0.5310%" height="15" fill="rgb(249,199,10)" fg:x="789" fg:w="6"/><text x="70.0730%" y="271.50"></text></g><g><title>revm::interpreter::memory::next_multiple_of_32 (2 samples, 0.18%)</title><rect x="70.3540%" y="293" width="0.1770%" height="15" fill="rgb(249,222,13)" fg:x="795" fg:w="2"/><text x="70.6040%" y="303.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (2 samples, 0.18%)</title><rect x="70.3540%" y="277" width="0.1770%" height="15" fill="rgb(244,185,38)" fg:x="795" fg:w="2"/><text x="70.6040%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.09%)</title><rect x="70.6195%" y="277" width="0.0885%" height="15" fill="rgb(236,202,9)" fg:x="798" fg:w="1"/><text x="70.8695%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.09%)</title><rect x="70.6195%" y="261" width="0.0885%" height="15" fill="rgb(250,229,37)" fg:x="798" fg:w="1"/><text x="70.8695%" y="271.50"></text></g><g><title>revm::instructions::memory::mstore (52 samples, 4.60%)</title><rect x="66.1947%" y="309" width="4.6018%" height="15" fill="rgb(206,174,23)" fg:x="748" fg:w="52"/><text x="66.4447%" y="319.50">revm:..</text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (3 samples, 0.27%)</title><rect x="70.5310%" y="293" width="0.2655%" height="15" fill="rgb(211,33,43)" fg:x="797" fg:w="3"/><text x="70.7810%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.09%)</title><rect x="70.7080%" y="277" width="0.0885%" height="15" fill="rgb(245,58,50)" fg:x="799" fg:w="1"/><text x="70.9580%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (22 samples, 1.95%)</title><rect x="73.3628%" y="277" width="1.9469%" height="15" fill="rgb(244,68,36)" fg:x="829" fg:w="22"/><text x="73.6128%" y="287.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (22 samples, 1.95%)</title><rect x="73.3628%" y="261" width="1.9469%" height="15" fill="rgb(232,229,15)" fg:x="829" fg:w="22"/><text x="73.6128%" y="271.50">a..</text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="74.8673%" y="245" width="0.4425%" height="15" fill="rgb(254,30,23)" fg:x="846" fg:w="5"/><text x="75.1173%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="74.8673%" y="229" width="0.4425%" height="15" fill="rgb(235,160,14)" fg:x="846" fg:w="5"/><text x="75.1173%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="74.8673%" y="213" width="0.4425%" height="15" fill="rgb(212,155,44)" fg:x="846" fg:w="5"/><text x="75.1173%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="74.8673%" y="197" width="0.4425%" height="15" fill="rgb(226,2,50)" fg:x="846" fg:w="5"/><text x="75.1173%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="74.8673%" y="181" width="0.4425%" height="15" fill="rgb(234,177,6)" fg:x="846" fg:w="5"/><text x="75.1173%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="74.8673%" y="165" width="0.4425%" height="15" fill="rgb(217,24,9)" fg:x="846" fg:w="5"/><text x="75.1173%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="74.8673%" y="149" width="0.4425%" height="15" fill="rgb(220,13,46)" fg:x="846" fg:w="5"/><text x="75.1173%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="74.8673%" y="133" width="0.4425%" height="15" fill="rgb(239,221,27)" fg:x="846" fg:w="5"/><text x="75.1173%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.44%)</title><rect x="74.8673%" y="117" width="0.4425%" height="15" fill="rgb(222,198,25)" fg:x="846" fg:w="5"/><text x="75.1173%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.35%)</title><rect x="74.9558%" y="101" width="0.3540%" height="15" fill="rgb(211,99,13)" fg:x="847" fg:w="4"/><text x="75.2058%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.35%)</title><rect x="74.9558%" y="85" width="0.3540%" height="15" fill="rgb(232,111,31)" fg:x="847" fg:w="4"/><text x="75.2058%" y="95.50"></text></g><g><title>[unknown] (4 samples, 0.35%)</title><rect x="74.9558%" y="69" width="0.3540%" height="15" fill="rgb(245,82,37)" fg:x="847" fg:w="4"/><text x="75.2058%" y="79.50"></text></g><g><title>[unknown] (4 samples, 0.35%)</title><rect x="74.9558%" y="53" width="0.3540%" height="15" fill="rgb(227,149,46)" fg:x="847" fg:w="4"/><text x="75.2058%" y="63.50"></text></g><g><title>revm::instructions::stack::dup (98 samples, 8.67%)</title><rect x="70.7965%" y="309" width="8.6726%" height="15" fill="rgb(218,36,50)" fg:x="800" fg:w="98"/><text x="71.0465%" y="319.50">revm::instru..</text></g><g><title>revm::interpreter::stack::Stack::dup (92 samples, 8.14%)</title><rect x="71.3274%" y="293" width="8.1416%" height="15" fill="rgb(226,80,48)" fg:x="806" fg:w="92"/><text x="71.5774%" y="303.50">revm::inter..</text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 4.16%)</title><rect x="75.3097%" y="277" width="4.1593%" height="15" fill="rgb(238,224,15)" fg:x="851" fg:w="47"/><text x="75.5597%" y="287.50">core:..</text></g><g><title>revm::instructions::stack::pop (10 samples, 0.88%)</title><rect x="79.4690%" y="309" width="0.8850%" height="15" fill="rgb(241,136,10)" fg:x="898" fg:w="10"/><text x="79.7190%" y="319.50"></text></g><g><title>revm::interpreter::stack::Stack::reduce_one (7 samples, 0.62%)</title><rect x="79.7345%" y="293" width="0.6195%" height="15" fill="rgb(208,32,45)" fg:x="901" fg:w="7"/><text x="79.9845%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (7 samples, 0.62%)</title><rect x="79.7345%" y="277" width="0.6195%" height="15" fill="rgb(207,135,9)" fg:x="901" fg:w="7"/><text x="79.9845%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.18%)</title><rect x="80.8850%" y="293" width="0.1770%" height="15" fill="rgb(206,86,44)" fg:x="914" fg:w="2"/><text x="81.1350%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.18%)</title><rect x="80.8850%" y="277" width="0.1770%" height="15" fill="rgb(245,177,15)" fg:x="914" fg:w="2"/><text x="81.1350%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (3 samples, 0.27%)</title><rect x="84.2478%" y="277" width="0.2655%" height="15" fill="rgb(206,64,50)" fg:x="952" fg:w="3"/><text x="84.4978%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (4 samples, 0.35%)</title><rect x="84.5133%" y="277" width="0.3540%" height="15" fill="rgb(234,36,40)" fg:x="955" fg:w="4"/><text x="84.7633%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (4 samples, 0.35%)</title><rect x="84.5133%" y="261" width="0.3540%" height="15" fill="rgb(213,64,8)" fg:x="955" fg:w="4"/><text x="84.7633%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (4 samples, 0.35%)</title><rect x="84.5133%" y="245" width="0.3540%" height="15" fill="rgb(210,75,36)" fg:x="955" fg:w="4"/><text x="84.7633%" y="255.50"></text></g><g><title>revm::instructions::stack::push (54 samples, 4.78%)</title><rect x="80.3540%" y="309" width="4.7788%" height="15" fill="rgb(229,88,21)" fg:x="908" fg:w="54"/><text x="80.6040%" y="319.50">revm::..</text></g><g><title>revm::interpreter::stack::Stack::push_slice (46 samples, 4.07%)</title><rect x="81.0619%" y="293" width="4.0708%" height="15" fill="rgb(252,204,47)" fg:x="916" fg:w="46"/><text x="81.3119%" y="303.50">revm..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.27%)</title><rect x="84.8673%" y="277" width="0.2655%" height="15" fill="rgb(208,77,27)" fg:x="959" fg:w="3"/><text x="85.1173%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.27%)</title><rect x="84.8673%" y="261" width="0.2655%" height="15" fill="rgb(221,76,26)" fg:x="959" fg:w="3"/><text x="85.1173%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.44%)</title><rect x="85.3097%" y="277" width="0.4425%" height="15" fill="rgb(225,139,18)" fg:x="964" fg:w="5"/><text x="85.5597%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (5 samples, 0.44%)</title><rect x="85.3097%" y="261" width="0.4425%" height="15" fill="rgb(230,137,11)" fg:x="964" fg:w="5"/><text x="85.5597%" y="271.50"></text></g><g><title>core::intrinsics::copy (8 samples, 0.71%)</title><rect x="85.7522%" y="261" width="0.7080%" height="15" fill="rgb(212,28,1)" fg:x="969" fg:w="8"/><text x="86.0022%" y="271.50"></text></g><g><title>revm::instructions::stack::swap (56 samples, 4.96%)</title><rect x="85.1327%" y="309" width="4.9558%" height="15" fill="rgb(248,164,17)" fg:x="962" fg:w="56"/><text x="85.3827%" y="319.50">revm::..</text></g><g><title>revm::interpreter::stack::Stack::swap (56 samples, 4.96%)</title><rect x="85.1327%" y="293" width="4.9558%" height="15" fill="rgb(222,171,42)" fg:x="962" fg:w="56"/><text x="85.3827%" y="303.50">revm::..</text></g><g><title>core::ptr::swap (49 samples, 4.34%)</title><rect x="85.7522%" y="277" width="4.3363%" height="15" fill="rgb(243,84,45)" fg:x="969" fg:w="49"/><text x="86.0022%" y="287.50">core:..</text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 3.63%)</title><rect x="86.4602%" y="261" width="3.6283%" height="15" fill="rgb(252,49,23)" fg:x="977" fg:w="41"/><text x="86.7102%" y="271.50">core..</text></g><g><title>&lt;tiny_keccak::sha3::Sha3 as tiny_keccak::Hasher&gt;::finalize (71 samples, 6.28%)</title><rect x="90.1770%" y="293" width="6.2832%" height="15" fill="rgb(215,19,7)" fg:x="1019" fg:w="71"/><text x="90.4270%" y="303.50">&lt;tiny_ke..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::finalize (71 samples, 6.28%)</title><rect x="90.1770%" y="277" width="6.2832%" height="15" fill="rgb(238,81,41)" fg:x="1019" fg:w="71"/><text x="90.4270%" y="287.50">tiny_kec..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::squeeze (71 samples, 6.28%)</title><rect x="90.1770%" y="261" width="6.2832%" height="15" fill="rgb(210,199,37)" fg:x="1019" fg:w="71"/><text x="90.4270%" y="271.50">tiny_kec..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::fill_block (70 samples, 6.19%)</title><rect x="90.2655%" y="245" width="6.1947%" height="15" fill="rgb(244,192,49)" fg:x="1020" fg:w="70"/><text x="90.5155%" y="255.50">tiny_kec..</text></g><g><title>tiny_keccak::KeccakState&lt;P&gt;::keccak (70 samples, 6.19%)</title><rect x="90.2655%" y="229" width="6.1947%" height="15" fill="rgb(226,211,11)" fg:x="1020" fg:w="70"/><text x="90.5155%" y="239.50">tiny_kec..</text></g><g><title>&lt;tiny_keccak::keccakf::KeccakF as tiny_keccak::Permutation&gt;::execute (70 samples, 6.19%)</title><rect x="90.2655%" y="213" width="6.1947%" height="15" fill="rgb(236,162,54)" fg:x="1020" fg:w="70"/><text x="90.5155%" y="223.50">&lt;tiny_ke..</text></g><g><title>tiny_keccak::keccakf::keccakf (70 samples, 6.19%)</title><rect x="90.2655%" y="197" width="6.1947%" height="15" fill="rgb(220,229,9)" fg:x="1020" fg:w="70"/><text x="90.5155%" y="207.50">tiny_kec..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (14 samples, 1.24%)</title><rect x="95.2212%" y="181" width="1.2389%" height="15" fill="rgb(250,87,22)" fg:x="1076" fg:w="14"/><text x="95.4712%" y="191.50"></text></g><g><title>&lt;tiny_keccak::sha3::Sha3 as tiny_keccak::Hasher&gt;::update (1 samples, 0.09%)</title><rect x="96.4602%" y="293" width="0.0885%" height="15" fill="rgb(239,43,17)" fg:x="1090" fg:w="1"/><text x="96.7102%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 0.53%)</title><rect x="96.5487%" y="293" width="0.5310%" height="15" fill="rgb(231,177,25)" fg:x="1091" fg:w="6"/><text x="96.7987%" y="303.50"></text></g><g><title>revm::instructions::system::sha3 (80 samples, 7.08%)</title><rect x="90.0885%" y="309" width="7.0796%" height="15" fill="rgb(219,179,1)" fg:x="1018" fg:w="80"/><text x="90.3385%" y="319.50">revm::ins..</text></g><g><title>revm::interpreter::stack::Stack::push_h256 (1 samples, 0.09%)</title><rect x="97.0796%" y="293" width="0.0885%" height="15" fill="rgb(238,219,53)" fg:x="1097" fg:w="1"/><text x="97.3296%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.09%)</title><rect x="97.0796%" y="277" width="0.0885%" height="15" fill="rgb(232,167,36)" fg:x="1097" fg:w="1"/><text x="97.3296%" y="287.50"></text></g><g><title>core::ptr::write (1 samples, 0.09%)</title><rect x="97.0796%" y="261" width="0.0885%" height="15" fill="rgb(244,19,51)" fg:x="1097" fg:w="1"/><text x="97.3296%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (883 samples, 78.14%)</title><rect x="19.1150%" y="565" width="78.1416%" height="15" fill="rgb(224,6,22)" fg:x="216" fg:w="883"/><text x="19.3650%" y="575.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (883 samples, 78.14%)</title><rect x="19.1150%" y="549" width="78.1416%" height="15" fill="rgb(224,145,5)" fg:x="216" fg:w="883"/><text x="19.3650%" y="559.50">alloc::vec::Vec&lt;T,A&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (883 samples, 78.14%)</title><rect x="19.1150%" y="533" width="78.1416%" height="15" fill="rgb(234,130,49)" fg:x="216" fg:w="883"/><text x="19.3650%" y="543.50">&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (883 samples, 78.14%)</title><rect x="19.1150%" y="517" width="78.1416%" height="15" fill="rgb(254,6,2)" fg:x="216" fg:w="883"/><text x="19.3650%" y="527.50">core::iter::traits::iterator::Iterator::find_map</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (883 samples, 78.14%)</title><rect x="19.1150%" y="501" width="78.1416%" height="15" fill="rgb(208,96,46)" fg:x="216" fg:w="883"/><text x="19.3650%" y="511.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (883 samples, 78.14%)</title><rect x="19.1150%" y="485" width="78.1416%" height="15" fill="rgb(239,3,39)" fg:x="216" fg:w="883"/><text x="19.3650%" y="495.50">core::iter::traits::iterator::Iterator::try_fold</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (883 samples, 78.14%)</title><rect x="19.1150%" y="469" width="78.1416%" height="15" fill="rgb(233,210,1)" fg:x="216" fg:w="883"/><text x="19.3650%" y="479.50">&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (883 samples, 78.14%)</title><rect x="19.1150%" y="453" width="78.1416%" height="15" fill="rgb(244,137,37)" fg:x="216" fg:w="883"/><text x="19.3650%" y="463.50">core::iter::traits::iterator::Iterator::find_map::check::{{closure}}</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (883 samples, 78.14%)</title><rect x="19.1150%" y="437" width="78.1416%" height="15" fill="rgb(240,136,2)" fg:x="216" fg:w="883"/><text x="19.3650%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>microbench::measure_impl::{{closure}} (883 samples, 78.14%)</title><rect x="19.1150%" y="421" width="78.1416%" height="15" fill="rgb(239,18,37)" fg:x="216" fg:w="883"/><text x="19.3650%" y="431.50">microbench::measure_impl::{{closure}}</text></g><g><title>microbench::measure::{{closure}} (883 samples, 78.14%)</title><rect x="19.1150%" y="405" width="78.1416%" height="15" fill="rgb(218,185,22)" fg:x="216" fg:w="883"/><text x="19.3650%" y="415.50">microbench::measure::{{closure}}</text></g><g><title>snailtracer::simple_example::{{closure}} (883 samples, 78.14%)</title><rect x="19.1150%" y="389" width="78.1416%" height="15" fill="rgb(225,218,4)" fg:x="216" fg:w="883"/><text x="19.3650%" y="399.50">snailtracer::simple_example::{{closure}}</text></g><g><title>revm::evm::EVM&lt;DB&gt;::transact (883 samples, 78.14%)</title><rect x="19.1150%" y="373" width="78.1416%" height="15" fill="rgb(230,182,32)" fg:x="216" fg:w="883"/><text x="19.3650%" y="383.50">revm::evm::EVM&lt;DB&gt;::transact</text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact (883 samples, 78.14%)</title><rect x="19.1150%" y="357" width="78.1416%" height="15" fill="rgb(242,56,43)" fg:x="216" fg:w="883"/><text x="19.3650%" y="367.50">&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact</text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (883 samples, 78.14%)</title><rect x="19.1150%" y="341" width="78.1416%" height="15" fill="rgb(233,99,24)" fg:x="216" fg:w="883"/><text x="19.3650%" y="351.50">revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner</text></g><g><title>revm::interpreter::Interpreter::run (883 samples, 78.14%)</title><rect x="19.1150%" y="325" width="78.1416%" height="15" fill="rgb(234,209,42)" fg:x="216" fg:w="883"/><text x="19.3650%" y="335.50">revm::interpreter::Interpreter::run</text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (1 samples, 0.09%)</title><rect x="97.1681%" y="309" width="0.0885%" height="15" fill="rgb(227,7,12)" fg:x="1098" fg:w="1"/><text x="97.4181%" y="319.50"></text></g><g><title>revm::interpreter::contract::Contract::gas_block (1 samples, 0.09%)</title><rect x="97.1681%" y="293" width="0.0885%" height="15" fill="rgb(245,203,43)" fg:x="1098" fg:w="1"/><text x="97.4181%" y="303.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::gas_block (1 samples, 0.09%)</title><rect x="97.1681%" y="277" width="0.0885%" height="15" fill="rgb(238,205,33)" fg:x="1098" fg:w="1"/><text x="97.4181%" y="287.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::gas_block (1 samples, 0.09%)</title><rect x="97.1681%" y="261" width="0.0885%" height="15" fill="rgb(231,56,7)" fg:x="1098" fg:w="1"/><text x="97.4181%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::Interpreter&gt; (1 samples, 0.09%)</title><rect x="97.2566%" y="357" width="0.0885%" height="15" fill="rgb(244,186,29)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;revm::interpreter::memory::Memory&gt; (1 samples, 0.09%)</title><rect x="97.2566%" y="341" width="0.0885%" height="15" fill="rgb(234,111,31)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.09%)</title><rect x="97.2566%" y="325" width="0.0885%" height="15" fill="rgb(241,149,10)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.09%)</title><rect x="97.2566%" y="309" width="0.0885%" height="15" fill="rgb(249,206,44)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="97.2566%" y="293" width="0.0885%" height="15" fill="rgb(251,153,30)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.09%)</title><rect x="97.2566%" y="277" width="0.0885%" height="15" fill="rgb(239,152,38)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.09%)</title><rect x="97.2566%" y="261" width="0.0885%" height="15" fill="rgb(249,139,47)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="271.50"></text></g><g><title>__GI_munmap (1 samples, 0.09%)</title><rect x="97.2566%" y="245" width="0.0885%" height="15" fill="rgb(244,64,35)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="229" width="0.0885%" height="15" fill="rgb(216,46,15)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="213" width="0.0885%" height="15" fill="rgb(250,74,19)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="197" width="0.0885%" height="15" fill="rgb(249,42,33)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="181" width="0.0885%" height="15" fill="rgb(242,149,17)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="165" width="0.0885%" height="15" fill="rgb(244,29,21)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="149" width="0.0885%" height="15" fill="rgb(220,130,37)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="133" width="0.0885%" height="15" fill="rgb(211,67,2)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="117" width="0.0885%" height="15" fill="rgb(235,68,52)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="101" width="0.0885%" height="15" fill="rgb(246,142,3)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="85" width="0.0885%" height="15" fill="rgb(241,25,7)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="69" width="0.0885%" height="15" fill="rgb(242,119,39)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="97.2566%" y="53" width="0.0885%" height="15" fill="rgb(241,98,45)" fg:x="1099" fg:w="1"/><text x="97.5066%" y="63.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_add (2 samples, 0.18%)</title><rect x="97.6106%" y="341" width="0.1770%" height="15" fill="rgb(254,28,30)" fg:x="1103" fg:w="2"/><text x="97.8606%" y="351.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (1 samples, 0.09%)</title><rect x="97.6991%" y="325" width="0.0885%" height="15" fill="rgb(241,142,54)" fg:x="1104" fg:w="1"/><text x="97.9491%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.09%)</title><rect x="97.6991%" y="309" width="0.0885%" height="15" fill="rgb(222,85,15)" fg:x="1104" fg:w="1"/><text x="97.9491%" y="319.50"></text></g><g><title>revm::instructions::arithmetic::overflowing_mul (1 samples, 0.09%)</title><rect x="97.7876%" y="341" width="0.0885%" height="15" fill="rgb(210,85,47)" fg:x="1105" fg:w="1"/><text x="98.0376%" y="351.50"></text></g><g><title>primitive_types::U256::overflowing_mul (1 samples, 0.09%)</title><rect x="97.7876%" y="325" width="0.0885%" height="15" fill="rgb(224,206,25)" fg:x="1105" fg:w="1"/><text x="98.0376%" y="335.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (3 samples, 0.27%)</title><rect x="97.8761%" y="341" width="0.2655%" height="15" fill="rgb(243,201,19)" fg:x="1106" fg:w="3"/><text x="98.1261%" y="351.50"></text></g><g><title>revm::instructions::i256::i256_div (3 samples, 0.27%)</title><rect x="97.8761%" y="325" width="0.2655%" height="15" fill="rgb(236,59,4)" fg:x="1106" fg:w="3"/><text x="98.1261%" y="335.50"></text></g><g><title>fast_div_rem (2 samples, 0.18%)</title><rect x="97.9646%" y="309" width="0.1770%" height="15" fill="rgb(254,179,45)" fg:x="1107" fg:w="2"/><text x="98.2146%" y="319.50"></text></g><g><title>intx::operator/&lt;256u&gt; (2 samples, 0.18%)</title><rect x="97.9646%" y="293" width="0.1770%" height="15" fill="rgb(226,14,10)" fg:x="1107" fg:w="2"/><text x="98.2146%" y="303.50"></text></g><g><title>intx::udivrem&lt;256u, 256u&gt; (2 samples, 0.18%)</title><rect x="97.9646%" y="277" width="0.1770%" height="15" fill="rgb(244,27,41)" fg:x="1107" fg:w="2"/><text x="98.2146%" y="287.50"></text></g><g><title>intx::internal::udivrem_by1 (1 samples, 0.09%)</title><rect x="98.0531%" y="261" width="0.0885%" height="15" fill="rgb(235,35,32)" fg:x="1108" fg:w="1"/><text x="98.3031%" y="271.50"></text></g><g><title>intx::reciprocal_2by1 (1 samples, 0.09%)</title><rect x="98.0531%" y="245" width="0.0885%" height="15" fill="rgb(218,68,31)" fg:x="1108" fg:w="1"/><text x="98.3031%" y="255.50"></text></g><g><title>revm::instructions::bitwise::slt (1 samples, 0.09%)</title><rect x="98.1416%" y="341" width="0.0885%" height="15" fill="rgb(207,120,37)" fg:x="1109" fg:w="1"/><text x="98.3916%" y="351.50"></text></g><g><title>revm::instructions::i256::i256_cmp (1 samples, 0.09%)</title><rect x="98.1416%" y="325" width="0.0885%" height="15" fill="rgb(227,98,0)" fg:x="1109" fg:w="1"/><text x="98.3916%" y="335.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (1 samples, 0.09%)</title><rect x="98.1416%" y="309" width="0.0885%" height="15" fill="rgb(207,7,3)" fg:x="1109" fg:w="1"/><text x="98.3916%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (1 samples, 0.09%)</title><rect x="98.1416%" y="293" width="0.0885%" height="15" fill="rgb(206,98,19)" fg:x="1109" fg:w="1"/><text x="98.3916%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.09%)</title><rect x="98.1416%" y="277" width="0.0885%" height="15" fill="rgb(217,5,26)" fg:x="1109" fg:w="1"/><text x="98.3916%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::{{closure}} (1 samples, 0.09%)</title><rect x="98.1416%" y="261" width="0.0885%" height="15" fill="rgb(235,190,38)" fg:x="1109" fg:w="1"/><text x="98.3916%" y="271.50"></text></g><g><title>hashbrown::map::make_insert_hash (1 samples, 0.09%)</title><rect x="98.2301%" y="293" width="0.0885%" height="15" fill="rgb(247,86,24)" fg:x="1110" fg:w="1"/><text x="98.4801%" y="303.50"></text></g><g><title>&lt;primitive_types::U256 as core::hash::Hash&gt;::hash (1 samples, 0.09%)</title><rect x="98.2301%" y="277" width="0.0885%" height="15" fill="rgb(205,101,16)" fg:x="1110" fg:w="1"/><text x="98.4801%" y="287.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (1 samples, 0.09%)</title><rect x="98.2301%" y="261" width="0.0885%" height="15" fill="rgb(246,168,33)" fg:x="1110" fg:w="1"/><text x="98.4801%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.09%)</title><rect x="98.2301%" y="245" width="0.0885%" height="15" fill="rgb(231,114,1)" fg:x="1110" fg:w="1"/><text x="98.4801%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (1 samples, 0.09%)</title><rect x="98.2301%" y="229" width="0.0885%" height="15" fill="rgb(207,184,53)" fg:x="1110" fg:w="1"/><text x="98.4801%" y="239.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (1 samples, 0.09%)</title><rect x="98.2301%" y="213" width="0.0885%" height="15" fill="rgb(224,95,51)" fg:x="1110" fg:w="1"/><text x="98.4801%" y="223.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (1 samples, 0.09%)</title><rect x="98.2301%" y="197" width="0.0885%" height="15" fill="rgb(212,188,45)" fg:x="1110" fg:w="1"/><text x="98.4801%" y="207.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.09%)</title><rect x="98.2301%" y="181" width="0.0885%" height="15" fill="rgb(223,154,38)" fg:x="1110" fg:w="1"/><text x="98.4801%" y="191.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (1 samples, 0.09%)</title><rect x="98.2301%" y="165" width="0.0885%" height="15" fill="rgb(251,22,52)" fg:x="1110" fg:w="1"/><text x="98.4801%" y="175.50"></text></g><g><title>revm::instructions::host::sload (2 samples, 0.18%)</title><rect x="98.2301%" y="341" width="0.1770%" height="15" fill="rgb(229,209,22)" fg:x="1110" fg:w="2"/><text x="98.4801%" y="351.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (2 samples, 0.18%)</title><rect x="98.2301%" y="325" width="0.1770%" height="15" fill="rgb(234,138,34)" fg:x="1110" fg:w="2"/><text x="98.4801%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (2 samples, 0.18%)</title><rect x="98.2301%" y="309" width="0.1770%" height="15" fill="rgb(212,95,11)" fg:x="1110" fg:w="2"/><text x="98.4801%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.09%)</title><rect x="98.3186%" y="293" width="0.0885%" height="15" fill="rgb(240,179,47)" fg:x="1111" fg:w="1"/><text x="98.5686%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.09%)</title><rect x="98.3186%" y="277" width="0.0885%" height="15" fill="rgb(240,163,11)" fg:x="1111" fg:w="1"/><text x="98.5686%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.09%)</title><rect x="98.3186%" y="261" width="0.0885%" height="15" fill="rgb(236,37,12)" fg:x="1111" fg:w="1"/><text x="98.5686%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.09%)</title><rect x="98.3186%" y="245" width="0.0885%" height="15" fill="rgb(232,164,16)" fg:x="1111" fg:w="1"/><text x="98.5686%" y="255.50"></text></g><g><title>revm::instructions::memory::mload (1 samples, 0.09%)</title><rect x="98.4071%" y="341" width="0.0885%" height="15" fill="rgb(244,205,15)" fg:x="1112" fg:w="1"/><text x="98.6571%" y="351.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u64 (1 samples, 0.09%)</title><rect x="98.4071%" y="325" width="0.0885%" height="15" fill="rgb(223,117,47)" fg:x="1112" fg:w="1"/><text x="98.6571%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (1 samples, 0.09%)</title><rect x="98.4071%" y="309" width="0.0885%" height="15" fill="rgb(244,107,35)" fg:x="1112" fg:w="1"/><text x="98.6571%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (1 samples, 0.09%)</title><rect x="98.4071%" y="293" width="0.0885%" height="15" fill="rgb(205,140,8)" fg:x="1112" fg:w="1"/><text x="98.6571%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (1 samples, 0.09%)</title><rect x="98.4071%" y="277" width="0.0885%" height="15" fill="rgb(228,84,46)" fg:x="1112" fg:w="1"/><text x="98.6571%" y="287.50"></text></g><g><title>revm::gas::Gas::record_memory (1 samples, 0.09%)</title><rect x="98.4956%" y="325" width="0.0885%" height="15" fill="rgb(254,188,9)" fg:x="1113" fg:w="1"/><text x="98.7456%" y="335.50"></text></g><g><title>revm::instructions::memory::mstore (4 samples, 0.35%)</title><rect x="98.4956%" y="341" width="0.3540%" height="15" fill="rgb(206,112,54)" fg:x="1113" fg:w="4"/><text x="98.7456%" y="351.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (3 samples, 0.27%)</title><rect x="98.5841%" y="325" width="0.2655%" height="15" fill="rgb(216,84,49)" fg:x="1114" fg:w="3"/><text x="98.8341%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (3 samples, 0.27%)</title><rect x="98.5841%" y="309" width="0.2655%" height="15" fill="rgb(214,194,35)" fg:x="1114" fg:w="3"/><text x="98.8341%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3 samples, 0.27%)</title><rect x="98.5841%" y="293" width="0.2655%" height="15" fill="rgb(249,28,3)" fg:x="1114" fg:w="3"/><text x="98.8341%" y="303.50"></text></g><g><title>core::ptr::write (3 samples, 0.27%)</title><rect x="98.5841%" y="277" width="0.2655%" height="15" fill="rgb(222,56,52)" fg:x="1114" fg:w="3"/><text x="98.8341%" y="287.50"></text></g><g><title>__memset_avx2_erms (3 samples, 0.27%)</title><rect x="98.5841%" y="261" width="0.2655%" height="15" fill="rgb(245,217,50)" fg:x="1114" fg:w="3"/><text x="98.8341%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.18%)</title><rect x="98.6726%" y="245" width="0.1770%" height="15" fill="rgb(213,201,24)" fg:x="1115" fg:w="2"/><text x="98.9226%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.7611%" y="229" width="0.0885%" height="15" fill="rgb(248,116,28)" fg:x="1116" fg:w="1"/><text x="99.0111%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.7611%" y="213" width="0.0885%" height="15" fill="rgb(219,72,43)" fg:x="1116" fg:w="1"/><text x="99.0111%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.7611%" y="197" width="0.0885%" height="15" fill="rgb(209,138,14)" fg:x="1116" fg:w="1"/><text x="99.0111%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.7611%" y="181" width="0.0885%" height="15" fill="rgb(222,18,33)" fg:x="1116" fg:w="1"/><text x="99.0111%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.7611%" y="165" width="0.0885%" height="15" fill="rgb(213,199,7)" fg:x="1116" fg:w="1"/><text x="99.0111%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.7611%" y="149" width="0.0885%" height="15" fill="rgb(250,110,10)" fg:x="1116" fg:w="1"/><text x="99.0111%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.7611%" y="133" width="0.0885%" height="15" fill="rgb(248,123,6)" fg:x="1116" fg:w="1"/><text x="99.0111%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.7611%" y="117" width="0.0885%" height="15" fill="rgb(206,91,31)" fg:x="1116" fg:w="1"/><text x="99.0111%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.09%)</title><rect x="98.7611%" y="101" width="0.0885%" height="15" fill="rgb(211,154,13)" fg:x="1116" fg:w="1"/><text x="99.0111%" y="111.50"></text></g><g><title>revm::instructions::stack::dup (3 samples, 0.27%)</title><rect x="98.8496%" y="341" width="0.2655%" height="15" fill="rgb(225,148,7)" fg:x="1117" fg:w="3"/><text x="99.0996%" y="351.50"></text></g><g><title>revm::interpreter::stack::Stack::dup (2 samples, 0.18%)</title><rect x="98.9381%" y="325" width="0.1770%" height="15" fill="rgb(220,160,43)" fg:x="1118" fg:w="2"/><text x="99.1881%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.18%)</title><rect x="98.9381%" y="309" width="0.1770%" height="15" fill="rgb(213,52,39)" fg:x="1118" fg:w="2"/><text x="99.1881%" y="319.50"></text></g><g><title>revm::instructions::stack::pop (1 samples, 0.09%)</title><rect x="99.1150%" y="341" width="0.0885%" height="15" fill="rgb(243,137,7)" fg:x="1120" fg:w="1"/><text x="99.3650%" y="351.50"></text></g><g><title>revm::interpreter::stack::Stack::reduce_one (1 samples, 0.09%)</title><rect x="99.1150%" y="325" width="0.0885%" height="15" fill="rgb(230,79,13)" fg:x="1120" fg:w="1"/><text x="99.3650%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.09%)</title><rect x="99.1150%" y="309" width="0.0885%" height="15" fill="rgb(247,105,23)" fg:x="1120" fg:w="1"/><text x="99.3650%" y="319.50"></text></g><g><title>revm::instructions::stack::push (3 samples, 0.27%)</title><rect x="99.2035%" y="341" width="0.2655%" height="15" fill="rgb(223,179,41)" fg:x="1121" fg:w="3"/><text x="99.4535%" y="351.50"></text></g><g><title>revm::interpreter::stack::Stack::push_slice (3 samples, 0.27%)</title><rect x="99.2035%" y="325" width="0.2655%" height="15" fill="rgb(218,9,34)" fg:x="1121" fg:w="3"/><text x="99.4535%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (1 samples, 0.09%)</title><rect x="99.3805%" y="309" width="0.0885%" height="15" fill="rgb(222,106,8)" fg:x="1123" fg:w="1"/><text x="99.6305%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (1 samples, 0.09%)</title><rect x="99.3805%" y="293" width="0.0885%" height="15" fill="rgb(211,220,0)" fg:x="1123" fg:w="1"/><text x="99.6305%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (1 samples, 0.09%)</title><rect x="99.3805%" y="277" width="0.0885%" height="15" fill="rgb(229,52,16)" fg:x="1123" fg:w="1"/><text x="99.6305%" y="287.50"></text></g><g><title>__libc_start_main (909 samples, 80.44%)</title><rect x="19.1150%" y="965" width="80.4425%" height="15" fill="rgb(212,155,18)" fg:x="216" fg:w="909"/><text x="19.3650%" y="975.50">__libc_start_main</text></g><g><title>main (909 samples, 80.44%)</title><rect x="19.1150%" y="949" width="80.4425%" height="15" fill="rgb(242,21,14)" fg:x="216" fg:w="909"/><text x="19.3650%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (909 samples, 80.44%)</title><rect x="19.1150%" y="933" width="80.4425%" height="15" fill="rgb(222,19,48)" fg:x="216" fg:w="909"/><text x="19.3650%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (909 samples, 80.44%)</title><rect x="19.1150%" y="917" width="80.4425%" height="15" fill="rgb(232,45,27)" fg:x="216" fg:w="909"/><text x="19.3650%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (909 samples, 80.44%)</title><rect x="19.1150%" y="901" width="80.4425%" height="15" fill="rgb(249,103,42)" fg:x="216" fg:w="909"/><text x="19.3650%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (909 samples, 80.44%)</title><rect x="19.1150%" y="885" width="80.4425%" height="15" fill="rgb(246,81,33)" fg:x="216" fg:w="909"/><text x="19.3650%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (909 samples, 80.44%)</title><rect x="19.1150%" y="869" width="80.4425%" height="15" fill="rgb(252,33,42)" fg:x="216" fg:w="909"/><text x="19.3650%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (909 samples, 80.44%)</title><rect x="19.1150%" y="853" width="80.4425%" height="15" fill="rgb(209,212,41)" fg:x="216" fg:w="909"/><text x="19.3650%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (909 samples, 80.44%)</title><rect x="19.1150%" y="837" width="80.4425%" height="15" fill="rgb(207,154,6)" fg:x="216" fg:w="909"/><text x="19.3650%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (909 samples, 80.44%)</title><rect x="19.1150%" y="821" width="80.4425%" height="15" fill="rgb(223,64,47)" fg:x="216" fg:w="909"/><text x="19.3650%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (909 samples, 80.44%)</title><rect x="19.1150%" y="805" width="80.4425%" height="15" fill="rgb(211,161,38)" fg:x="216" fg:w="909"/><text x="19.3650%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (909 samples, 80.44%)</title><rect x="19.1150%" y="789" width="80.4425%" height="15" fill="rgb(219,138,40)" fg:x="216" fg:w="909"/><text x="19.3650%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (909 samples, 80.44%)</title><rect x="19.1150%" y="773" width="80.4425%" height="15" fill="rgb(241,228,46)" fg:x="216" fg:w="909"/><text x="19.3650%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (909 samples, 80.44%)</title><rect x="19.1150%" y="757" width="80.4425%" height="15" fill="rgb(223,209,38)" fg:x="216" fg:w="909"/><text x="19.3650%" y="767.50">core::ops::function::FnOnce::call_once</text></g><g><title>snailtracer::main (909 samples, 80.44%)</title><rect x="19.1150%" y="741" width="80.4425%" height="15" fill="rgb(236,164,45)" fg:x="216" fg:w="909"/><text x="19.3650%" y="751.50">snailtracer::main</text></g><g><title>snailtracer::simple_example (909 samples, 80.44%)</title><rect x="19.1150%" y="725" width="80.4425%" height="15" fill="rgb(231,15,5)" fg:x="216" fg:w="909"/><text x="19.3650%" y="735.50">snailtracer::simple_example</text></g><g><title>microbench::bench (909 samples, 80.44%)</title><rect x="19.1150%" y="709" width="80.4425%" height="15" fill="rgb(252,35,15)" fg:x="216" fg:w="909"/><text x="19.3650%" y="719.50">microbench::bench</text></g><g><title>microbench::bench_impl (909 samples, 80.44%)</title><rect x="19.1150%" y="693" width="80.4425%" height="15" fill="rgb(248,181,18)" fg:x="216" fg:w="909"/><text x="19.3650%" y="703.50">microbench::bench_impl</text></g><g><title>microbench::bench::{{closure}} (909 samples, 80.44%)</title><rect x="19.1150%" y="677" width="80.4425%" height="15" fill="rgb(233,39,42)" fg:x="216" fg:w="909"/><text x="19.3650%" y="687.50">microbench::bench::{{closure}}</text></g><g><title>microbench::measure (909 samples, 80.44%)</title><rect x="19.1150%" y="661" width="80.4425%" height="15" fill="rgb(238,110,33)" fg:x="216" fg:w="909"/><text x="19.3650%" y="671.50">microbench::measure</text></g><g><title>microbench::measure_impl (909 samples, 80.44%)</title><rect x="19.1150%" y="645" width="80.4425%" height="15" fill="rgb(233,195,10)" fg:x="216" fg:w="909"/><text x="19.3650%" y="655.50">microbench::measure_impl</text></g><g><title>core::iter::traits::iterator::Iterator::collect (909 samples, 80.44%)</title><rect x="19.1150%" y="629" width="80.4425%" height="15" fill="rgb(254,105,3)" fg:x="216" fg:w="909"/><text x="19.3650%" y="639.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (909 samples, 80.44%)</title><rect x="19.1150%" y="613" width="80.4425%" height="15" fill="rgb(221,225,9)" fg:x="216" fg:w="909"/><text x="19.3650%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (909 samples, 80.44%)</title><rect x="19.1150%" y="597" width="80.4425%" height="15" fill="rgb(224,227,45)" fg:x="216" fg:w="909"/><text x="19.3650%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (909 samples, 80.44%)</title><rect x="19.1150%" y="581" width="80.4425%" height="15" fill="rgb(229,198,43)" fg:x="216" fg:w="909"/><text x="19.3650%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 2.30%)</title><rect x="97.2566%" y="565" width="2.3009%" height="15" fill="rgb(206,209,35)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="575.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map (26 samples, 2.30%)</title><rect x="97.2566%" y="549" width="2.3009%" height="15" fill="rgb(245,195,53)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="559.50">c..</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26 samples, 2.30%)</title><rect x="97.2566%" y="533" width="2.3009%" height="15" fill="rgb(240,92,26)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="543.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (26 samples, 2.30%)</title><rect x="97.2566%" y="517" width="2.3009%" height="15" fill="rgb(207,40,23)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="527.50">c..</text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (26 samples, 2.30%)</title><rect x="97.2566%" y="501" width="2.3009%" height="15" fill="rgb(223,111,35)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="511.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::{{closure}} (26 samples, 2.30%)</title><rect x="97.2566%" y="485" width="2.3009%" height="15" fill="rgb(229,147,28)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="495.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (26 samples, 2.30%)</title><rect x="97.2566%" y="469" width="2.3009%" height="15" fill="rgb(211,29,28)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="479.50">c..</text></g><g><title>microbench::measure_impl::{{closure}} (26 samples, 2.30%)</title><rect x="97.2566%" y="453" width="2.3009%" height="15" fill="rgb(228,72,33)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="463.50">m..</text></g><g><title>microbench::measure::{{closure}} (26 samples, 2.30%)</title><rect x="97.2566%" y="437" width="2.3009%" height="15" fill="rgb(205,214,31)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="447.50">m..</text></g><g><title>snailtracer::simple_example::{{closure}} (26 samples, 2.30%)</title><rect x="97.2566%" y="421" width="2.3009%" height="15" fill="rgb(224,111,15)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="431.50">s..</text></g><g><title>revm::evm::EVM&lt;DB&gt;::transact (26 samples, 2.30%)</title><rect x="97.2566%" y="405" width="2.3009%" height="15" fill="rgb(253,21,26)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="415.50">r..</text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact (26 samples, 2.30%)</title><rect x="97.2566%" y="389" width="2.3009%" height="15" fill="rgb(245,139,43)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="399.50">&lt;..</text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (26 samples, 2.30%)</title><rect x="97.2566%" y="373" width="2.3009%" height="15" fill="rgb(252,170,7)" fg:x="1099" fg:w="26"/><text x="97.5066%" y="383.50">r..</text></g><g><title>revm::interpreter::Interpreter::run (25 samples, 2.21%)</title><rect x="97.3451%" y="357" width="2.2124%" height="15" fill="rgb(231,118,14)" fg:x="1100" fg:w="25"/><text x="97.5951%" y="367.50">r..</text></g><g><title>revm::instructions::stack::swap (1 samples, 0.09%)</title><rect x="99.4690%" y="341" width="0.0885%" height="15" fill="rgb(238,83,0)" fg:x="1124" fg:w="1"/><text x="99.7190%" y="351.50"></text></g><g><title>revm::interpreter::stack::Stack::swap (1 samples, 0.09%)</title><rect x="99.4690%" y="325" width="0.0885%" height="15" fill="rgb(221,39,39)" fg:x="1124" fg:w="1"/><text x="99.7190%" y="335.50"></text></g><g><title>core::ptr::swap (1 samples, 0.09%)</title><rect x="99.4690%" y="309" width="0.0885%" height="15" fill="rgb(222,119,46)" fg:x="1124" fg:w="1"/><text x="99.7190%" y="319.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.09%)</title><rect x="99.4690%" y="293" width="0.0885%" height="15" fill="rgb(222,165,49)" fg:x="1124" fg:w="1"/><text x="99.7190%" y="303.50"></text></g><g><title>_start (910 samples, 80.53%)</title><rect x="19.1150%" y="981" width="80.5310%" height="15" fill="rgb(219,113,52)" fg:x="216" fg:w="910"/><text x="19.3650%" y="991.50">_start</text></g><g><title>_dl_start (1 samples, 0.09%)</title><rect x="99.5575%" y="965" width="0.0885%" height="15" fill="rgb(214,7,15)" fg:x="1125" fg:w="1"/><text x="99.8075%" y="975.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.09%)</title><rect x="99.5575%" y="949" width="0.0885%" height="15" fill="rgb(235,32,4)" fg:x="1125" fg:w="1"/><text x="99.8075%" y="959.50"></text></g><g><title>dl_main (1 samples, 0.09%)</title><rect x="99.5575%" y="933" width="0.0885%" height="15" fill="rgb(238,90,54)" fg:x="1125" fg:w="1"/><text x="99.8075%" y="943.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.09%)</title><rect x="99.5575%" y="917" width="0.0885%" height="15" fill="rgb(213,208,19)" fg:x="1125" fg:w="1"/><text x="99.8075%" y="927.50"></text></g><g><title>all (1,130 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(233,156,4)" fg:x="0" fg:w="1130"/><text x="0.2500%" y="1023.50"></text></g><g><title>snailtracer (1,125 samples, 99.56%)</title><rect x="0.4425%" y="997" width="99.5575%" height="15" fill="rgb(207,194,5)" fg:x="5" fg:w="1125"/><text x="0.6925%" y="1007.50">snailtracer</text></g><g><title>revm::instructions::opcode::jump_table::opcode_jump_table::INSTANCE (4 samples, 0.35%)</title><rect x="99.6460%" y="981" width="0.3540%" height="15" fill="rgb(206,111,30)" fg:x="1126" fg:w="4"/><text x="99.8960%" y="991.50"></text></g><g><title>revm::instructions::memory::mload (4 samples, 0.35%)</title><rect x="99.6460%" y="965" width="0.3540%" height="15" fill="rgb(243,70,54)" fg:x="1126" fg:w="4"/><text x="99.8960%" y="975.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (4 samples, 0.35%)</title><rect x="99.6460%" y="949" width="0.3540%" height="15" fill="rgb(242,28,8)" fg:x="1126" fg:w="4"/><text x="99.8960%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.35%)</title><rect x="99.6460%" y="933" width="0.3540%" height="15" fill="rgb(219,106,18)" fg:x="1126" fg:w="4"/><text x="99.8960%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.35%)</title><rect x="99.6460%" y="917" width="0.3540%" height="15" fill="rgb(244,222,10)" fg:x="1126" fg:w="4"/><text x="99.8960%" y="927.50"></text></g></svg></svg>