<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="693.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="1954"><g><title>perf-exec (5 samples, 0.26%)</title><rect x="0.0000%" y="645" width="0.2559%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="629" width="0.2559%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="613" width="0.2559%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="597" width="0.2559%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="581" width="0.2559%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="565" width="0.2559%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="549" width="0.2559%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="533" width="0.2559%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="517" width="0.2559%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="501" width="0.2559%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="485" width="0.2559%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="469" width="0.2559%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="453" width="0.2559%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="437" width="0.2559%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="0.0000%" y="421" width="0.2559%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="431.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (1 samples, 0.05%)</title><rect x="0.2559%" y="613" width="0.0512%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.5059%" y="623.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::Update&gt;::update (1 samples, 0.05%)</title><rect x="0.2559%" y="597" width="0.0512%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.5059%" y="607.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,Kind&gt;::digest_blocks (1 samples, 0.05%)</title><rect x="0.2559%" y="581" width="0.0512%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="0.5059%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.10%)</title><rect x="0.5629%" y="549" width="0.1024%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="2"/><text x="0.8129%" y="559.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (12 samples, 0.61%)</title><rect x="0.3071%" y="613" width="0.6141%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="12"/><text x="0.5571%" y="623.50"></text></g><g><title>revm::instructions::i256::i256_div (7 samples, 0.36%)</title><rect x="0.5629%" y="597" width="0.3582%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="7"/><text x="0.8129%" y="607.50"></text></g><g><title>revm::instructions::i256::div_u256::div_mod (7 samples, 0.36%)</title><rect x="0.5629%" y="581" width="0.3582%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="7"/><text x="0.8129%" y="591.50"></text></g><g><title>revm::instructions::i256::div_u256::div_mod_small (7 samples, 0.36%)</title><rect x="0.5629%" y="565" width="0.3582%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="7"/><text x="0.8129%" y="575.50"></text></g><g><title>revm::instructions::i256::div_u256::div_mod_word (5 samples, 0.26%)</title><rect x="0.6653%" y="549" width="0.2559%" height="15" fill="rgb(247,18,42)" fg:x="13" fg:w="5"/><text x="0.9153%" y="559.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (1 samples, 0.05%)</title><rect x="0.9724%" y="597" width="0.0512%" height="15" fill="rgb(241,131,45)" fg:x="19" fg:w="1"/><text x="1.2224%" y="607.50"></text></g><g><title>revm::instructions::host::sload (4 samples, 0.20%)</title><rect x="0.9212%" y="613" width="0.2047%" height="15" fill="rgb(249,31,29)" fg:x="18" fg:w="4"/><text x="1.1712%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (2 samples, 0.10%)</title><rect x="1.0235%" y="597" width="0.1024%" height="15" fill="rgb(225,111,53)" fg:x="20" fg:w="2"/><text x="1.2735%" y="607.50"></text></g><g><title>revm::instructions::memory::mload (8 samples, 0.41%)</title><rect x="1.1259%" y="613" width="0.4094%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="8"/><text x="1.3759%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (7 samples, 0.36%)</title><rect x="1.1771%" y="597" width="0.3582%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="7"/><text x="1.4271%" y="607.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (1 samples, 0.05%)</title><rect x="1.5353%" y="597" width="0.0512%" height="15" fill="rgb(232,36,49)" fg:x="30" fg:w="1"/><text x="1.7853%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 0.05%)</title><rect x="1.5353%" y="581" width="0.0512%" height="15" fill="rgb(209,103,24)" fg:x="30" fg:w="1"/><text x="1.7853%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.05%)</title><rect x="1.5353%" y="565" width="0.0512%" height="15" fill="rgb(229,88,8)" fg:x="30" fg:w="1"/><text x="1.7853%" y="575.50"></text></g><g><title>core::ptr::write (1 samples, 0.05%)</title><rect x="1.5353%" y="549" width="0.0512%" height="15" fill="rgb(213,181,19)" fg:x="30" fg:w="1"/><text x="1.7853%" y="559.50"></text></g><g><title>revm::instructions::memory::mstore (7 samples, 0.36%)</title><rect x="1.5353%" y="613" width="0.3582%" height="15" fill="rgb(254,191,54)" fg:x="30" fg:w="7"/><text x="1.7853%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (6 samples, 0.31%)</title><rect x="1.5865%" y="597" width="0.3071%" height="15" fill="rgb(241,83,37)" fg:x="31" fg:w="6"/><text x="1.8365%" y="607.50"></text></g><g><title>[[heap]] (69 samples, 3.53%)</title><rect x="0.2559%" y="629" width="3.5312%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="69"/><text x="0.5059%" y="639.50">[[h..</text></g><g><title>revm::interpreter::Interpreter::run (37 samples, 1.89%)</title><rect x="1.8936%" y="613" width="1.8936%" height="15" fill="rgb(226,3,54)" fg:x="37" fg:w="37"/><text x="2.1436%" y="623.50">r..</text></g><g><title>revm::instructions::eval (37 samples, 1.89%)</title><rect x="1.8936%" y="597" width="1.8936%" height="15" fill="rgb(245,192,40)" fg:x="37" fg:w="37"/><text x="2.1436%" y="607.50">r..</text></g><g><title>core::cmp::PartialOrd::gt (1 samples, 0.05%)</title><rect x="3.7359%" y="581" width="0.0512%" height="15" fill="rgb(238,167,29)" fg:x="73" fg:w="1"/><text x="3.9859%" y="591.50"></text></g><g><title>primitive_types::U256::from_big_endian (4 samples, 0.20%)</title><rect x="3.7871%" y="613" width="0.2047%" height="15" fill="rgb(232,182,51)" fg:x="74" fg:w="4"/><text x="4.0371%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.15%)</title><rect x="3.8383%" y="597" width="0.1535%" height="15" fill="rgb(231,60,39)" fg:x="75" fg:w="3"/><text x="4.0883%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.15%)</title><rect x="3.8383%" y="581" width="0.1535%" height="15" fill="rgb(208,69,12)" fg:x="75" fg:w="3"/><text x="4.0883%" y="591.50"></text></g><g><title>revm::instructions::memory::mload (1 samples, 0.05%)</title><rect x="3.9918%" y="613" width="0.0512%" height="15" fill="rgb(235,93,37)" fg:x="78" fg:w="1"/><text x="4.2418%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.05%)</title><rect x="3.9918%" y="597" width="0.0512%" height="15" fill="rgb(213,116,39)" fg:x="78" fg:w="1"/><text x="4.2418%" y="607.50"></text></g><g><title>[[stack]] (7 samples, 0.36%)</title><rect x="3.7871%" y="629" width="0.3582%" height="15" fill="rgb(222,207,29)" fg:x="74" fg:w="7"/><text x="4.0371%" y="639.50"></text></g><g><title>revm::instructions::memory::mstore (2 samples, 0.10%)</title><rect x="4.0430%" y="613" width="0.1024%" height="15" fill="rgb(206,96,30)" fg:x="79" fg:w="2"/><text x="4.2930%" y="623.50"></text></g><g><title>revm::interpreter::stack::Stack::len (2 samples, 0.10%)</title><rect x="4.0430%" y="597" width="0.1024%" height="15" fill="rgb(218,138,4)" fg:x="79" fg:w="2"/><text x="4.2930%" y="607.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (5 samples, 0.26%)</title><rect x="4.1453%" y="613" width="0.2559%" height="15" fill="rgb(250,191,14)" fg:x="81" fg:w="5"/><text x="4.3953%" y="623.50"></text></g><g><title>&lt;primitive_types::U256 as core::convert::From&lt;u64&gt;&gt;::from (2 samples, 0.10%)</title><rect x="4.4012%" y="613" width="0.1024%" height="15" fill="rgb(239,60,40)" fg:x="86" fg:w="2"/><text x="4.6512%" y="623.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::bit::Shr&lt;T&gt;&gt;::shr (1 samples, 0.05%)</title><rect x="4.5036%" y="613" width="0.0512%" height="15" fill="rgb(206,27,48)" fg:x="88" fg:w="1"/><text x="4.7536%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="4.5548%" y="613" width="0.1024%" height="15" fill="rgb(225,35,8)" fg:x="89" fg:w="2"/><text x="4.8048%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="4.5548%" y="597" width="0.1024%" height="15" fill="rgb(250,213,24)" fg:x="89" fg:w="2"/><text x="4.8048%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="4.5548%" y="581" width="0.1024%" height="15" fill="rgb(247,123,22)" fg:x="89" fg:w="2"/><text x="4.8048%" y="591.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="4.5548%" y="565" width="0.1024%" height="15" fill="rgb(231,138,38)" fg:x="89" fg:w="2"/><text x="4.8048%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="4.5548%" y="549" width="0.1024%" height="15" fill="rgb(231,145,46)" fg:x="89" fg:w="2"/><text x="4.8048%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="4.5548%" y="533" width="0.1024%" height="15" fill="rgb(251,118,11)" fg:x="89" fg:w="2"/><text x="4.8048%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="4.5548%" y="517" width="0.1024%" height="15" fill="rgb(217,147,25)" fg:x="89" fg:w="2"/><text x="4.8048%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="4.5548%" y="501" width="0.1024%" height="15" fill="rgb(247,81,37)" fg:x="89" fg:w="2"/><text x="4.8048%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="4.5548%" y="485" width="0.1024%" height="15" fill="rgb(209,12,38)" fg:x="89" fg:w="2"/><text x="4.8048%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="4.6059%" y="469" width="0.0512%" height="15" fill="rgb(227,1,9)" fg:x="90" fg:w="1"/><text x="4.8559%" y="479.50"></text></g><g><title>primitive_types::U256::from_big_endian (1 samples, 0.05%)</title><rect x="4.6571%" y="613" width="0.0512%" height="15" fill="rgb(248,47,43)" fg:x="91" fg:w="1"/><text x="4.9071%" y="623.50"></text></g><g><title>revm::instructions::arithmetic::sdiv (4 samples, 0.20%)</title><rect x="4.7083%" y="613" width="0.2047%" height="15" fill="rgb(221,10,30)" fg:x="92" fg:w="4"/><text x="4.9583%" y="623.50"></text></g><g><title>primitive_types::U256::one (1 samples, 0.05%)</title><rect x="5.0154%" y="597" width="0.0512%" height="15" fill="rgb(210,229,1)" fg:x="98" fg:w="1"/><text x="5.2654%" y="607.50"></text></g><g><title>revm::instructions::bitwise::slt (4 samples, 0.20%)</title><rect x="4.9130%" y="613" width="0.2047%" height="15" fill="rgb(222,148,37)" fg:x="96" fg:w="4"/><text x="5.1630%" y="623.50"></text></g><g><title>revm::instructions::i256::i256_cmp (1 samples, 0.05%)</title><rect x="5.0665%" y="597" width="0.0512%" height="15" fill="rgb(234,67,33)" fg:x="99" fg:w="1"/><text x="5.3165%" y="607.50"></text></g><g><title>revm::instructions::control::jump (1 samples, 0.05%)</title><rect x="5.1177%" y="613" width="0.0512%" height="15" fill="rgb(247,98,35)" fg:x="100" fg:w="1"/><text x="5.3677%" y="623.50"></text></g><g><title>revm::instructions::control::jumpdest (2 samples, 0.10%)</title><rect x="5.1689%" y="613" width="0.1024%" height="15" fill="rgb(247,138,52)" fg:x="101" fg:w="2"/><text x="5.4189%" y="623.50"></text></g><g><title>revm::instructions::control::jumpi (8 samples, 0.41%)</title><rect x="5.2712%" y="613" width="0.4094%" height="15" fill="rgb(213,79,30)" fg:x="103" fg:w="8"/><text x="5.5212%" y="623.50"></text></g><g><title>revm::instructions::memory::mload (6 samples, 0.31%)</title><rect x="5.6807%" y="613" width="0.3071%" height="15" fill="rgb(246,177,23)" fg:x="111" fg:w="6"/><text x="5.9307%" y="623.50"></text></g><g><title>revm::instructions::memory::mstore (3 samples, 0.15%)</title><rect x="5.9877%" y="613" width="0.1535%" height="15" fill="rgb(230,62,27)" fg:x="117" fg:w="3"/><text x="6.2377%" y="623.50"></text></g><g><title>[unknown] (40 samples, 2.05%)</title><rect x="4.1453%" y="629" width="2.0471%" height="15" fill="rgb(216,154,8)" fg:x="81" fg:w="40"/><text x="4.3953%" y="639.50">[..</text></g><g><title>revm::instructions::stack::pop (1 samples, 0.05%)</title><rect x="6.1412%" y="613" width="0.0512%" height="15" fill="rgb(244,35,45)" fg:x="120" fg:w="1"/><text x="6.3912%" y="623.50"></text></g><g><title>__udivti3 (186 samples, 9.52%)</title><rect x="6.1924%" y="629" width="9.5189%" height="15" fill="rgb(251,115,12)" fg:x="121" fg:w="186"/><text x="6.4424%" y="639.50">__udivti3</text></g><g><title>compiler_builtins::int::udiv::__udivti3 (174 samples, 8.90%)</title><rect x="6.8066%" y="613" width="8.9048%" height="15" fill="rgb(240,54,50)" fg:x="133" fg:w="174"/><text x="7.0566%" y="623.50">compiler_buil..</text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_div_rem (174 samples, 8.90%)</title><rect x="6.8066%" y="597" width="8.9048%" height="15" fill="rgb(233,84,52)" fg:x="133" fg:w="174"/><text x="7.0566%" y="607.50">compiler_buil..</text></g><g><title>compiler_builtins::int::specialized_div_rem::u128_by_u64_div_rem (170 samples, 8.70%)</title><rect x="7.0113%" y="581" width="8.7001%" height="15" fill="rgb(207,117,47)" fg:x="137" fg:w="170"/><text x="7.2613%" y="591.50">compiler_bui..</text></g><g><title>&lt;revm::instructions::Return as core::cmp::PartialEq&gt;::eq (13 samples, 0.67%)</title><rect x="19.2938%" y="293" width="0.6653%" height="15" fill="rgb(249,43,39)" fg:x="377" fg:w="13"/><text x="19.5438%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (15 samples, 0.77%)</title><rect x="19.9591%" y="293" width="0.7677%" height="15" fill="rgb(209,38,44)" fg:x="390" fg:w="15"/><text x="20.2091%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="51.5865%" y="277" width="0.1535%" height="15" fill="rgb(236,212,23)" fg:x="1008" fg:w="3"/><text x="51.8365%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="51.5865%" y="261" width="0.1535%" height="15" fill="rgb(242,79,21)" fg:x="1008" fg:w="3"/><text x="51.8365%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="51.5865%" y="245" width="0.1535%" height="15" fill="rgb(211,96,35)" fg:x="1008" fg:w="3"/><text x="51.8365%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="51.5865%" y="229" width="0.1535%" height="15" fill="rgb(253,215,40)" fg:x="1008" fg:w="3"/><text x="51.8365%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="51.5865%" y="213" width="0.1535%" height="15" fill="rgb(211,81,21)" fg:x="1008" fg:w="3"/><text x="51.8365%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="51.6377%" y="197" width="0.1024%" height="15" fill="rgb(208,190,38)" fg:x="1009" fg:w="2"/><text x="51.8877%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="51.6377%" y="181" width="0.1024%" height="15" fill="rgb(235,213,38)" fg:x="1009" fg:w="2"/><text x="51.8877%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="51.6377%" y="165" width="0.1024%" height="15" fill="rgb(237,122,38)" fg:x="1009" fg:w="2"/><text x="51.8877%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="51.6377%" y="149" width="0.1024%" height="15" fill="rgb(244,218,35)" fg:x="1009" fg:w="2"/><text x="51.8877%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.10%)</title><rect x="51.6377%" y="133" width="0.1024%" height="15" fill="rgb(240,68,47)" fg:x="1009" fg:w="2"/><text x="51.8877%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="51.6888%" y="117" width="0.0512%" height="15" fill="rgb(210,16,53)" fg:x="1010" fg:w="1"/><text x="51.9388%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.05%)</title><rect x="51.6888%" y="101" width="0.0512%" height="15" fill="rgb(235,124,12)" fg:x="1010" fg:w="1"/><text x="51.9388%" y="111.50"></text></g><g><title>core::cmp::PartialOrd::gt (1 samples, 0.05%)</title><rect x="51.7400%" y="277" width="0.0512%" height="15" fill="rgb(224,169,11)" fg:x="1011" fg:w="1"/><text x="51.9900%" y="287.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.05%)</title><rect x="51.7400%" y="261" width="0.0512%" height="15" fill="rgb(250,166,2)" fg:x="1011" fg:w="1"/><text x="51.9900%" y="271.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (1 samples, 0.05%)</title><rect x="51.7400%" y="245" width="0.0512%" height="15" fill="rgb(242,216,29)" fg:x="1011" fg:w="1"/><text x="51.9900%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (1 samples, 0.05%)</title><rect x="51.7400%" y="229" width="0.0512%" height="15" fill="rgb(230,116,27)" fg:x="1011" fg:w="1"/><text x="51.9900%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.05%)</title><rect x="51.7400%" y="213" width="0.0512%" height="15" fill="rgb(228,99,48)" fg:x="1011" fg:w="1"/><text x="51.9900%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::{{closure}} (1 samples, 0.05%)</title><rect x="51.7400%" y="197" width="0.0512%" height="15" fill="rgb(253,11,6)" fg:x="1011" fg:w="1"/><text x="51.9900%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (1 samples, 0.05%)</title><rect x="51.7400%" y="181" width="0.0512%" height="15" fill="rgb(247,143,39)" fg:x="1011" fg:w="1"/><text x="51.9900%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (1 samples, 0.05%)</title><rect x="51.7400%" y="165" width="0.0512%" height="15" fill="rgb(236,97,10)" fg:x="1011" fg:w="1"/><text x="51.9900%" y="175.50"></text></g><g><title>primitive_types::U256::overflowing_add (15 samples, 0.77%)</title><rect x="51.7912%" y="277" width="0.7677%" height="15" fill="rgb(233,208,19)" fg:x="1012" fg:w="15"/><text x="52.0412%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (2 samples, 0.10%)</title><rect x="52.4565%" y="261" width="0.1024%" height="15" fill="rgb(216,164,2)" fg:x="1025" fg:w="2"/><text x="52.7065%" y="271.50"></text></g><g><title>primitive_types::U256::overflowing_mul (12 samples, 0.61%)</title><rect x="52.5589%" y="277" width="0.6141%" height="15" fill="rgb(220,129,5)" fg:x="1027" fg:w="12"/><text x="52.8089%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (3 samples, 0.15%)</title><rect x="53.0194%" y="261" width="0.1535%" height="15" fill="rgb(242,17,10)" fg:x="1036" fg:w="3"/><text x="53.2694%" y="271.50"></text></g><g><title>primitive_types::U256::overflowing_sub (3 samples, 0.15%)</title><rect x="53.1730%" y="277" width="0.1535%" height="15" fill="rgb(242,107,0)" fg:x="1039" fg:w="3"/><text x="53.4230%" y="287.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_sub (2 samples, 0.10%)</title><rect x="53.2242%" y="261" width="0.1024%" height="15" fill="rgb(251,28,31)" fg:x="1040" fg:w="2"/><text x="53.4742%" y="271.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::arith::Add&lt;T&gt;&gt;::add (1 samples, 0.05%)</title><rect x="54.5036%" y="245" width="0.0512%" height="15" fill="rgb(233,223,10)" fg:x="1065" fg:w="1"/><text x="54.7536%" y="255.50"></text></g><g><title>primitive_types::U256::bits (14 samples, 0.72%)</title><rect x="54.6059%" y="229" width="0.7165%" height="15" fill="rgb(215,21,27)" fg:x="1067" fg:w="14"/><text x="54.8559%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (3 samples, 0.15%)</title><rect x="55.1689%" y="213" width="0.1535%" height="15" fill="rgb(232,23,21)" fg:x="1078" fg:w="3"/><text x="55.4189%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.10%)</title><rect x="55.6295%" y="213" width="0.1024%" height="15" fill="rgb(244,5,23)" fg:x="1087" fg:w="2"/><text x="55.8795%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::RangeInclusive&lt;A&gt;&gt;::next_back (2 samples, 0.10%)</title><rect x="55.6295%" y="197" width="0.1024%" height="15" fill="rgb(226,81,46)" fg:x="1087" fg:w="2"/><text x="55.8795%" y="207.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as core::iter::range::RangeInclusiveIteratorImpl&gt;::spec_next_back (2 samples, 0.10%)</title><rect x="55.6295%" y="181" width="0.1024%" height="15" fill="rgb(247,70,30)" fg:x="1087" fg:w="2"/><text x="55.8795%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.05%)</title><rect x="55.6807%" y="165" width="0.0512%" height="15" fill="rgb(212,68,19)" fg:x="1088" fg:w="1"/><text x="55.9307%" y="175.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::bit::ShlAssign&lt;T&gt;&gt;::shl_assign (3 samples, 0.15%)</title><rect x="55.7318%" y="213" width="0.1535%" height="15" fill="rgb(240,187,13)" fg:x="1089" fg:w="3"/><text x="55.9818%" y="223.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::bit::Shl&lt;T&gt;&gt;::shl (3 samples, 0.15%)</title><rect x="55.7318%" y="197" width="0.1535%" height="15" fill="rgb(223,113,26)" fg:x="1089" fg:w="3"/><text x="55.9818%" y="207.50"></text></g><g><title>primitive_types::U256::as_usize (2 samples, 0.10%)</title><rect x="55.7830%" y="181" width="0.1024%" height="15" fill="rgb(206,192,2)" fg:x="1090" fg:w="2"/><text x="56.0330%" y="191.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialOrd for (U,T)&gt;::le (1 samples, 0.05%)</title><rect x="55.8854%" y="213" width="0.0512%" height="15" fill="rgb(241,108,4)" fg:x="1092" fg:w="1"/><text x="56.1354%" y="223.50"></text></g><g><title>revm::instructions::i256::div_u256::div_mod_word (1 samples, 0.05%)</title><rect x="55.9365%" y="213" width="0.0512%" height="15" fill="rgb(247,173,49)" fg:x="1093" fg:w="1"/><text x="56.1865%" y="223.50"></text></g><g><title>revm::instructions::i256::div_u256::full_mul_u64 (2 samples, 0.10%)</title><rect x="55.9877%" y="213" width="0.1024%" height="15" fill="rgb(224,114,35)" fg:x="1094" fg:w="2"/><text x="56.2377%" y="223.50"></text></g><g><title>revm::instructions::i256::div_u256::overflowing_mul_u64 (2 samples, 0.10%)</title><rect x="55.9877%" y="197" width="0.1024%" height="15" fill="rgb(245,159,27)" fg:x="1094" fg:w="2"/><text x="56.2377%" y="207.50"></text></g><g><title>revm::instructions::i256::div_u256::mul_u64 (2 samples, 0.10%)</title><rect x="55.9877%" y="181" width="0.1024%" height="15" fill="rgb(245,172,44)" fg:x="1094" fg:w="2"/><text x="56.2377%" y="191.50"></text></g><g><title>revm::instructions::i256::div_u256::full_shl (3 samples, 0.15%)</title><rect x="56.0901%" y="213" width="0.1535%" height="15" fill="rgb(236,23,11)" fg:x="1096" fg:w="3"/><text x="56.3401%" y="223.50"></text></g><g><title>&lt;primitive_types::U256 as core::ops::bit::Shr&lt;T&gt;&gt;::shr (3 samples, 0.15%)</title><rect x="56.0901%" y="197" width="0.1535%" height="15" fill="rgb(205,117,38)" fg:x="1096" fg:w="3"/><text x="56.3401%" y="207.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.05%)</title><rect x="56.1924%" y="181" width="0.0512%" height="15" fill="rgb(237,72,25)" fg:x="1098" fg:w="1"/><text x="56.4424%" y="191.50"></text></g><g><title>&lt;primitive_types::U256 as core::convert::From&lt;u32&gt;&gt;::from (1 samples, 0.05%)</title><rect x="56.1924%" y="165" width="0.0512%" height="15" fill="rgb(244,70,9)" fg:x="1098" fg:w="1"/><text x="56.4424%" y="175.50"></text></g><g><title>&lt;primitive_types::U256 as core::convert::From&lt;u64&gt;&gt;::from (1 samples, 0.05%)</title><rect x="56.1924%" y="149" width="0.0512%" height="15" fill="rgb(217,125,39)" fg:x="1098" fg:w="1"/><text x="56.4424%" y="159.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::Shl&lt;u32&gt;&gt;::shl (1 samples, 0.05%)</title><rect x="56.3460%" y="197" width="0.0512%" height="15" fill="rgb(235,36,10)" fg:x="1101" fg:w="1"/><text x="56.5960%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shl&lt;u32&gt;&gt;::shl (1 samples, 0.05%)</title><rect x="56.3460%" y="181" width="0.0512%" height="15" fill="rgb(251,123,47)" fg:x="1101" fg:w="1"/><text x="56.5960%" y="191.50"></text></g><g><title>revm::instructions::i256::div_u256::full_shr (4 samples, 0.20%)</title><rect x="56.2436%" y="213" width="0.2047%" height="15" fill="rgb(221,13,13)" fg:x="1099" fg:w="4"/><text x="56.4936%" y="223.50"></text></g><g><title>&lt;&amp;u64 as core::ops::bit::Shr&lt;u32&gt;&gt;::shr (1 samples, 0.05%)</title><rect x="56.3971%" y="197" width="0.0512%" height="15" fill="rgb(238,131,9)" fg:x="1102" fg:w="1"/><text x="56.6471%" y="207.50"></text></g><g><title>&lt;u64 as core::ops::bit::Shr&lt;u32&gt;&gt;::shr (1 samples, 0.05%)</title><rect x="56.3971%" y="181" width="0.0512%" height="15" fill="rgb(211,50,8)" fg:x="1102" fg:w="1"/><text x="56.6471%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.10%)</title><rect x="56.4483%" y="149" width="0.1024%" height="15" fill="rgb(245,182,24)" fg:x="1103" fg:w="2"/><text x="56.6983%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.10%)</title><rect x="56.4483%" y="133" width="0.1024%" height="15" fill="rgb(242,14,37)" fg:x="1103" fg:w="2"/><text x="56.6983%" y="143.50"></text></g><g><title>revm::instructions::i256::div_u256::div_mod_knuth (28 samples, 1.43%)</title><rect x="55.3224%" y="229" width="1.4330%" height="15" fill="rgb(246,228,12)" fg:x="1081" fg:w="28"/><text x="55.5724%" y="239.50"></text></g><g><title>revm::instructions::i256::div_u256::sub_slice (6 samples, 0.31%)</title><rect x="56.4483%" y="213" width="0.3071%" height="15" fill="rgb(213,55,15)" fg:x="1103" fg:w="6"/><text x="56.6983%" y="223.50"></text></g><g><title>revm::instructions::i256::div_u256::binop_slice (6 samples, 0.31%)</title><rect x="56.4483%" y="197" width="0.3071%" height="15" fill="rgb(209,9,3)" fg:x="1103" fg:w="6"/><text x="56.6983%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.31%)</title><rect x="56.4483%" y="181" width="0.3071%" height="15" fill="rgb(230,59,30)" fg:x="1103" fg:w="6"/><text x="56.6983%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.31%)</title><rect x="56.4483%" y="165" width="0.3071%" height="15" fill="rgb(209,121,21)" fg:x="1103" fg:w="6"/><text x="56.6983%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.20%)</title><rect x="56.5507%" y="149" width="0.2047%" height="15" fill="rgb(220,109,13)" fg:x="1105" fg:w="4"/><text x="56.8007%" y="159.50"></text></g><g><title>revm::instructions::i256::div_u256::binop_slice::{{closure}} (4 samples, 0.20%)</title><rect x="56.5507%" y="133" width="0.2047%" height="15" fill="rgb(232,18,1)" fg:x="1105" fg:w="4"/><text x="56.8007%" y="143.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.05%)</title><rect x="56.7554%" y="213" width="0.0512%" height="15" fill="rgb(215,41,42)" fg:x="1109" fg:w="1"/><text x="57.0054%" y="223.50"></text></g><g><title>&lt;primitive_types::U256 as core::convert::From&lt;u64&gt;&gt;::from (1 samples, 0.05%)</title><rect x="56.7554%" y="197" width="0.0512%" height="15" fill="rgb(224,123,36)" fg:x="1109" fg:w="1"/><text x="57.0054%" y="207.50"></text></g><g><title>revm::instructions::i256::div_u256::div_mod (84 samples, 4.30%)</title><rect x="54.5548%" y="245" width="4.2989%" height="15" fill="rgb(240,125,3)" fg:x="1066" fg:w="84"/><text x="54.8048%" y="255.50">revm:..</text></g><g><title>revm::instructions::i256::div_u256::div_mod_small (41 samples, 2.10%)</title><rect x="56.7554%" y="229" width="2.0983%" height="15" fill="rgb(205,98,50)" fg:x="1109" fg:w="41"/><text x="57.0054%" y="239.50">r..</text></g><g><title>revm::instructions::i256::div_u256::div_mod_word (40 samples, 2.05%)</title><rect x="56.8066%" y="213" width="2.0471%" height="15" fill="rgb(205,185,37)" fg:x="1110" fg:w="40"/><text x="57.0566%" y="223.50">r..</text></g><g><title>revm::instructions::arithmetic::sdiv (122 samples, 6.24%)</title><rect x="53.3265%" y="277" width="6.2436%" height="15" fill="rgb(238,207,15)" fg:x="1042" fg:w="122"/><text x="53.5765%" y="287.50">revm::in..</text></g><g><title>revm::instructions::i256::i256_div (114 samples, 5.83%)</title><rect x="53.7359%" y="261" width="5.8342%" height="15" fill="rgb(213,199,42)" fg:x="1050" fg:w="114"/><text x="53.9859%" y="271.50">revm::i..</text></g><g><title>revm::instructions::i256::i256_sign (14 samples, 0.72%)</title><rect x="58.8536%" y="245" width="0.7165%" height="15" fill="rgb(235,201,11)" fg:x="1150" fg:w="14"/><text x="59.1036%" y="255.50"></text></g><g><title>primitive_types::U256::is_zero (6 samples, 0.31%)</title><rect x="59.2631%" y="229" width="0.3071%" height="15" fill="rgb(207,46,11)" fg:x="1158" fg:w="6"/><text x="59.5131%" y="239.50"></text></g><g><title>revm::instructions::bitwise::iszero (3 samples, 0.15%)</title><rect x="59.5701%" y="277" width="0.1535%" height="15" fill="rgb(241,35,35)" fg:x="1164" fg:w="3"/><text x="59.8201%" y="287.50"></text></g><g><title>primitive_types::U256::zero (1 samples, 0.05%)</title><rect x="59.7236%" y="261" width="0.0512%" height="15" fill="rgb(243,32,47)" fg:x="1167" fg:w="1"/><text x="59.9736%" y="271.50"></text></g><g><title>revm::instructions::bitwise::sgt (3 samples, 0.15%)</title><rect x="59.7236%" y="277" width="0.1535%" height="15" fill="rgb(247,202,23)" fg:x="1167" fg:w="3"/><text x="59.9736%" y="287.50"></text></g><g><title>revm::instructions::i256::i256_cmp (2 samples, 0.10%)</title><rect x="59.7748%" y="261" width="0.1024%" height="15" fill="rgb(219,102,11)" fg:x="1168" fg:w="2"/><text x="60.0248%" y="271.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (1 samples, 0.05%)</title><rect x="59.8260%" y="245" width="0.0512%" height="15" fill="rgb(243,110,44)" fg:x="1169" fg:w="1"/><text x="60.0760%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (1 samples, 0.05%)</title><rect x="59.8260%" y="229" width="0.0512%" height="15" fill="rgb(222,74,54)" fg:x="1169" fg:w="1"/><text x="60.0760%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.05%)</title><rect x="59.8260%" y="213" width="0.0512%" height="15" fill="rgb(216,99,12)" fg:x="1169" fg:w="1"/><text x="60.0760%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::{{closure}} (1 samples, 0.05%)</title><rect x="59.8260%" y="197" width="0.0512%" height="15" fill="rgb(226,22,26)" fg:x="1169" fg:w="1"/><text x="60.0760%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (1 samples, 0.05%)</title><rect x="59.8260%" y="181" width="0.0512%" height="15" fill="rgb(217,163,10)" fg:x="1169" fg:w="1"/><text x="60.0760%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (1 samples, 0.05%)</title><rect x="59.8260%" y="165" width="0.0512%" height="15" fill="rgb(213,25,53)" fg:x="1169" fg:w="1"/><text x="60.0760%" y="175.50"></text></g><g><title>primitive_types::U256::one (2 samples, 0.10%)</title><rect x="60.2354%" y="261" width="0.1024%" height="15" fill="rgb(252,105,26)" fg:x="1177" fg:w="2"/><text x="60.4854%" y="271.50"></text></g><g><title>&lt;primitive_types::U256 as core::convert::From&lt;u64&gt;&gt;::from (2 samples, 0.10%)</title><rect x="60.2354%" y="245" width="0.1024%" height="15" fill="rgb(220,39,43)" fg:x="1177" fg:w="2"/><text x="60.4854%" y="255.50"></text></g><g><title>primitive_types::U256::zero (1 samples, 0.05%)</title><rect x="60.3378%" y="261" width="0.0512%" height="15" fill="rgb(229,68,48)" fg:x="1179" fg:w="1"/><text x="60.5878%" y="271.50"></text></g><g><title>&lt;primitive_types::U256 as core::cmp::Ord&gt;::cmp (10 samples, 0.51%)</title><rect x="60.4401%" y="245" width="0.5118%" height="15" fill="rgb(252,8,32)" fg:x="1181" fg:w="10"/><text x="60.6901%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp (10 samples, 0.51%)</title><rect x="60.4401%" y="229" width="0.5118%" height="15" fill="rgb(223,20,43)" fg:x="1181" fg:w="10"/><text x="60.6901%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp_by (10 samples, 0.51%)</title><rect x="60.4401%" y="213" width="0.5118%" height="15" fill="rgb(229,81,49)" fg:x="1181" fg:w="10"/><text x="60.6901%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cmp::{{closure}} (8 samples, 0.41%)</title><rect x="60.5425%" y="197" width="0.4094%" height="15" fill="rgb(236,28,36)" fg:x="1183" fg:w="8"/><text x="60.7925%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for &amp;A&gt;::cmp (6 samples, 0.31%)</title><rect x="60.6448%" y="181" width="0.3071%" height="15" fill="rgb(249,185,26)" fg:x="1185" fg:w="6"/><text x="60.8948%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (6 samples, 0.31%)</title><rect x="60.6448%" y="165" width="0.3071%" height="15" fill="rgb(249,174,33)" fg:x="1185" fg:w="6"/><text x="60.8948%" y="175.50"></text></g><g><title>revm::instructions::bitwise::slt (33 samples, 1.69%)</title><rect x="59.8772%" y="277" width="1.6888%" height="15" fill="rgb(233,201,37)" fg:x="1170" fg:w="33"/><text x="60.1272%" y="287.50"></text></g><g><title>revm::instructions::i256::i256_cmp (23 samples, 1.18%)</title><rect x="60.3889%" y="261" width="1.1771%" height="15" fill="rgb(221,78,26)" fg:x="1180" fg:w="23"/><text x="60.6389%" y="271.50"></text></g><g><title>revm::instructions::i256::i256_sign (12 samples, 0.61%)</title><rect x="60.9519%" y="245" width="0.6141%" height="15" fill="rgb(250,127,30)" fg:x="1191" fg:w="12"/><text x="61.2019%" y="255.50"></text></g><g><title>primitive_types::U256::is_zero (7 samples, 0.36%)</title><rect x="61.2078%" y="229" width="0.3582%" height="15" fill="rgb(230,49,44)" fg:x="1196" fg:w="7"/><text x="61.4578%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.05%)</title><rect x="61.9243%" y="261" width="0.0512%" height="15" fill="rgb(229,67,23)" fg:x="1210" fg:w="1"/><text x="62.1743%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.05%)</title><rect x="61.9243%" y="245" width="0.0512%" height="15" fill="rgb(249,83,47)" fg:x="1210" fg:w="1"/><text x="62.1743%" y="255.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (7 samples, 0.36%)</title><rect x="61.9754%" y="261" width="0.3582%" height="15" fill="rgb(215,43,3)" fg:x="1211" fg:w="7"/><text x="62.2254%" y="271.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (7 samples, 0.36%)</title><rect x="61.9754%" y="245" width="0.3582%" height="15" fill="rgb(238,154,13)" fg:x="1211" fg:w="7"/><text x="62.2254%" y="255.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (5 samples, 0.26%)</title><rect x="62.0778%" y="229" width="0.2559%" height="15" fill="rgb(219,56,2)" fg:x="1213" fg:w="5"/><text x="62.3278%" y="239.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.05%)</title><rect x="62.3337%" y="261" width="0.0512%" height="15" fill="rgb(233,0,4)" fg:x="1218" fg:w="1"/><text x="62.5837%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.05%)</title><rect x="62.3849%" y="245" width="0.0512%" height="15" fill="rgb(235,30,7)" fg:x="1219" fg:w="1"/><text x="62.6349%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.05%)</title><rect x="62.3849%" y="229" width="0.0512%" height="15" fill="rgb(250,79,13)" fg:x="1219" fg:w="1"/><text x="62.6349%" y="239.50"></text></g><g><title>revm::instructions::control::jump (18 samples, 0.92%)</title><rect x="61.5660%" y="277" width="0.9212%" height="15" fill="rgb(211,146,34)" fg:x="1203" fg:w="18"/><text x="61.8160%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (2 samples, 0.10%)</title><rect x="62.3849%" y="261" width="0.1024%" height="15" fill="rgb(228,22,38)" fg:x="1219" fg:w="2"/><text x="62.6349%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.05%)</title><rect x="62.4360%" y="245" width="0.0512%" height="15" fill="rgb(235,168,5)" fg:x="1220" fg:w="1"/><text x="62.6860%" y="255.50"></text></g><g><title>revm::gas::Gas::record_cost (7 samples, 0.36%)</title><rect x="62.4872%" y="261" width="0.3582%" height="15" fill="rgb(221,155,16)" fg:x="1221" fg:w="7"/><text x="62.7372%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (2 samples, 0.10%)</title><rect x="62.7431%" y="245" width="0.1024%" height="15" fill="rgb(215,215,53)" fg:x="1226" fg:w="2"/><text x="62.9931%" y="255.50"></text></g><g><title>revm::gas::Gas::record_cost (9 samples, 0.46%)</title><rect x="62.8454%" y="245" width="0.4606%" height="15" fill="rgb(223,4,10)" fg:x="1228" fg:w="9"/><text x="63.0954%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (3 samples, 0.15%)</title><rect x="63.1525%" y="229" width="0.1535%" height="15" fill="rgb(234,103,6)" fg:x="1234" fg:w="3"/><text x="63.4025%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.05%)</title><rect x="63.5619%" y="213" width="0.0512%" height="15" fill="rgb(227,97,0)" fg:x="1242" fg:w="1"/><text x="63.8119%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.05%)</title><rect x="63.5619%" y="197" width="0.0512%" height="15" fill="rgb(234,150,53)" fg:x="1242" fg:w="1"/><text x="63.8119%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.05%)</title><rect x="63.5619%" y="181" width="0.0512%" height="15" fill="rgb(228,201,54)" fg:x="1242" fg:w="1"/><text x="63.8119%" y="191.50"></text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (16 samples, 0.82%)</title><rect x="62.8454%" y="261" width="0.8188%" height="15" fill="rgb(222,22,37)" fg:x="1228" fg:w="16"/><text x="63.0954%" y="271.50"></text></g><g><title>revm::interpreter::contract::Contract::gas_block (7 samples, 0.36%)</title><rect x="63.3060%" y="245" width="0.3582%" height="15" fill="rgb(237,53,32)" fg:x="1237" fg:w="7"/><text x="63.5560%" y="255.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::gas_block (7 samples, 0.36%)</title><rect x="63.3060%" y="229" width="0.3582%" height="15" fill="rgb(233,25,53)" fg:x="1237" fg:w="7"/><text x="63.5560%" y="239.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::gas_block (1 samples, 0.05%)</title><rect x="63.6131%" y="213" width="0.0512%" height="15" fill="rgb(210,40,34)" fg:x="1243" fg:w="1"/><text x="63.8631%" y="223.50"></text></g><g><title>revm::instructions::control::jumpdest (24 samples, 1.23%)</title><rect x="62.4872%" y="277" width="1.2282%" height="15" fill="rgb(241,220,44)" fg:x="1221" fg:w="24"/><text x="62.7372%" y="287.50"></text></g><g><title>revm::interpreter::Interpreter::program_counter (1 samples, 0.05%)</title><rect x="63.6643%" y="261" width="0.0512%" height="15" fill="rgb(235,28,35)" fg:x="1244" fg:w="1"/><text x="63.9143%" y="271.50"></text></g><g><title>revm::interpreter::bytecode::BytecodeLocked::as_ptr (1 samples, 0.05%)</title><rect x="63.6643%" y="245" width="0.0512%" height="15" fill="rgb(210,56,17)" fg:x="1244" fg:w="1"/><text x="63.9143%" y="255.50"></text></g><g><title>primitive_types::U256::is_zero (4 samples, 0.20%)</title><rect x="64.3296%" y="261" width="0.2047%" height="15" fill="rgb(224,130,29)" fg:x="1257" fg:w="4"/><text x="64.5796%" y="271.50"></text></g><g><title>revm::gas::Gas::record_cost (1 samples, 0.05%)</title><rect x="64.5343%" y="245" width="0.0512%" height="15" fill="rgb(235,212,8)" fg:x="1261" fg:w="1"/><text x="64.7843%" y="255.50"></text></g><g><title>revm::interpreter::Interpreter::add_next_gas_block (2 samples, 0.10%)</title><rect x="64.5343%" y="261" width="0.1024%" height="15" fill="rgb(223,33,50)" fg:x="1261" fg:w="2"/><text x="64.7843%" y="271.50"></text></g><g><title>revm::interpreter::contract::Contract::gas_block (1 samples, 0.05%)</title><rect x="64.5855%" y="245" width="0.0512%" height="15" fill="rgb(219,149,13)" fg:x="1262" fg:w="1"/><text x="64.8355%" y="255.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::gas_block (1 samples, 0.05%)</title><rect x="64.5855%" y="229" width="0.0512%" height="15" fill="rgb(250,156,29)" fg:x="1262" fg:w="1"/><text x="64.8355%" y="239.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::gas_block (1 samples, 0.05%)</title><rect x="64.5855%" y="213" width="0.0512%" height="15" fill="rgb(216,193,19)" fg:x="1262" fg:w="1"/><text x="64.8355%" y="223.50"></text></g><g><title>revm::interpreter::contract::Contract::is_valid_jump (8 samples, 0.41%)</title><rect x="64.6366%" y="261" width="0.4094%" height="15" fill="rgb(216,135,14)" fg:x="1263" fg:w="8"/><text x="64.8866%" y="271.50"></text></g><g><title>revm::interpreter::contract::ValidJumpAddress::is_valid (8 samples, 0.41%)</title><rect x="64.6366%" y="245" width="0.4094%" height="15" fill="rgb(241,47,5)" fg:x="1263" fg:w="8"/><text x="64.8866%" y="255.50"></text></g><g><title>revm::interpreter::contract::AnalysisData::is_jump (6 samples, 0.31%)</title><rect x="64.7390%" y="229" width="0.3071%" height="15" fill="rgb(233,42,35)" fg:x="1265" fg:w="6"/><text x="64.9890%" y="239.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.05%)</title><rect x="65.0461%" y="261" width="0.0512%" height="15" fill="rgb(231,13,6)" fg:x="1271" fg:w="1"/><text x="65.2961%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.05%)</title><rect x="65.4043%" y="245" width="0.0512%" height="15" fill="rgb(207,181,40)" fg:x="1278" fg:w="1"/><text x="65.6543%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.05%)</title><rect x="65.4043%" y="229" width="0.0512%" height="15" fill="rgb(254,173,49)" fg:x="1278" fg:w="1"/><text x="65.6543%" y="239.50"></text></g><g><title>revm::instructions::control::jumpi (35 samples, 1.79%)</title><rect x="63.7155%" y="277" width="1.7912%" height="15" fill="rgb(221,1,38)" fg:x="1245" fg:w="35"/><text x="63.9655%" y="287.50">r..</text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (8 samples, 0.41%)</title><rect x="65.0972%" y="261" width="0.4094%" height="15" fill="rgb(206,124,46)" fg:x="1272" fg:w="8"/><text x="65.3472%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.05%)</title><rect x="65.4555%" y="245" width="0.0512%" height="15" fill="rgb(249,21,11)" fg:x="1279" fg:w="1"/><text x="65.7055%" y="255.50"></text></g><g><title>&lt;primitive_types::U256 as core::clone::Clone&gt;::clone (6 samples, 0.31%)</title><rect x="65.9161%" y="245" width="0.3071%" height="15" fill="rgb(222,201,40)" fg:x="1288" fg:w="6"/><text x="66.1661%" y="255.50"></text></g><g><title>hashbrown::map::Entry&lt;K,V,S,A&gt;::or_insert (3 samples, 0.15%)</title><rect x="66.2231%" y="245" width="0.1535%" height="15" fill="rgb(235,61,29)" fg:x="1294" fg:w="3"/><text x="66.4731%" y="255.50"></text></g><g><title>ahash::operations::folded_multiply (1 samples, 0.05%)</title><rect x="66.3767%" y="197" width="0.0512%" height="15" fill="rgb(219,207,3)" fg:x="1297" fg:w="1"/><text x="66.6267%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (2 samples, 0.10%)</title><rect x="66.3767%" y="213" width="0.1024%" height="15" fill="rgb(222,56,46)" fg:x="1297" fg:w="2"/><text x="66.6267%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.05%)</title><rect x="66.4278%" y="197" width="0.0512%" height="15" fill="rgb(239,76,54)" fg:x="1298" fg:w="1"/><text x="66.6778%" y="207.50"></text></g><g><title>&lt;ahash::random_state::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.10%)</title><rect x="66.4790%" y="213" width="0.1024%" height="15" fill="rgb(231,124,27)" fg:x="1299" fg:w="2"/><text x="66.7290%" y="223.50"></text></g><g><title>ahash::fallback_hash::AHasher::from_random_state (2 samples, 0.10%)</title><rect x="66.4790%" y="197" width="0.1024%" height="15" fill="rgb(249,195,6)" fg:x="1299" fg:w="2"/><text x="66.7290%" y="207.50"></text></g><g><title>ahash::operations::folded_multiply (2 samples, 0.10%)</title><rect x="66.8373%" y="149" width="0.1024%" height="15" fill="rgb(237,174,47)" fg:x="1306" fg:w="2"/><text x="67.0873%" y="159.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (2 samples, 0.10%)</title><rect x="66.8373%" y="133" width="0.1024%" height="15" fill="rgb(206,201,31)" fg:x="1306" fg:w="2"/><text x="67.0873%" y="143.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (9 samples, 0.46%)</title><rect x="66.5814%" y="165" width="0.4606%" height="15" fill="rgb(231,57,52)" fg:x="1301" fg:w="9"/><text x="66.8314%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.10%)</title><rect x="66.9396%" y="149" width="0.1024%" height="15" fill="rgb(248,177,22)" fg:x="1308" fg:w="2"/><text x="67.1896%" y="159.50"></text></g><g><title>&lt;primitive_types::H160 as core::hash::Hash&gt;::hash (15 samples, 0.77%)</title><rect x="66.5814%" y="197" width="0.7677%" height="15" fill="rgb(215,211,37)" fg:x="1301" fg:w="15"/><text x="66.8314%" y="207.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (15 samples, 0.77%)</title><rect x="66.5814%" y="181" width="0.7677%" height="15" fill="rgb(241,128,51)" fg:x="1301" fg:w="15"/><text x="66.8314%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (6 samples, 0.31%)</title><rect x="67.0420%" y="165" width="0.3071%" height="15" fill="rgb(227,165,31)" fg:x="1310" fg:w="6"/><text x="67.2920%" y="175.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (5 samples, 0.26%)</title><rect x="67.3490%" y="149" width="0.2559%" height="15" fill="rgb(228,167,24)" fg:x="1316" fg:w="5"/><text x="67.5990%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_usize (5 samples, 0.26%)</title><rect x="67.3490%" y="133" width="0.2559%" height="15" fill="rgb(228,143,12)" fg:x="1316" fg:w="5"/><text x="67.5990%" y="143.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u64 (5 samples, 0.26%)</title><rect x="67.3490%" y="117" width="0.2559%" height="15" fill="rgb(249,149,8)" fg:x="1316" fg:w="5"/><text x="67.5990%" y="127.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (5 samples, 0.26%)</title><rect x="67.3490%" y="101" width="0.2559%" height="15" fill="rgb(243,35,44)" fg:x="1316" fg:w="5"/><text x="67.5990%" y="111.50"></text></g><g><title>ahash::operations::folded_multiply (5 samples, 0.26%)</title><rect x="67.3490%" y="85" width="0.2559%" height="15" fill="rgb(246,89,9)" fg:x="1316" fg:w="5"/><text x="67.5990%" y="95.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (5 samples, 0.26%)</title><rect x="67.3490%" y="69" width="0.2559%" height="15" fill="rgb(233,213,13)" fg:x="1316" fg:w="5"/><text x="67.5990%" y="79.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (5 samples, 0.26%)</title><rect x="67.6049%" y="117" width="0.2559%" height="15" fill="rgb(233,141,41)" fg:x="1321" fg:w="5"/><text x="67.8549%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.20%)</title><rect x="67.6561%" y="101" width="0.2047%" height="15" fill="rgb(239,167,4)" fg:x="1322" fg:w="4"/><text x="67.9061%" y="111.50"></text></g><g><title>hashbrown::map::make_insert_hash (34 samples, 1.74%)</title><rect x="66.3767%" y="229" width="1.7400%" height="15" fill="rgb(209,217,16)" fg:x="1297" fg:w="34"/><text x="66.6267%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (30 samples, 1.54%)</title><rect x="66.5814%" y="213" width="1.5353%" height="15" fill="rgb(219,88,35)" fg:x="1301" fg:w="30"/><text x="66.8314%" y="223.50"></text></g><g><title>&lt;primitive_types::U256 as core::hash::Hash&gt;::hash (15 samples, 0.77%)</title><rect x="67.3490%" y="197" width="0.7677%" height="15" fill="rgb(220,193,23)" fg:x="1316" fg:w="15"/><text x="67.5990%" y="207.50"></text></g><g><title>core::array::&lt;impl core::hash::Hash for [T: N]&gt;::hash (15 samples, 0.77%)</title><rect x="67.3490%" y="181" width="0.7677%" height="15" fill="rgb(230,90,52)" fg:x="1316" fg:w="15"/><text x="67.5990%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (15 samples, 0.77%)</title><rect x="67.3490%" y="165" width="0.7677%" height="15" fill="rgb(252,106,19)" fg:x="1316" fg:w="15"/><text x="67.5990%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash_slice (10 samples, 0.51%)</title><rect x="67.6049%" y="149" width="0.5118%" height="15" fill="rgb(206,74,20)" fg:x="1321" fg:w="10"/><text x="67.8549%" y="159.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (10 samples, 0.51%)</title><rect x="67.6049%" y="133" width="0.5118%" height="15" fill="rgb(230,138,44)" fg:x="1321" fg:w="10"/><text x="67.8549%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (5 samples, 0.26%)</title><rect x="67.8608%" y="117" width="0.2559%" height="15" fill="rgb(235,182,43)" fg:x="1326" fg:w="5"/><text x="68.1108%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="68.1167%" y="197" width="0.0512%" height="15" fill="rgb(242,16,51)" fg:x="1331" fg:w="1"/><text x="68.3667%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.05%)</title><rect x="68.1167%" y="181" width="0.0512%" height="15" fill="rgb(248,9,4)" fg:x="1331" fg:w="1"/><text x="68.3667%" y="191.50"></text></g><g><title>&lt;primitive_types::H160 as core::cmp::PartialEq&gt;::eq (33 samples, 1.69%)</title><rect x="68.1679%" y="149" width="1.6888%" height="15" fill="rgb(210,31,22)" fg:x="1332" fg:w="33"/><text x="68.4179%" y="159.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (33 samples, 1.69%)</title><rect x="68.1679%" y="133" width="1.6888%" height="15" fill="rgb(239,54,39)" fg:x="1332" fg:w="33"/><text x="68.4179%" y="143.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (33 samples, 1.69%)</title><rect x="68.1679%" y="117" width="1.6888%" height="15" fill="rgb(230,99,41)" fg:x="1332" fg:w="33"/><text x="68.4179%" y="127.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (33 samples, 1.69%)</title><rect x="68.1679%" y="101" width="1.6888%" height="15" fill="rgb(253,106,12)" fg:x="1332" fg:w="33"/><text x="68.4179%" y="111.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (41 samples, 2.10%)</title><rect x="68.1679%" y="181" width="2.0983%" height="15" fill="rgb(213,46,41)" fg:x="1332" fg:w="41"/><text x="68.4179%" y="191.50">h..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (41 samples, 2.10%)</title><rect x="68.1679%" y="165" width="2.0983%" height="15" fill="rgb(215,133,35)" fg:x="1332" fg:w="41"/><text x="68.4179%" y="175.50">c..</text></g><g><title>&lt;primitive_types::U256 as core::cmp::PartialEq&gt;::eq (8 samples, 0.41%)</title><rect x="69.8567%" y="149" width="0.4094%" height="15" fill="rgb(213,28,5)" fg:x="1365" fg:w="8"/><text x="70.1067%" y="159.50"></text></g><g><title>core::array::equality::&lt;impl core::cmp::PartialEq&lt;[B: N]&gt; for [A: N]&gt;::eq (8 samples, 0.41%)</title><rect x="69.8567%" y="133" width="0.4094%" height="15" fill="rgb(215,77,49)" fg:x="1365" fg:w="8"/><text x="70.1067%" y="143.50"></text></g><g><title>&lt;T as core::array::equality::SpecArrayEq&lt;U,_&gt;&gt;::spec_eq (8 samples, 0.41%)</title><rect x="69.8567%" y="117" width="0.4094%" height="15" fill="rgb(248,100,22)" fg:x="1365" fg:w="8"/><text x="70.1067%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (43 samples, 2.20%)</title><rect x="68.1679%" y="197" width="2.2006%" height="15" fill="rgb(208,67,9)" fg:x="1332" fg:w="43"/><text x="68.4179%" y="207.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.10%)</title><rect x="70.2661%" y="181" width="0.1024%" height="15" fill="rgb(219,133,21)" fg:x="1373" fg:w="2"/><text x="70.5161%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.10%)</title><rect x="70.2661%" y="165" width="0.1024%" height="15" fill="rgb(246,46,29)" fg:x="1373" fg:w="2"/><text x="70.5161%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.10%)</title><rect x="70.2661%" y="149" width="0.1024%" height="15" fill="rgb(246,185,52)" fg:x="1373" fg:w="2"/><text x="70.5161%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.10%)</title><rect x="70.2661%" y="133" width="0.1024%" height="15" fill="rgb(252,136,11)" fg:x="1373" fg:w="2"/><text x="70.5161%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (6 samples, 0.31%)</title><rect x="70.3685%" y="197" width="0.3071%" height="15" fill="rgb(219,138,53)" fg:x="1375" fg:w="6"/><text x="70.6185%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.10%)</title><rect x="70.6755%" y="197" width="0.1024%" height="15" fill="rgb(211,51,23)" fg:x="1381" fg:w="2"/><text x="70.9255%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.05%)</title><rect x="70.7779%" y="197" width="0.0512%" height="15" fill="rgb(247,221,28)" fg:x="1383" fg:w="1"/><text x="71.0279%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.05%)</title><rect x="70.7779%" y="181" width="0.0512%" height="15" fill="rgb(251,222,45)" fg:x="1383" fg:w="1"/><text x="71.0279%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.05%)</title><rect x="70.7779%" y="165" width="0.0512%" height="15" fill="rgb(217,162,53)" fg:x="1383" fg:w="1"/><text x="71.0279%" y="175.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sload (106 samples, 5.42%)</title><rect x="65.5067%" y="261" width="5.4248%" height="15" fill="rgb(229,93,14)" fg:x="1280" fg:w="106"/><text x="65.7567%" y="271.50">&lt;revm::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (89 samples, 4.55%)</title><rect x="66.3767%" y="245" width="4.5548%" height="15" fill="rgb(209,67,49)" fg:x="1297" fg:w="89"/><text x="66.6267%" y="255.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (55 samples, 2.81%)</title><rect x="68.1167%" y="229" width="2.8147%" height="15" fill="rgb(213,87,29)" fg:x="1331" fg:w="55"/><text x="68.3667%" y="239.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (55 samples, 2.81%)</title><rect x="68.1167%" y="213" width="2.8147%" height="15" fill="rgb(205,151,52)" fg:x="1331" fg:w="55"/><text x="68.3667%" y="223.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.10%)</title><rect x="70.8291%" y="197" width="0.1024%" height="15" fill="rgb(253,215,39)" fg:x="1384" fg:w="2"/><text x="71.0791%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.10%)</title><rect x="70.8291%" y="181" width="0.1024%" height="15" fill="rgb(221,220,41)" fg:x="1384" fg:w="2"/><text x="71.0791%" y="191.50"></text></g><g><title>revm::gas::Gas::record_cost (1 samples, 0.05%)</title><rect x="70.9314%" y="261" width="0.0512%" height="15" fill="rgb(218,133,21)" fg:x="1386" fg:w="1"/><text x="71.1814%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.05%)</title><rect x="70.9314%" y="245" width="0.0512%" height="15" fill="rgb(221,193,43)" fg:x="1386" fg:w="1"/><text x="71.1814%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.05%)</title><rect x="70.9826%" y="261" width="0.0512%" height="15" fill="rgb(240,128,52)" fg:x="1387" fg:w="1"/><text x="71.2326%" y="271.50"></text></g><g><title>revm::instructions::host::sload (113 samples, 5.78%)</title><rect x="65.5067%" y="277" width="5.7830%" height="15" fill="rgb(253,114,12)" fg:x="1280" fg:w="113"/><text x="65.7567%" y="287.50">revm::i..</text></g><g><title>revm::interpreter::stack::Stack::push (5 samples, 0.26%)</title><rect x="71.0338%" y="261" width="0.2559%" height="15" fill="rgb(215,223,47)" fg:x="1388" fg:w="5"/><text x="71.2838%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.20%)</title><rect x="71.0850%" y="245" width="0.2047%" height="15" fill="rgb(248,225,23)" fg:x="1389" fg:w="4"/><text x="71.3350%" y="255.50"></text></g><g><title>core::ptr::write (2 samples, 0.10%)</title><rect x="71.1873%" y="229" width="0.1024%" height="15" fill="rgb(250,108,0)" fg:x="1391" fg:w="2"/><text x="71.4373%" y="239.50"></text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Host&gt;::sstore (1 samples, 0.05%)</title><rect x="71.2897%" y="261" width="0.0512%" height="15" fill="rgb(228,208,7)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.05%)</title><rect x="71.2897%" y="245" width="0.0512%" height="15" fill="rgb(244,45,10)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.05%)</title><rect x="71.2897%" y="229" width="0.0512%" height="15" fill="rgb(207,125,25)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="71.2897%" y="213" width="0.0512%" height="15" fill="rgb(210,195,18)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.05%)</title><rect x="71.2897%" y="197" width="0.0512%" height="15" fill="rgb(249,80,12)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.05%)</title><rect x="71.2897%" y="181" width="0.0512%" height="15" fill="rgb(221,65,9)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.05%)</title><rect x="71.2897%" y="165" width="0.0512%" height="15" fill="rgb(235,49,36)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.05%)</title><rect x="71.2897%" y="149" width="0.0512%" height="15" fill="rgb(225,32,20)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.05%)</title><rect x="71.2897%" y="133" width="0.0512%" height="15" fill="rgb(215,141,46)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.05%)</title><rect x="71.2897%" y="117" width="0.0512%" height="15" fill="rgb(250,160,47)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="127.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.05%)</title><rect x="71.2897%" y="101" width="0.0512%" height="15" fill="rgb(216,222,40)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::alloc::inner::Global as hashbrown::raw::alloc::inner::Allocator&gt;::allocate (1 samples, 0.05%)</title><rect x="71.2897%" y="85" width="0.0512%" height="15" fill="rgb(234,217,39)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.05%)</title><rect x="71.2897%" y="69" width="0.0512%" height="15" fill="rgb(207,178,40)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="79.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.05%)</title><rect x="71.2897%" y="53" width="0.0512%" height="15" fill="rgb(221,136,13)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="63.50"></text></g><g><title>_int_malloc (1 samples, 0.05%)</title><rect x="71.2897%" y="37" width="0.0512%" height="15" fill="rgb(249,199,10)" fg:x="1393" fg:w="1"/><text x="71.5397%" y="47.50"></text></g><g><title>revm::instructions::host::sstore (2 samples, 0.10%)</title><rect x="71.2897%" y="277" width="0.1024%" height="15" fill="rgb(249,222,13)" fg:x="1393" fg:w="2"/><text x="71.5397%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (1 samples, 0.05%)</title><rect x="71.3408%" y="261" width="0.0512%" height="15" fill="rgb(244,185,38)" fg:x="1394" fg:w="1"/><text x="71.5908%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (4 samples, 0.20%)</title><rect x="71.8526%" y="261" width="0.2047%" height="15" fill="rgb(236,202,9)" fg:x="1404" fg:w="4"/><text x="72.1026%" y="271.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (5 samples, 0.26%)</title><rect x="72.2620%" y="229" width="0.2559%" height="15" fill="rgb(250,229,37)" fg:x="1412" fg:w="5"/><text x="72.5120%" y="239.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (5 samples, 0.26%)</title><rect x="72.2620%" y="213" width="0.2559%" height="15" fill="rgb(206,174,23)" fg:x="1412" fg:w="5"/><text x="72.5120%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (5 samples, 0.26%)</title><rect x="72.2620%" y="197" width="0.2559%" height="15" fill="rgb(211,33,43)" fg:x="1412" fg:w="5"/><text x="72.5120%" y="207.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (5 samples, 0.26%)</title><rect x="72.2620%" y="181" width="0.2559%" height="15" fill="rgb(245,58,50)" fg:x="1412" fg:w="5"/><text x="72.5120%" y="191.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u64 (11 samples, 0.56%)</title><rect x="72.2620%" y="245" width="0.5629%" height="15" fill="rgb(244,68,36)" fg:x="1412" fg:w="11"/><text x="72.5120%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (6 samples, 0.31%)</title><rect x="72.5179%" y="229" width="0.3071%" height="15" fill="rgb(232,229,15)" fg:x="1417" fg:w="6"/><text x="72.7679%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (6 samples, 0.31%)</title><rect x="72.5179%" y="213" width="0.3071%" height="15" fill="rgb(254,30,23)" fg:x="1417" fg:w="6"/><text x="72.7679%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (6 samples, 0.31%)</title><rect x="72.5179%" y="197" width="0.3071%" height="15" fill="rgb(235,160,14)" fg:x="1417" fg:w="6"/><text x="72.7679%" y="207.50"></text></g><g><title>core::array::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T: N]&gt;::index_mut (1 samples, 0.05%)</title><rect x="72.8250%" y="245" width="0.0512%" height="15" fill="rgb(212,155,44)" fg:x="1423" fg:w="1"/><text x="73.0750%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.05%)</title><rect x="72.8250%" y="229" width="0.0512%" height="15" fill="rgb(226,2,50)" fg:x="1423" fg:w="1"/><text x="73.0750%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.05%)</title><rect x="72.8250%" y="213" width="0.0512%" height="15" fill="rgb(234,177,6)" fg:x="1423" fg:w="1"/><text x="73.0750%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.05%)</title><rect x="72.8250%" y="197" width="0.0512%" height="15" fill="rgb(217,24,9)" fg:x="1423" fg:w="1"/><text x="73.0750%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.05%)</title><rect x="72.8250%" y="181" width="0.0512%" height="15" fill="rgb(220,13,46)" fg:x="1423" fg:w="1"/><text x="73.0750%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.05%)</title><rect x="72.8250%" y="165" width="0.0512%" height="15" fill="rgb(239,221,27)" fg:x="1423" fg:w="1"/><text x="73.0750%" y="175.50"></text></g><g><title>primitive_types::U256::from_big_endian (32 samples, 1.64%)</title><rect x="72.0573%" y="261" width="1.6377%" height="15" fill="rgb(222,198,25)" fg:x="1408" fg:w="32"/><text x="72.3073%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (16 samples, 0.82%)</title><rect x="72.8762%" y="245" width="0.8188%" height="15" fill="rgb(211,99,13)" fg:x="1424" fg:w="16"/><text x="73.1262%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.82%)</title><rect x="72.8762%" y="229" width="0.8188%" height="15" fill="rgb(232,111,31)" fg:x="1424" fg:w="16"/><text x="73.1262%" y="239.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.82%)</title><rect x="72.8762%" y="213" width="0.8188%" height="15" fill="rgb(245,82,37)" fg:x="1424" fg:w="16"/><text x="73.1262%" y="223.50"></text></g><g><title>revm::interpreter::memory::Memory::get_slice (1 samples, 0.05%)</title><rect x="73.6950%" y="261" width="0.0512%" height="15" fill="rgb(227,149,46)" fg:x="1440" fg:w="1"/><text x="73.9450%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.05%)</title><rect x="73.6950%" y="245" width="0.0512%" height="15" fill="rgb(218,36,50)" fg:x="1440" fg:w="1"/><text x="73.9450%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.05%)</title><rect x="73.6950%" y="229" width="0.0512%" height="15" fill="rgb(226,80,48)" fg:x="1440" fg:w="1"/><text x="73.9450%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.05%)</title><rect x="73.6950%" y="213" width="0.0512%" height="15" fill="rgb(238,224,15)" fg:x="1440" fg:w="1"/><text x="73.9450%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.05%)</title><rect x="73.6950%" y="197" width="0.0512%" height="15" fill="rgb(241,136,10)" fg:x="1440" fg:w="1"/><text x="73.9450%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.05%)</title><rect x="73.6950%" y="181" width="0.0512%" height="15" fill="rgb(208,32,45)" fg:x="1440" fg:w="1"/><text x="73.9450%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.05%)</title><rect x="73.6950%" y="165" width="0.0512%" height="15" fill="rgb(207,135,9)" fg:x="1440" fg:w="1"/><text x="73.9450%" y="175.50"></text></g><g><title>revm::interpreter::memory::next_multiple_of_32 (1 samples, 0.05%)</title><rect x="73.7462%" y="261" width="0.0512%" height="15" fill="rgb(206,86,44)" fg:x="1441" fg:w="1"/><text x="73.9962%" y="271.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (1 samples, 0.05%)</title><rect x="73.7462%" y="245" width="0.0512%" height="15" fill="rgb(245,177,15)" fg:x="1441" fg:w="1"/><text x="73.9962%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::pop_unsafe (2 samples, 0.10%)</title><rect x="73.7973%" y="261" width="0.1024%" height="15" fill="rgb(206,64,50)" fg:x="1442" fg:w="2"/><text x="74.0473%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.10%)</title><rect x="73.7973%" y="245" width="0.1024%" height="15" fill="rgb(234,36,40)" fg:x="1442" fg:w="2"/><text x="74.0473%" y="255.50"></text></g><g><title>revm::instructions::memory::mload (90 samples, 4.61%)</title><rect x="71.3920%" y="277" width="4.6059%" height="15" fill="rgb(213,64,8)" fg:x="1395" fg:w="90"/><text x="71.6420%" y="287.50">revm:..</text></g><g><title>revm::interpreter::stack::Stack::push (41 samples, 2.10%)</title><rect x="73.8997%" y="261" width="2.0983%" height="15" fill="rgb(210,75,36)" fg:x="1444" fg:w="41"/><text x="74.1497%" y="271.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (40 samples, 2.05%)</title><rect x="73.9509%" y="245" width="2.0471%" height="15" fill="rgb(229,88,21)" fg:x="1445" fg:w="40"/><text x="74.2009%" y="255.50">a..</text></g><g><title>core::ptr::write (34 samples, 1.74%)</title><rect x="74.2579%" y="229" width="1.7400%" height="15" fill="rgb(252,204,47)" fg:x="1451" fg:w="34"/><text x="74.5079%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (3 samples, 0.15%)</title><rect x="76.6121%" y="261" width="0.1535%" height="15" fill="rgb(208,77,27)" fg:x="1497" fg:w="3"/><text x="76.8621%" y="271.50"></text></g><g><title>revm::gas::Gas::record_memory (3 samples, 0.15%)</title><rect x="76.7656%" y="261" width="0.1535%" height="15" fill="rgb(221,76,26)" fg:x="1500" fg:w="3"/><text x="77.0156%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (1 samples, 0.05%)</title><rect x="76.8680%" y="245" width="0.0512%" height="15" fill="rgb(225,139,18)" fg:x="1502" fg:w="1"/><text x="77.1180%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::saturating_add (1 samples, 0.05%)</title><rect x="77.1238%" y="245" width="0.0512%" height="15" fill="rgb(230,137,11)" fg:x="1507" fg:w="1"/><text x="77.3738%" y="255.50"></text></g><g><title>revm::gas::calc::memory_gas (6 samples, 0.31%)</title><rect x="76.9191%" y="261" width="0.3071%" height="15" fill="rgb(212,28,1)" fg:x="1503" fg:w="6"/><text x="77.1691%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::saturating_mul (1 samples, 0.05%)</title><rect x="77.1750%" y="245" width="0.0512%" height="15" fill="rgb(248,164,17)" fg:x="1508" fg:w="1"/><text x="77.4250%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_mul (1 samples, 0.05%)</title><rect x="77.1750%" y="229" width="0.0512%" height="15" fill="rgb(222,171,42)" fg:x="1508" fg:w="1"/><text x="77.4250%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (1 samples, 0.05%)</title><rect x="77.1750%" y="213" width="0.0512%" height="15" fill="rgb(243,84,45)" fg:x="1508" fg:w="1"/><text x="77.4250%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="77.2774%" y="213" width="0.0512%" height="15" fill="rgb(252,49,23)" fg:x="1510" fg:w="1"/><text x="77.5274%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="77.2774%" y="197" width="0.0512%" height="15" fill="rgb(215,19,7)" fg:x="1510" fg:w="1"/><text x="77.5274%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.05%)</title><rect x="77.2774%" y="181" width="0.0512%" height="15" fill="rgb(238,81,41)" fg:x="1510" fg:w="1"/><text x="77.5274%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.05%)</title><rect x="77.2774%" y="165" width="0.0512%" height="15" fill="rgb(210,199,37)" fg:x="1510" fg:w="1"/><text x="77.5274%" y="175.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.20%)</title><rect x="77.3286%" y="213" width="0.2047%" height="15" fill="rgb(244,192,49)" fg:x="1511" fg:w="4"/><text x="77.5786%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.20%)</title><rect x="77.3286%" y="197" width="0.2047%" height="15" fill="rgb(226,211,11)" fg:x="1511" fg:w="4"/><text x="77.5786%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.05%)</title><rect x="77.5333%" y="213" width="0.0512%" height="15" fill="rgb(236,162,54)" fg:x="1515" fg:w="1"/><text x="77.7833%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.05%)</title><rect x="77.5333%" y="197" width="0.0512%" height="15" fill="rgb(220,229,9)" fg:x="1515" fg:w="1"/><text x="77.7833%" y="207.50"></text></g><g><title>revm::interpreter::memory::Memory::resize (25 samples, 1.28%)</title><rect x="77.2262%" y="261" width="1.2794%" height="15" fill="rgb(250,87,22)" fg:x="1509" fg:w="25"/><text x="77.4762%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize (25 samples, 1.28%)</title><rect x="77.2262%" y="245" width="1.2794%" height="15" fill="rgb(239,43,17)" fg:x="1509" fg:w="25"/><text x="77.4762%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (24 samples, 1.23%)</title><rect x="77.2774%" y="229" width="1.2282%" height="15" fill="rgb(231,177,25)" fg:x="1510" fg:w="24"/><text x="77.5274%" y="239.50"></text></g><g><title>core::ptr::write (18 samples, 0.92%)</title><rect x="77.5844%" y="213" width="0.9212%" height="15" fill="rgb(219,179,1)" fg:x="1516" fg:w="18"/><text x="77.8344%" y="223.50"></text></g><g><title>__memset_avx2_unaligned_erms (14 samples, 0.72%)</title><rect x="77.7892%" y="197" width="0.7165%" height="15" fill="rgb(238,219,53)" fg:x="1520" fg:w="14"/><text x="78.0392%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="78.1986%" y="181" width="0.3071%" height="15" fill="rgb(232,167,36)" fg:x="1528" fg:w="6"/><text x="78.4486%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="78.1986%" y="165" width="0.3071%" height="15" fill="rgb(244,19,51)" fg:x="1528" fg:w="6"/><text x="78.4486%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="78.1986%" y="149" width="0.3071%" height="15" fill="rgb(224,6,22)" fg:x="1528" fg:w="6"/><text x="78.4486%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.31%)</title><rect x="78.1986%" y="133" width="0.3071%" height="15" fill="rgb(224,145,5)" fg:x="1528" fg:w="6"/><text x="78.4486%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.26%)</title><rect x="78.2497%" y="117" width="0.2559%" height="15" fill="rgb(234,130,49)" fg:x="1529" fg:w="5"/><text x="78.4997%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.20%)</title><rect x="78.3009%" y="101" width="0.2047%" height="15" fill="rgb(254,6,2)" fg:x="1530" fg:w="4"/><text x="78.5509%" y="111.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="78.3521%" y="85" width="0.1535%" height="15" fill="rgb(208,96,46)" fg:x="1531" fg:w="3"/><text x="78.6021%" y="95.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="78.3521%" y="69" width="0.1535%" height="15" fill="rgb(239,3,39)" fg:x="1531" fg:w="3"/><text x="78.6021%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="78.3521%" y="53" width="0.1535%" height="15" fill="rgb(233,210,1)" fg:x="1531" fg:w="3"/><text x="78.6021%" y="63.50"></text></g><g><title>[unknown] (3 samples, 0.15%)</title><rect x="78.3521%" y="37" width="0.1535%" height="15" fill="rgb(244,137,37)" fg:x="1531" fg:w="3"/><text x="78.6021%" y="47.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.20%)</title><rect x="78.5056%" y="213" width="0.2047%" height="15" fill="rgb(240,136,2)" fg:x="1534" fg:w="4"/><text x="78.7556%" y="223.50"></text></g><g><title>revm::interpreter::memory::Memory::set_u256 (6 samples, 0.31%)</title><rect x="78.5056%" y="261" width="0.3071%" height="15" fill="rgb(239,18,37)" fg:x="1534" fg:w="6"/><text x="78.7556%" y="271.50"></text></g><g><title>primitive_types::U256::to_big_endian (6 samples, 0.31%)</title><rect x="78.5056%" y="245" width="0.3071%" height="15" fill="rgb(218,185,22)" fg:x="1534" fg:w="6"/><text x="78.7556%" y="255.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::write_u64 (6 samples, 0.31%)</title><rect x="78.5056%" y="229" width="0.3071%" height="15" fill="rgb(225,218,4)" fg:x="1534" fg:w="6"/><text x="78.7556%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::to_be (2 samples, 0.10%)</title><rect x="78.7103%" y="213" width="0.1024%" height="15" fill="rgb(230,182,32)" fg:x="1538" fg:w="2"/><text x="78.9603%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (2 samples, 0.10%)</title><rect x="78.7103%" y="197" width="0.1024%" height="15" fill="rgb(242,56,43)" fg:x="1538" fg:w="2"/><text x="78.9603%" y="207.50"></text></g><g><title>&lt;usize as core::ops::bit::BitAnd&gt;::bitand (1 samples, 0.05%)</title><rect x="78.8127%" y="245" width="0.0512%" height="15" fill="rgb(233,99,24)" fg:x="1540" fg:w="1"/><text x="79.0627%" y="255.50"></text></g><g><title>revm::interpreter::memory::next_multiple_of_32 (3 samples, 0.15%)</title><rect x="78.8127%" y="261" width="0.1535%" height="15" fill="rgb(234,209,42)" fg:x="1540" fg:w="3"/><text x="79.0627%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (2 samples, 0.10%)</title><rect x="78.8639%" y="245" width="0.1024%" height="15" fill="rgb(227,7,12)" fg:x="1541" fg:w="2"/><text x="79.1139%" y="255.50"></text></g><g><title>revm::interpreter::stack::Stack::len (1 samples, 0.05%)</title><rect x="78.9662%" y="261" width="0.0512%" height="15" fill="rgb(245,203,43)" fg:x="1543" fg:w="1"/><text x="79.2162%" y="271.50"></text></g><g><title>revm::instructions::memory::mstore (62 samples, 3.17%)</title><rect x="75.9980%" y="277" width="3.1730%" height="15" fill="rgb(238,205,33)" fg:x="1485" fg:w="62"/><text x="76.2480%" y="287.50">rev..</text></g><g><title>revm::interpreter::stack::Stack::pop2_unsafe (3 samples, 0.15%)</title><rect x="79.0174%" y="261" width="0.1535%" height="15" fill="rgb(231,56,7)" fg:x="1544" fg:w="3"/><text x="79.2674%" y="271.50"></text></g><g><title>revm::instructions::stack::dup (100 samples, 5.12%)</title><rect x="79.1709%" y="277" width="5.1177%" height="15" fill="rgb(244,186,29)" fg:x="1547" fg:w="100"/><text x="79.4209%" y="287.50">revm::..</text></g><g><title>revm::interpreter::stack::Stack::dup (100 samples, 5.12%)</title><rect x="79.1709%" y="261" width="5.1177%" height="15" fill="rgb(234,111,31)" fg:x="1547" fg:w="100"/><text x="79.4209%" y="271.50">revm::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.05%)</title><rect x="84.2375%" y="245" width="0.0512%" height="15" fill="rgb(241,149,10)" fg:x="1646" fg:w="1"/><text x="84.4875%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.05%)</title><rect x="84.2375%" y="229" width="0.0512%" height="15" fill="rgb(249,206,44)" fg:x="1646" fg:w="1"/><text x="84.4875%" y="239.50"></text></g><g><title>revm::instructions::stack::pop (4 samples, 0.20%)</title><rect x="84.2886%" y="277" width="0.2047%" height="15" fill="rgb(251,153,30)" fg:x="1647" fg:w="4"/><text x="84.5386%" y="287.50"></text></g><g><title>revm::interpreter::stack::Stack::reduce_one (4 samples, 0.20%)</title><rect x="84.2886%" y="261" width="0.2047%" height="15" fill="rgb(239,152,38)" fg:x="1647" fg:w="4"/><text x="84.5386%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.10%)</title><rect x="84.3910%" y="245" width="0.1024%" height="15" fill="rgb(249,139,47)" fg:x="1649" fg:w="2"/><text x="84.6410%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.10%)</title><rect x="84.7492%" y="261" width="0.1024%" height="15" fill="rgb(244,64,35)" fg:x="1656" fg:w="2"/><text x="84.9992%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.10%)</title><rect x="84.7492%" y="245" width="0.1024%" height="15" fill="rgb(216,46,15)" fg:x="1656" fg:w="2"/><text x="84.9992%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (5 samples, 0.26%)</title><rect x="88.0246%" y="245" width="0.2559%" height="15" fill="rgb(250,74,19)" fg:x="1720" fg:w="5"/><text x="88.2746%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (4 samples, 0.20%)</title><rect x="88.2805%" y="245" width="0.2047%" height="15" fill="rgb(249,42,33)" fg:x="1725" fg:w="4"/><text x="88.5305%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (4 samples, 0.20%)</title><rect x="88.2805%" y="229" width="0.2047%" height="15" fill="rgb(242,149,17)" fg:x="1725" fg:w="4"/><text x="88.5305%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (4 samples, 0.20%)</title><rect x="88.2805%" y="213" width="0.2047%" height="15" fill="rgb(244,29,21)" fg:x="1725" fg:w="4"/><text x="88.5305%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.15%)</title><rect x="88.4852%" y="245" width="0.1535%" height="15" fill="rgb(220,130,37)" fg:x="1729" fg:w="3"/><text x="88.7352%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.15%)</title><rect x="88.4852%" y="229" width="0.1535%" height="15" fill="rgb(211,67,2)" fg:x="1729" fg:w="3"/><text x="88.7352%" y="239.50"></text></g><g><title>revm::instructions::stack::push (85 samples, 4.35%)</title><rect x="84.4933%" y="277" width="4.3501%" height="15" fill="rgb(235,68,52)" fg:x="1651" fg:w="85"/><text x="84.7433%" y="287.50">revm:..</text></g><g><title>revm::interpreter::stack::Stack::push_slice (78 samples, 3.99%)</title><rect x="84.8516%" y="261" width="3.9918%" height="15" fill="rgb(246,142,3)" fg:x="1658" fg:w="78"/><text x="85.1016%" y="271.50">revm..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (4 samples, 0.20%)</title><rect x="88.6387%" y="245" width="0.2047%" height="15" fill="rgb(241,25,7)" fg:x="1732" fg:w="4"/><text x="88.8887%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (4 samples, 0.20%)</title><rect x="88.6387%" y="229" width="0.2047%" height="15" fill="rgb(242,119,39)" fg:x="1732" fg:w="4"/><text x="88.8887%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.20%)</title><rect x="88.6387%" y="213" width="0.2047%" height="15" fill="rgb(241,98,45)" fg:x="1732" fg:w="4"/><text x="88.8887%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.20%)</title><rect x="88.6387%" y="197" width="0.2047%" height="15" fill="rgb(254,28,30)" fg:x="1732" fg:w="4"/><text x="88.8887%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.05%)</title><rect x="89.8158%" y="245" width="0.0512%" height="15" fill="rgb(241,142,54)" fg:x="1755" fg:w="1"/><text x="90.0658%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.05%)</title><rect x="89.8158%" y="229" width="0.0512%" height="15" fill="rgb(222,85,15)" fg:x="1755" fg:w="1"/><text x="90.0658%" y="239.50"></text></g><g><title>core::intrinsics::copy (12 samples, 0.61%)</title><rect x="89.8669%" y="229" width="0.6141%" height="15" fill="rgb(210,85,47)" fg:x="1756" fg:w="12"/><text x="90.1169%" y="239.50"></text></g><g><title>revm::instructions::stack::swap (79 samples, 4.04%)</title><rect x="88.8434%" y="277" width="4.0430%" height="15" fill="rgb(224,206,25)" fg:x="1736" fg:w="79"/><text x="89.0934%" y="287.50">revm..</text></g><g><title>revm::interpreter::stack::Stack::swap (79 samples, 4.04%)</title><rect x="88.8434%" y="261" width="4.0430%" height="15" fill="rgb(243,201,19)" fg:x="1736" fg:w="79"/><text x="89.0934%" y="271.50">revm..</text></g><g><title>core::ptr::swap (59 samples, 3.02%)</title><rect x="89.8669%" y="245" width="3.0194%" height="15" fill="rgb(236,59,4)" fg:x="1756" fg:w="59"/><text x="90.1169%" y="255.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 2.41%)</title><rect x="90.4811%" y="229" width="2.4053%" height="15" fill="rgb(254,179,45)" fg:x="1768" fg:w="47"/><text x="90.7311%" y="239.50">co..</text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.05%)</title><rect x="93.0911%" y="165" width="0.0512%" height="15" fill="rgb(226,14,10)" fg:x="1819" fg:w="1"/><text x="93.3411%" y="175.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.05%)</title><rect x="93.0911%" y="149" width="0.0512%" height="15" fill="rgb(244,27,41)" fg:x="1819" fg:w="1"/><text x="93.3411%" y="159.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.05%)</title><rect x="93.0911%" y="133" width="0.0512%" height="15" fill="rgb(235,35,32)" fg:x="1819" fg:w="1"/><text x="93.3411%" y="143.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (1 samples, 0.05%)</title><rect x="93.0911%" y="117" width="0.0512%" height="15" fill="rgb(218,68,31)" fg:x="1819" fg:w="1"/><text x="93.3411%" y="127.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitAnd&gt;::bitand (7 samples, 0.36%)</title><rect x="93.1934%" y="133" width="0.3582%" height="15" fill="rgb(207,120,37)" fg:x="1821" fg:w="7"/><text x="93.4434%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (20 samples, 1.02%)</title><rect x="93.5517%" y="133" width="1.0235%" height="15" fill="rgb(227,98,0)" fg:x="1828" fg:w="20"/><text x="93.8017%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXorAssign&gt;::bitxor_assign (27 samples, 1.38%)</title><rect x="94.5752%" y="133" width="1.3818%" height="15" fill="rgb(207,7,3)" fg:x="1848" fg:w="27"/><text x="94.8252%" y="143.50"></text></g><g><title>&lt;u64 as core::ops::bit::Not&gt;::not (13 samples, 0.67%)</title><rect x="95.9570%" y="133" width="0.6653%" height="15" fill="rgb(206,98,19)" fg:x="1875" fg:w="13"/><text x="96.2070%" y="143.50"></text></g><g><title>sha3::state::Sha3State::absorb_block (87 samples, 4.45%)</title><rect x="92.9887%" y="181" width="4.4524%" height="15" fill="rgb(217,5,26)" fg:x="1817" fg:w="87"/><text x="93.2387%" y="191.50">sha3:..</text></g><g><title>keccak::f1600 (84 samples, 4.30%)</title><rect x="93.1423%" y="165" width="4.2989%" height="15" fill="rgb(235,190,38)" fg:x="1820" fg:w="84"/><text x="93.3923%" y="175.50">kecca..</text></g><g><title>keccak::keccak_p (84 samples, 4.30%)</title><rect x="93.1423%" y="149" width="4.2989%" height="15" fill="rgb(247,86,24)" fg:x="1820" fg:w="84"/><text x="93.3923%" y="159.50">kecca..</text></g><g><title>&lt;u64 as keccak::LaneSize&gt;::rotate_left (16 samples, 0.82%)</title><rect x="96.6223%" y="133" width="0.8188%" height="15" fill="rgb(205,101,16)" fg:x="1888" fg:w="16"/><text x="96.8723%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (16 samples, 0.82%)</title><rect x="96.6223%" y="117" width="0.8188%" height="15" fill="rgb(246,168,33)" fg:x="1888" fg:w="16"/><text x="96.8723%" y="127.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::finalize (88 samples, 4.50%)</title><rect x="92.9887%" y="245" width="4.5036%" height="15" fill="rgb(231,114,1)" fg:x="1817" fg:w="88"/><text x="93.2387%" y="255.50">&lt;D as..</text></g><g><title>digest::FixedOutput::finalize_fixed (88 samples, 4.50%)</title><rect x="92.9887%" y="229" width="4.5036%" height="15" fill="rgb(207,184,53)" fg:x="1817" fg:w="88"/><text x="93.2387%" y="239.50">diges..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (88 samples, 4.50%)</title><rect x="92.9887%" y="213" width="4.5036%" height="15" fill="rgb(224,95,51)" fg:x="1817" fg:w="88"/><text x="93.2387%" y="223.50">&lt;dige..</text></g><g><title>&lt;sha3::Keccak256Core as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (88 samples, 4.50%)</title><rect x="92.9887%" y="197" width="4.5036%" height="15" fill="rgb(212,188,45)" fg:x="1817" fg:w="88"/><text x="93.2387%" y="207.50">&lt;sha3..</text></g><g><title>sha3::state::Sha3State::as_bytes (1 samples, 0.05%)</title><rect x="97.4411%" y="181" width="0.0512%" height="15" fill="rgb(223,154,38)" fg:x="1904" fg:w="1"/><text x="97.6911%" y="191.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (90 samples, 4.61%)</title><rect x="92.9887%" y="261" width="4.6059%" height="15" fill="rgb(251,22,52)" fg:x="1817" fg:w="90"/><text x="93.2387%" y="271.50">&lt;D as..</text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as core::default::Default&gt;::default (2 samples, 0.10%)</title><rect x="97.4923%" y="245" width="0.1024%" height="15" fill="rgb(229,209,22)" fg:x="1905" fg:w="2"/><text x="97.7423%" y="255.50"></text></g><g><title>&lt;block_buffer::BlockBuffer&lt;BlockSize,Kind&gt; as core::default::Default&gt;::default (2 samples, 0.10%)</title><rect x="97.4923%" y="229" width="0.1024%" height="15" fill="rgb(234,138,34)" fg:x="1905" fg:w="2"/><text x="97.7423%" y="239.50"></text></g><g><title>__memset_avx2_unaligned_erms (2 samples, 0.10%)</title><rect x="97.4923%" y="213" width="0.1024%" height="15" fill="rgb(212,95,11)" fg:x="1905" fg:w="2"/><text x="97.7423%" y="223.50"></text></g><g><title>revm::gas::Gas::record_cost (1 samples, 0.05%)</title><rect x="97.5947%" y="261" width="0.0512%" height="15" fill="rgb(240,179,47)" fg:x="1907" fg:w="1"/><text x="97.8447%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.05%)</title><rect x="97.6459%" y="245" width="0.0512%" height="15" fill="rgb(240,163,11)" fg:x="1908" fg:w="1"/><text x="97.8959%" y="255.50"></text></g><g><title>core::ptr::write (1 samples, 0.05%)</title><rect x="97.6459%" y="229" width="0.0512%" height="15" fill="rgb(236,37,12)" fg:x="1908" fg:w="1"/><text x="97.8959%" y="239.50"></text></g><g><title>revm::instructions::system::sha3 (96 samples, 4.91%)</title><rect x="92.8864%" y="277" width="4.9130%" height="15" fill="rgb(232,164,16)" fg:x="1815" fg:w="96"/><text x="93.1364%" y="287.50">revm::..</text></g><g><title>revm::interpreter::stack::Stack::push_h256 (3 samples, 0.15%)</title><rect x="97.6459%" y="261" width="0.1535%" height="15" fill="rgb(244,205,15)" fg:x="1908" fg:w="3"/><text x="97.8959%" y="271.50"></text></g><g><title>primitive_types::U256::from_big_endian (2 samples, 0.10%)</title><rect x="97.6970%" y="245" width="0.1024%" height="15" fill="rgb(223,117,47)" fg:x="1909" fg:w="2"/><text x="97.9470%" y="255.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u64 (2 samples, 0.10%)</title><rect x="97.6970%" y="229" width="0.1024%" height="15" fill="rgb(244,107,35)" fg:x="1909" fg:w="2"/><text x="97.9470%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be_bytes (2 samples, 0.10%)</title><rect x="97.6970%" y="213" width="0.1024%" height="15" fill="rgb(205,140,8)" fg:x="1909" fg:w="2"/><text x="97.9470%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_be (2 samples, 0.10%)</title><rect x="97.6970%" y="197" width="0.1024%" height="15" fill="rgb(228,84,46)" fg:x="1909" fg:w="2"/><text x="97.9470%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::swap_bytes (2 samples, 0.10%)</title><rect x="97.6970%" y="181" width="0.1024%" height="15" fill="rgb(254,188,9)" fg:x="1909" fg:w="2"/><text x="97.9470%" y="191.50"></text></g><g><title>revm::interpreter::stack::Stack::len (24 samples, 1.23%)</title><rect x="97.7994%" y="277" width="1.2282%" height="15" fill="rgb(206,112,54)" fg:x="1911" fg:w="24"/><text x="98.0494%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.05%)</title><rect x="99.5394%" y="261" width="0.0512%" height="15" fill="rgb(216,84,49)" fg:x="1945" fg:w="1"/><text x="99.7894%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.05%)</title><rect x="99.5394%" y="245" width="0.0512%" height="15" fill="rgb(214,194,35)" fg:x="1945" fg:w="1"/><text x="99.7894%" y="255.50"></text></g><g><title>revm::interpreter::Interpreter::run (1,644 samples, 84.14%)</title><rect x="15.7114%" y="309" width="84.1351%" height="15" fill="rgb(249,28,3)" fg:x="307" fg:w="1644"/><text x="15.9614%" y="319.50">revm::interpreter::Interpreter::run</text></g><g><title>revm::instructions::eval (1,546 samples, 79.12%)</title><rect x="20.7267%" y="293" width="79.1198%" height="15" fill="rgb(222,56,52)" fg:x="405" fg:w="1546"/><text x="20.9767%" y="303.50">revm::instructions::eval</text></g><g><title>revm::interpreter::stack::Stack::pop_top_unsafe (16 samples, 0.82%)</title><rect x="99.0276%" y="277" width="0.8188%" height="15" fill="rgb(245,217,50)" fg:x="1935" fg:w="16"/><text x="99.2776%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (5 samples, 0.26%)</title><rect x="99.5906%" y="261" width="0.2559%" height="15" fill="rgb(213,201,24)" fg:x="1946" fg:w="5"/><text x="99.8406%" y="271.50"></text></g><g><title>__libc_start_main (1,646 samples, 84.24%)</title><rect x="15.7114%" y="613" width="84.2375%" height="15" fill="rgb(248,116,28)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="623.50">__libc_start_main</text></g><g><title>main (1,646 samples, 84.24%)</title><rect x="15.7114%" y="597" width="84.2375%" height="15" fill="rgb(219,72,43)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (1,646 samples, 84.24%)</title><rect x="15.7114%" y="581" width="84.2375%" height="15" fill="rgb(209,138,14)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,646 samples, 84.24%)</title><rect x="15.7114%" y="565" width="84.2375%" height="15" fill="rgb(222,18,33)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,646 samples, 84.24%)</title><rect x="15.7114%" y="549" width="84.2375%" height="15" fill="rgb(213,199,7)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,646 samples, 84.24%)</title><rect x="15.7114%" y="533" width="84.2375%" height="15" fill="rgb(250,110,10)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,646 samples, 84.24%)</title><rect x="15.7114%" y="517" width="84.2375%" height="15" fill="rgb(248,123,6)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,646 samples, 84.24%)</title><rect x="15.7114%" y="501" width="84.2375%" height="15" fill="rgb(206,91,31)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,646 samples, 84.24%)</title><rect x="15.7114%" y="485" width="84.2375%" height="15" fill="rgb(211,154,13)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,646 samples, 84.24%)</title><rect x="15.7114%" y="469" width="84.2375%" height="15" fill="rgb(225,148,7)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,646 samples, 84.24%)</title><rect x="15.7114%" y="453" width="84.2375%" height="15" fill="rgb(220,160,43)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,646 samples, 84.24%)</title><rect x="15.7114%" y="437" width="84.2375%" height="15" fill="rgb(213,52,39)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,646 samples, 84.24%)</title><rect x="15.7114%" y="421" width="84.2375%" height="15" fill="rgb(243,137,7)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,646 samples, 84.24%)</title><rect x="15.7114%" y="405" width="84.2375%" height="15" fill="rgb(230,79,13)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>snailtracer::main (1,646 samples, 84.24%)</title><rect x="15.7114%" y="389" width="84.2375%" height="15" fill="rgb(247,105,23)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="399.50">snailtracer::main</text></g><g><title>snailtracer::simple_example (1,646 samples, 84.24%)</title><rect x="15.7114%" y="373" width="84.2375%" height="15" fill="rgb(223,179,41)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="383.50">snailtracer::simple_example</text></g><g><title>revm::evm::EVM&lt;DB&gt;::transact (1,646 samples, 84.24%)</title><rect x="15.7114%" y="357" width="84.2375%" height="15" fill="rgb(218,9,34)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="367.50">revm::evm::EVM&lt;DB&gt;::transact</text></g><g><title>&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact (1,646 samples, 84.24%)</title><rect x="15.7114%" y="341" width="84.2375%" height="15" fill="rgb(222,106,8)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="351.50">&lt;revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt; as revm::evm_impl::Transact&gt;::transact</text></g><g><title>revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner (1,646 samples, 84.24%)</title><rect x="15.7114%" y="325" width="84.2375%" height="15" fill="rgb(211,220,0)" fg:x="307" fg:w="1646"/><text x="15.9614%" y="335.50">revm::evm_impl::EVMImpl&lt;GSPEC,DB,_&gt;::call_inner</text></g><g><title>revm::interpreter::contract::Contract::new_with_context (2 samples, 0.10%)</title><rect x="99.8465%" y="309" width="0.1024%" height="15" fill="rgb(229,52,16)" fg:x="1951" fg:w="2"/><text x="100.0965%" y="319.50"></text></g><g><title>revm::interpreter::contract::Contract::new (2 samples, 0.10%)</title><rect x="99.8465%" y="293" width="0.1024%" height="15" fill="rgb(212,155,18)" fg:x="1951" fg:w="2"/><text x="100.0965%" y="303.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::lock (2 samples, 0.10%)</title><rect x="99.8465%" y="277" width="0.1024%" height="15" fill="rgb(242,21,14)" fg:x="1951" fg:w="2"/><text x="100.0965%" y="287.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::to_analysed (2 samples, 0.10%)</title><rect x="99.8465%" y="261" width="0.1024%" height="15" fill="rgb(222,19,48)" fg:x="1951" fg:w="2"/><text x="100.0965%" y="271.50"></text></g><g><title>revm::interpreter::bytecode::Bytecode::analyze (2 samples, 0.10%)</title><rect x="99.8465%" y="245" width="0.1024%" height="15" fill="rgb(232,45,27)" fg:x="1951" fg:w="2"/><text x="100.0965%" y="255.50"></text></g><g><title>all (1,954 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(249,103,42)" fg:x="0" fg:w="1954"/><text x="0.2500%" y="671.50"></text></g><g><title>snailtracer (1,949 samples, 99.74%)</title><rect x="0.2559%" y="645" width="99.7441%" height="15" fill="rgb(246,81,33)" fg:x="5" fg:w="1949"/><text x="0.5059%" y="655.50">snailtracer</text></g><g><title>_start (1,647 samples, 84.29%)</title><rect x="15.7114%" y="629" width="84.2886%" height="15" fill="rgb(252,33,42)" fg:x="307" fg:w="1647"/><text x="15.9614%" y="639.50">_start</text></g><g><title>_dl_start (1 samples, 0.05%)</title><rect x="99.9488%" y="613" width="0.0512%" height="15" fill="rgb(209,212,41)" fg:x="1953" fg:w="1"/><text x="100.1988%" y="623.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.05%)</title><rect x="99.9488%" y="597" width="0.0512%" height="15" fill="rgb(207,154,6)" fg:x="1953" fg:w="1"/><text x="100.1988%" y="607.50"></text></g><g><title>dl_main (1 samples, 0.05%)</title><rect x="99.9488%" y="581" width="0.0512%" height="15" fill="rgb(223,64,47)" fg:x="1953" fg:w="1"/><text x="100.1988%" y="591.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.05%)</title><rect x="99.9488%" y="565" width="0.0512%" height="15" fill="rgb(211,161,38)" fg:x="1953" fg:w="1"/><text x="100.1988%" y="575.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.05%)</title><rect x="99.9488%" y="549" width="0.0512%" height="15" fill="rgb(219,138,40)" fg:x="1953" fg:w="1"/><text x="100.1988%" y="559.50"></text></g></svg></svg>